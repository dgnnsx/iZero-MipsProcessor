// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2016 11:50:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    banco_de_registradores
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module banco_de_registradores_vlg_sample_tst(
	RD,
	RS,
	RT,
	clock,
	dadosEscrita,
	regWrite,
	sampler_tx
);
input [4:0] RD;
input [4:0] RS;
input [4:0] RT;
input  clock;
input [31:0] dadosEscrita;
input  regWrite;
output sampler_tx;

reg sample;
time current_time;
always @(RD or RS or RT or clock or dadosEscrita or regWrite)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module banco_de_registradores_vlg_check_tst (
	leituraRS,
	leituraRT,
	sampler_rx
);
input [31:0] leituraRS;
input [31:0] leituraRT;
input sampler_rx;

reg [31:0] leituraRS_expected;
reg [31:0] leituraRT_expected;

reg [31:0] leituraRS_prev;
reg [31:0] leituraRT_prev;

reg [31:0] leituraRS_expected_prev;
reg [31:0] leituraRT_expected_prev;

reg [31:0] last_leituraRS_exp;
reg [31:0] last_leituraRT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	leituraRS_prev = leituraRS;
	leituraRT_prev = leituraRT;
end

// update expected /o prevs

always @(trigger)
begin
	leituraRS_expected_prev = leituraRS_expected;
	leituraRT_expected_prev = leituraRT_expected;
end


// expected leituraRS[ 31 ]
initial
begin
	leituraRS_expected[31] = 1'bX;
end 
// expected leituraRS[ 30 ]
initial
begin
	leituraRS_expected[30] = 1'bX;
end 
// expected leituraRS[ 29 ]
initial
begin
	leituraRS_expected[29] = 1'bX;
end 
// expected leituraRS[ 28 ]
initial
begin
	leituraRS_expected[28] = 1'bX;
end 
// expected leituraRS[ 27 ]
initial
begin
	leituraRS_expected[27] = 1'bX;
end 
// expected leituraRS[ 26 ]
initial
begin
	leituraRS_expected[26] = 1'bX;
end 
// expected leituraRS[ 25 ]
initial
begin
	leituraRS_expected[25] = 1'bX;
end 
// expected leituraRS[ 24 ]
initial
begin
	leituraRS_expected[24] = 1'bX;
end 
// expected leituraRS[ 23 ]
initial
begin
	leituraRS_expected[23] = 1'bX;
end 
// expected leituraRS[ 22 ]
initial
begin
	leituraRS_expected[22] = 1'bX;
end 
// expected leituraRS[ 21 ]
initial
begin
	leituraRS_expected[21] = 1'bX;
end 
// expected leituraRS[ 20 ]
initial
begin
	leituraRS_expected[20] = 1'bX;
end 
// expected leituraRS[ 19 ]
initial
begin
	leituraRS_expected[19] = 1'bX;
end 
// expected leituraRS[ 18 ]
initial
begin
	leituraRS_expected[18] = 1'bX;
end 
// expected leituraRS[ 17 ]
initial
begin
	leituraRS_expected[17] = 1'bX;
end 
// expected leituraRS[ 16 ]
initial
begin
	leituraRS_expected[16] = 1'bX;
end 
// expected leituraRS[ 15 ]
initial
begin
	leituraRS_expected[15] = 1'bX;
end 
// expected leituraRS[ 14 ]
initial
begin
	leituraRS_expected[14] = 1'bX;
end 
// expected leituraRS[ 13 ]
initial
begin
	leituraRS_expected[13] = 1'bX;
end 
// expected leituraRS[ 12 ]
initial
begin
	leituraRS_expected[12] = 1'bX;
end 
// expected leituraRS[ 11 ]
initial
begin
	leituraRS_expected[11] = 1'bX;
end 
// expected leituraRS[ 10 ]
initial
begin
	leituraRS_expected[10] = 1'bX;
end 
// expected leituraRS[ 9 ]
initial
begin
	leituraRS_expected[9] = 1'bX;
end 
// expected leituraRS[ 8 ]
initial
begin
	leituraRS_expected[8] = 1'bX;
end 
// expected leituraRS[ 7 ]
initial
begin
	leituraRS_expected[7] = 1'bX;
end 
// expected leituraRS[ 6 ]
initial
begin
	leituraRS_expected[6] = 1'bX;
end 
// expected leituraRS[ 5 ]
initial
begin
	leituraRS_expected[5] = 1'bX;
end 
// expected leituraRS[ 4 ]
initial
begin
	leituraRS_expected[4] = 1'bX;
end 
// expected leituraRS[ 3 ]
initial
begin
	leituraRS_expected[3] = 1'bX;
end 
// expected leituraRS[ 2 ]
initial
begin
	leituraRS_expected[2] = 1'bX;
end 
// expected leituraRS[ 1 ]
initial
begin
	leituraRS_expected[1] = 1'bX;
end 
// expected leituraRS[ 0 ]
initial
begin
	leituraRS_expected[0] = 1'bX;
end 
// expected leituraRT[ 31 ]
initial
begin
	leituraRT_expected[31] = 1'bX;
end 
// expected leituraRT[ 30 ]
initial
begin
	leituraRT_expected[30] = 1'bX;
end 
// expected leituraRT[ 29 ]
initial
begin
	leituraRT_expected[29] = 1'bX;
end 
// expected leituraRT[ 28 ]
initial
begin
	leituraRT_expected[28] = 1'bX;
end 
// expected leituraRT[ 27 ]
initial
begin
	leituraRT_expected[27] = 1'bX;
end 
// expected leituraRT[ 26 ]
initial
begin
	leituraRT_expected[26] = 1'bX;
end 
// expected leituraRT[ 25 ]
initial
begin
	leituraRT_expected[25] = 1'bX;
end 
// expected leituraRT[ 24 ]
initial
begin
	leituraRT_expected[24] = 1'bX;
end 
// expected leituraRT[ 23 ]
initial
begin
	leituraRT_expected[23] = 1'bX;
end 
// expected leituraRT[ 22 ]
initial
begin
	leituraRT_expected[22] = 1'bX;
end 
// expected leituraRT[ 21 ]
initial
begin
	leituraRT_expected[21] = 1'bX;
end 
// expected leituraRT[ 20 ]
initial
begin
	leituraRT_expected[20] = 1'bX;
end 
// expected leituraRT[ 19 ]
initial
begin
	leituraRT_expected[19] = 1'bX;
end 
// expected leituraRT[ 18 ]
initial
begin
	leituraRT_expected[18] = 1'bX;
end 
// expected leituraRT[ 17 ]
initial
begin
	leituraRT_expected[17] = 1'bX;
end 
// expected leituraRT[ 16 ]
initial
begin
	leituraRT_expected[16] = 1'bX;
end 
// expected leituraRT[ 15 ]
initial
begin
	leituraRT_expected[15] = 1'bX;
end 
// expected leituraRT[ 14 ]
initial
begin
	leituraRT_expected[14] = 1'bX;
end 
// expected leituraRT[ 13 ]
initial
begin
	leituraRT_expected[13] = 1'bX;
end 
// expected leituraRT[ 12 ]
initial
begin
	leituraRT_expected[12] = 1'bX;
end 
// expected leituraRT[ 11 ]
initial
begin
	leituraRT_expected[11] = 1'bX;
end 
// expected leituraRT[ 10 ]
initial
begin
	leituraRT_expected[10] = 1'bX;
end 
// expected leituraRT[ 9 ]
initial
begin
	leituraRT_expected[9] = 1'bX;
end 
// expected leituraRT[ 8 ]
initial
begin
	leituraRT_expected[8] = 1'bX;
end 
// expected leituraRT[ 7 ]
initial
begin
	leituraRT_expected[7] = 1'bX;
end 
// expected leituraRT[ 6 ]
initial
begin
	leituraRT_expected[6] = 1'bX;
end 
// expected leituraRT[ 5 ]
initial
begin
	leituraRT_expected[5] = 1'bX;
end 
// expected leituraRT[ 4 ]
initial
begin
	leituraRT_expected[4] = 1'bX;
end 
// expected leituraRT[ 3 ]
initial
begin
	leituraRT_expected[3] = 1'bX;
end 
// expected leituraRT[ 2 ]
initial
begin
	leituraRT_expected[2] = 1'bX;
end 
// expected leituraRT[ 1 ]
initial
begin
	leituraRT_expected[1] = 1'bX;
end 
// expected leituraRT[ 0 ]
initial
begin
	leituraRT_expected[0] = 1'bX;
end 
// generate trigger
always @(leituraRS_expected or leituraRS or leituraRT_expected or leituraRT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected leituraRS = %b | expected leituraRT = %b | ",leituraRS_expected_prev,leituraRT_expected_prev);
	$display("| real leituraRS = %b | real leituraRT = %b | ",leituraRS_prev,leituraRT_prev);
`endif
	if (
		( leituraRS_expected_prev[0] !== 1'bx ) && ( leituraRS_prev[0] !== leituraRS_expected_prev[0] )
		&& ((leituraRS_expected_prev[0] !== last_leituraRS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[0] = leituraRS_expected_prev[0];
	end
	if (
		( leituraRS_expected_prev[1] !== 1'bx ) && ( leituraRS_prev[1] !== leituraRS_expected_prev[1] )
		&& ((leituraRS_expected_prev[1] !== last_leituraRS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[1] = leituraRS_expected_prev[1];
	end
	if (
		( leituraRS_expected_prev[2] !== 1'bx ) && ( leituraRS_prev[2] !== leituraRS_expected_prev[2] )
		&& ((leituraRS_expected_prev[2] !== last_leituraRS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[2] = leituraRS_expected_prev[2];
	end
	if (
		( leituraRS_expected_prev[3] !== 1'bx ) && ( leituraRS_prev[3] !== leituraRS_expected_prev[3] )
		&& ((leituraRS_expected_prev[3] !== last_leituraRS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[3] = leituraRS_expected_prev[3];
	end
	if (
		( leituraRS_expected_prev[4] !== 1'bx ) && ( leituraRS_prev[4] !== leituraRS_expected_prev[4] )
		&& ((leituraRS_expected_prev[4] !== last_leituraRS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[4] = leituraRS_expected_prev[4];
	end
	if (
		( leituraRS_expected_prev[5] !== 1'bx ) && ( leituraRS_prev[5] !== leituraRS_expected_prev[5] )
		&& ((leituraRS_expected_prev[5] !== last_leituraRS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[5] = leituraRS_expected_prev[5];
	end
	if (
		( leituraRS_expected_prev[6] !== 1'bx ) && ( leituraRS_prev[6] !== leituraRS_expected_prev[6] )
		&& ((leituraRS_expected_prev[6] !== last_leituraRS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[6] = leituraRS_expected_prev[6];
	end
	if (
		( leituraRS_expected_prev[7] !== 1'bx ) && ( leituraRS_prev[7] !== leituraRS_expected_prev[7] )
		&& ((leituraRS_expected_prev[7] !== last_leituraRS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[7] = leituraRS_expected_prev[7];
	end
	if (
		( leituraRS_expected_prev[8] !== 1'bx ) && ( leituraRS_prev[8] !== leituraRS_expected_prev[8] )
		&& ((leituraRS_expected_prev[8] !== last_leituraRS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[8] = leituraRS_expected_prev[8];
	end
	if (
		( leituraRS_expected_prev[9] !== 1'bx ) && ( leituraRS_prev[9] !== leituraRS_expected_prev[9] )
		&& ((leituraRS_expected_prev[9] !== last_leituraRS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[9] = leituraRS_expected_prev[9];
	end
	if (
		( leituraRS_expected_prev[10] !== 1'bx ) && ( leituraRS_prev[10] !== leituraRS_expected_prev[10] )
		&& ((leituraRS_expected_prev[10] !== last_leituraRS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[10] = leituraRS_expected_prev[10];
	end
	if (
		( leituraRS_expected_prev[11] !== 1'bx ) && ( leituraRS_prev[11] !== leituraRS_expected_prev[11] )
		&& ((leituraRS_expected_prev[11] !== last_leituraRS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[11] = leituraRS_expected_prev[11];
	end
	if (
		( leituraRS_expected_prev[12] !== 1'bx ) && ( leituraRS_prev[12] !== leituraRS_expected_prev[12] )
		&& ((leituraRS_expected_prev[12] !== last_leituraRS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[12] = leituraRS_expected_prev[12];
	end
	if (
		( leituraRS_expected_prev[13] !== 1'bx ) && ( leituraRS_prev[13] !== leituraRS_expected_prev[13] )
		&& ((leituraRS_expected_prev[13] !== last_leituraRS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[13] = leituraRS_expected_prev[13];
	end
	if (
		( leituraRS_expected_prev[14] !== 1'bx ) && ( leituraRS_prev[14] !== leituraRS_expected_prev[14] )
		&& ((leituraRS_expected_prev[14] !== last_leituraRS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[14] = leituraRS_expected_prev[14];
	end
	if (
		( leituraRS_expected_prev[15] !== 1'bx ) && ( leituraRS_prev[15] !== leituraRS_expected_prev[15] )
		&& ((leituraRS_expected_prev[15] !== last_leituraRS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[15] = leituraRS_expected_prev[15];
	end
	if (
		( leituraRS_expected_prev[16] !== 1'bx ) && ( leituraRS_prev[16] !== leituraRS_expected_prev[16] )
		&& ((leituraRS_expected_prev[16] !== last_leituraRS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[16] = leituraRS_expected_prev[16];
	end
	if (
		( leituraRS_expected_prev[17] !== 1'bx ) && ( leituraRS_prev[17] !== leituraRS_expected_prev[17] )
		&& ((leituraRS_expected_prev[17] !== last_leituraRS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[17] = leituraRS_expected_prev[17];
	end
	if (
		( leituraRS_expected_prev[18] !== 1'bx ) && ( leituraRS_prev[18] !== leituraRS_expected_prev[18] )
		&& ((leituraRS_expected_prev[18] !== last_leituraRS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[18] = leituraRS_expected_prev[18];
	end
	if (
		( leituraRS_expected_prev[19] !== 1'bx ) && ( leituraRS_prev[19] !== leituraRS_expected_prev[19] )
		&& ((leituraRS_expected_prev[19] !== last_leituraRS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[19] = leituraRS_expected_prev[19];
	end
	if (
		( leituraRS_expected_prev[20] !== 1'bx ) && ( leituraRS_prev[20] !== leituraRS_expected_prev[20] )
		&& ((leituraRS_expected_prev[20] !== last_leituraRS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[20] = leituraRS_expected_prev[20];
	end
	if (
		( leituraRS_expected_prev[21] !== 1'bx ) && ( leituraRS_prev[21] !== leituraRS_expected_prev[21] )
		&& ((leituraRS_expected_prev[21] !== last_leituraRS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[21] = leituraRS_expected_prev[21];
	end
	if (
		( leituraRS_expected_prev[22] !== 1'bx ) && ( leituraRS_prev[22] !== leituraRS_expected_prev[22] )
		&& ((leituraRS_expected_prev[22] !== last_leituraRS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[22] = leituraRS_expected_prev[22];
	end
	if (
		( leituraRS_expected_prev[23] !== 1'bx ) && ( leituraRS_prev[23] !== leituraRS_expected_prev[23] )
		&& ((leituraRS_expected_prev[23] !== last_leituraRS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[23] = leituraRS_expected_prev[23];
	end
	if (
		( leituraRS_expected_prev[24] !== 1'bx ) && ( leituraRS_prev[24] !== leituraRS_expected_prev[24] )
		&& ((leituraRS_expected_prev[24] !== last_leituraRS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[24] = leituraRS_expected_prev[24];
	end
	if (
		( leituraRS_expected_prev[25] !== 1'bx ) && ( leituraRS_prev[25] !== leituraRS_expected_prev[25] )
		&& ((leituraRS_expected_prev[25] !== last_leituraRS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[25] = leituraRS_expected_prev[25];
	end
	if (
		( leituraRS_expected_prev[26] !== 1'bx ) && ( leituraRS_prev[26] !== leituraRS_expected_prev[26] )
		&& ((leituraRS_expected_prev[26] !== last_leituraRS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[26] = leituraRS_expected_prev[26];
	end
	if (
		( leituraRS_expected_prev[27] !== 1'bx ) && ( leituraRS_prev[27] !== leituraRS_expected_prev[27] )
		&& ((leituraRS_expected_prev[27] !== last_leituraRS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[27] = leituraRS_expected_prev[27];
	end
	if (
		( leituraRS_expected_prev[28] !== 1'bx ) && ( leituraRS_prev[28] !== leituraRS_expected_prev[28] )
		&& ((leituraRS_expected_prev[28] !== last_leituraRS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[28] = leituraRS_expected_prev[28];
	end
	if (
		( leituraRS_expected_prev[29] !== 1'bx ) && ( leituraRS_prev[29] !== leituraRS_expected_prev[29] )
		&& ((leituraRS_expected_prev[29] !== last_leituraRS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[29] = leituraRS_expected_prev[29];
	end
	if (
		( leituraRS_expected_prev[30] !== 1'bx ) && ( leituraRS_prev[30] !== leituraRS_expected_prev[30] )
		&& ((leituraRS_expected_prev[30] !== last_leituraRS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[30] = leituraRS_expected_prev[30];
	end
	if (
		( leituraRS_expected_prev[31] !== 1'bx ) && ( leituraRS_prev[31] !== leituraRS_expected_prev[31] )
		&& ((leituraRS_expected_prev[31] !== last_leituraRS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_leituraRS_exp[31] = leituraRS_expected_prev[31];
	end
	if (
		( leituraRT_expected_prev[0] !== 1'bx ) && ( leituraRT_prev[0] !== leituraRT_expected_prev[0] )
		&& ((leituraRT_expected_prev[0] !== last_leituraRT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[0] = leituraRT_expected_prev[0];
	end
	if (
		( leituraRT_expected_prev[1] !== 1'bx ) && ( leituraRT_prev[1] !== leituraRT_expected_prev[1] )
		&& ((leituraRT_expected_prev[1] !== last_leituraRT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[1] = leituraRT_expected_prev[1];
	end
	if (
		( leituraRT_expected_prev[2] !== 1'bx ) && ( leituraRT_prev[2] !== leituraRT_expected_prev[2] )
		&& ((leituraRT_expected_prev[2] !== last_leituraRT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[2] = leituraRT_expected_prev[2];
	end
	if (
		( leituraRT_expected_prev[3] !== 1'bx ) && ( leituraRT_prev[3] !== leituraRT_expected_prev[3] )
		&& ((leituraRT_expected_prev[3] !== last_leituraRT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[3] = leituraRT_expected_prev[3];
	end
	if (
		( leituraRT_expected_prev[4] !== 1'bx ) && ( leituraRT_prev[4] !== leituraRT_expected_prev[4] )
		&& ((leituraRT_expected_prev[4] !== last_leituraRT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[4] = leituraRT_expected_prev[4];
	end
	if (
		( leituraRT_expected_prev[5] !== 1'bx ) && ( leituraRT_prev[5] !== leituraRT_expected_prev[5] )
		&& ((leituraRT_expected_prev[5] !== last_leituraRT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[5] = leituraRT_expected_prev[5];
	end
	if (
		( leituraRT_expected_prev[6] !== 1'bx ) && ( leituraRT_prev[6] !== leituraRT_expected_prev[6] )
		&& ((leituraRT_expected_prev[6] !== last_leituraRT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[6] = leituraRT_expected_prev[6];
	end
	if (
		( leituraRT_expected_prev[7] !== 1'bx ) && ( leituraRT_prev[7] !== leituraRT_expected_prev[7] )
		&& ((leituraRT_expected_prev[7] !== last_leituraRT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[7] = leituraRT_expected_prev[7];
	end
	if (
		( leituraRT_expected_prev[8] !== 1'bx ) && ( leituraRT_prev[8] !== leituraRT_expected_prev[8] )
		&& ((leituraRT_expected_prev[8] !== last_leituraRT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[8] = leituraRT_expected_prev[8];
	end
	if (
		( leituraRT_expected_prev[9] !== 1'bx ) && ( leituraRT_prev[9] !== leituraRT_expected_prev[9] )
		&& ((leituraRT_expected_prev[9] !== last_leituraRT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[9] = leituraRT_expected_prev[9];
	end
	if (
		( leituraRT_expected_prev[10] !== 1'bx ) && ( leituraRT_prev[10] !== leituraRT_expected_prev[10] )
		&& ((leituraRT_expected_prev[10] !== last_leituraRT_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[10] = leituraRT_expected_prev[10];
	end
	if (
		( leituraRT_expected_prev[11] !== 1'bx ) && ( leituraRT_prev[11] !== leituraRT_expected_prev[11] )
		&& ((leituraRT_expected_prev[11] !== last_leituraRT_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[11] = leituraRT_expected_prev[11];
	end
	if (
		( leituraRT_expected_prev[12] !== 1'bx ) && ( leituraRT_prev[12] !== leituraRT_expected_prev[12] )
		&& ((leituraRT_expected_prev[12] !== last_leituraRT_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[12] = leituraRT_expected_prev[12];
	end
	if (
		( leituraRT_expected_prev[13] !== 1'bx ) && ( leituraRT_prev[13] !== leituraRT_expected_prev[13] )
		&& ((leituraRT_expected_prev[13] !== last_leituraRT_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[13] = leituraRT_expected_prev[13];
	end
	if (
		( leituraRT_expected_prev[14] !== 1'bx ) && ( leituraRT_prev[14] !== leituraRT_expected_prev[14] )
		&& ((leituraRT_expected_prev[14] !== last_leituraRT_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[14] = leituraRT_expected_prev[14];
	end
	if (
		( leituraRT_expected_prev[15] !== 1'bx ) && ( leituraRT_prev[15] !== leituraRT_expected_prev[15] )
		&& ((leituraRT_expected_prev[15] !== last_leituraRT_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[15] = leituraRT_expected_prev[15];
	end
	if (
		( leituraRT_expected_prev[16] !== 1'bx ) && ( leituraRT_prev[16] !== leituraRT_expected_prev[16] )
		&& ((leituraRT_expected_prev[16] !== last_leituraRT_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[16] = leituraRT_expected_prev[16];
	end
	if (
		( leituraRT_expected_prev[17] !== 1'bx ) && ( leituraRT_prev[17] !== leituraRT_expected_prev[17] )
		&& ((leituraRT_expected_prev[17] !== last_leituraRT_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[17] = leituraRT_expected_prev[17];
	end
	if (
		( leituraRT_expected_prev[18] !== 1'bx ) && ( leituraRT_prev[18] !== leituraRT_expected_prev[18] )
		&& ((leituraRT_expected_prev[18] !== last_leituraRT_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[18] = leituraRT_expected_prev[18];
	end
	if (
		( leituraRT_expected_prev[19] !== 1'bx ) && ( leituraRT_prev[19] !== leituraRT_expected_prev[19] )
		&& ((leituraRT_expected_prev[19] !== last_leituraRT_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[19] = leituraRT_expected_prev[19];
	end
	if (
		( leituraRT_expected_prev[20] !== 1'bx ) && ( leituraRT_prev[20] !== leituraRT_expected_prev[20] )
		&& ((leituraRT_expected_prev[20] !== last_leituraRT_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[20] = leituraRT_expected_prev[20];
	end
	if (
		( leituraRT_expected_prev[21] !== 1'bx ) && ( leituraRT_prev[21] !== leituraRT_expected_prev[21] )
		&& ((leituraRT_expected_prev[21] !== last_leituraRT_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[21] = leituraRT_expected_prev[21];
	end
	if (
		( leituraRT_expected_prev[22] !== 1'bx ) && ( leituraRT_prev[22] !== leituraRT_expected_prev[22] )
		&& ((leituraRT_expected_prev[22] !== last_leituraRT_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[22] = leituraRT_expected_prev[22];
	end
	if (
		( leituraRT_expected_prev[23] !== 1'bx ) && ( leituraRT_prev[23] !== leituraRT_expected_prev[23] )
		&& ((leituraRT_expected_prev[23] !== last_leituraRT_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[23] = leituraRT_expected_prev[23];
	end
	if (
		( leituraRT_expected_prev[24] !== 1'bx ) && ( leituraRT_prev[24] !== leituraRT_expected_prev[24] )
		&& ((leituraRT_expected_prev[24] !== last_leituraRT_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[24] = leituraRT_expected_prev[24];
	end
	if (
		( leituraRT_expected_prev[25] !== 1'bx ) && ( leituraRT_prev[25] !== leituraRT_expected_prev[25] )
		&& ((leituraRT_expected_prev[25] !== last_leituraRT_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[25] = leituraRT_expected_prev[25];
	end
	if (
		( leituraRT_expected_prev[26] !== 1'bx ) && ( leituraRT_prev[26] !== leituraRT_expected_prev[26] )
		&& ((leituraRT_expected_prev[26] !== last_leituraRT_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[26] = leituraRT_expected_prev[26];
	end
	if (
		( leituraRT_expected_prev[27] !== 1'bx ) && ( leituraRT_prev[27] !== leituraRT_expected_prev[27] )
		&& ((leituraRT_expected_prev[27] !== last_leituraRT_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[27] = leituraRT_expected_prev[27];
	end
	if (
		( leituraRT_expected_prev[28] !== 1'bx ) && ( leituraRT_prev[28] !== leituraRT_expected_prev[28] )
		&& ((leituraRT_expected_prev[28] !== last_leituraRT_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[28] = leituraRT_expected_prev[28];
	end
	if (
		( leituraRT_expected_prev[29] !== 1'bx ) && ( leituraRT_prev[29] !== leituraRT_expected_prev[29] )
		&& ((leituraRT_expected_prev[29] !== last_leituraRT_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[29] = leituraRT_expected_prev[29];
	end
	if (
		( leituraRT_expected_prev[30] !== 1'bx ) && ( leituraRT_prev[30] !== leituraRT_expected_prev[30] )
		&& ((leituraRT_expected_prev[30] !== last_leituraRT_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[30] = leituraRT_expected_prev[30];
	end
	if (
		( leituraRT_expected_prev[31] !== 1'bx ) && ( leituraRT_prev[31] !== leituraRT_expected_prev[31] )
		&& ((leituraRT_expected_prev[31] !== last_leituraRT_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leituraRT_exp[31] = leituraRT_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module banco_de_registradores_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] RD;
reg [4:0] RS;
reg [4:0] RT;
reg clock;
reg [31:0] dadosEscrita;
reg regWrite;
// wires                                               
wire [31:0] leituraRS;
wire [31:0] leituraRT;

wire sampler;                             

// assign statements (if any)                          
banco_de_registradores i1 (
// port map - connection between master ports and signals/registers   
	.RD(RD),
	.RS(RS),
	.RT(RT),
	.clock(clock),
	.dadosEscrita(dadosEscrita),
	.leituraRS(leituraRS),
	.leituraRT(leituraRT),
	.regWrite(regWrite)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// regWrite
initial
begin
	regWrite = 1'b1;
	regWrite = #500000 1'b0;
end 
// RD[ 4 ]
initial
begin
	RD[4] = 1'b0;
end 
// RD[ 3 ]
initial
begin
	RD[3] = 1'b0;
end 
// RD[ 2 ]
initial
begin
	RD[2] = 1'b0;
	RD[2] = #400000 1'b1;
	RD[2] = #100000 1'b0;
end 
// RD[ 1 ]
initial
begin
	RD[1] = 1'b0;
	RD[1] = #200000 1'b1;
	RD[1] = #200000 1'b0;
end 
// RD[ 0 ]
initial
begin
	repeat(2)
	begin
		RD[0] = 1'b0;
		RD[0] = #100000 1'b1;
		# 100000;
	end
	RD[0] = 1'b0;
end 
// dadosEscrita[ 31 ]
initial
begin
	dadosEscrita[31] = 1'b0;
end 
// dadosEscrita[ 30 ]
initial
begin
	dadosEscrita[30] = 1'b0;
end 
// dadosEscrita[ 29 ]
initial
begin
	dadosEscrita[29] = 1'b0;
end 
// dadosEscrita[ 28 ]
initial
begin
	dadosEscrita[28] = 1'b0;
end 
// dadosEscrita[ 27 ]
initial
begin
	dadosEscrita[27] = 1'b0;
end 
// dadosEscrita[ 26 ]
initial
begin
	dadosEscrita[26] = 1'b0;
end 
// dadosEscrita[ 25 ]
initial
begin
	dadosEscrita[25] = 1'b0;
end 
// dadosEscrita[ 24 ]
initial
begin
	dadosEscrita[24] = 1'b0;
end 
// dadosEscrita[ 23 ]
initial
begin
	dadosEscrita[23] = 1'b0;
end 
// dadosEscrita[ 22 ]
initial
begin
	dadosEscrita[22] = 1'b0;
end 
// dadosEscrita[ 21 ]
initial
begin
	dadosEscrita[21] = 1'b0;
end 
// dadosEscrita[ 20 ]
initial
begin
	dadosEscrita[20] = 1'b0;
end 
// dadosEscrita[ 19 ]
initial
begin
	dadosEscrita[19] = 1'b0;
end 
// dadosEscrita[ 18 ]
initial
begin
	dadosEscrita[18] = 1'b0;
end 
// dadosEscrita[ 17 ]
initial
begin
	dadosEscrita[17] = 1'b0;
end 
// dadosEscrita[ 16 ]
initial
begin
	dadosEscrita[16] = 1'b0;
end 
// dadosEscrita[ 15 ]
initial
begin
	dadosEscrita[15] = 1'b0;
end 
// dadosEscrita[ 14 ]
initial
begin
	dadosEscrita[14] = 1'b0;
end 
// dadosEscrita[ 13 ]
initial
begin
	dadosEscrita[13] = 1'b0;
end 
// dadosEscrita[ 12 ]
initial
begin
	dadosEscrita[12] = 1'b0;
end 
// dadosEscrita[ 11 ]
initial
begin
	dadosEscrita[11] = 1'b0;
end 
// dadosEscrita[ 10 ]
initial
begin
	dadosEscrita[10] = 1'b0;
end 
// dadosEscrita[ 9 ]
initial
begin
	dadosEscrita[9] = 1'b0;
end 
// dadosEscrita[ 8 ]
initial
begin
	dadosEscrita[8] = 1'b0;
end 
// dadosEscrita[ 7 ]
initial
begin
	dadosEscrita[7] = 1'b0;
end 
// dadosEscrita[ 6 ]
initial
begin
	dadosEscrita[6] = 1'b0;
	dadosEscrita[6] = #400000 1'b1;
	dadosEscrita[6] = #100000 1'b0;
end 
// dadosEscrita[ 5 ]
initial
begin
	dadosEscrita[5] = 1'b0;
	dadosEscrita[5] = #200000 1'b1;
	dadosEscrita[5] = #200000 1'b0;
end 
// dadosEscrita[ 4 ]
initial
begin
	repeat(2)
	begin
		dadosEscrita[4] = 1'b0;
		dadosEscrita[4] = #100000 1'b1;
		# 100000;
	end
	dadosEscrita[4] = 1'b0;
end 
// dadosEscrita[ 3 ]
initial
begin
	dadosEscrita[3] = 1'b1;
	dadosEscrita[3] = #500000 1'b0;
end 
// dadosEscrita[ 2 ]
initial
begin
	dadosEscrita[2] = 1'b1;
	dadosEscrita[2] = #400000 1'b0;
end 
// dadosEscrita[ 1 ]
initial
begin
	dadosEscrita[1] = 1'b1;
	dadosEscrita[1] = #200000 1'b0;
	dadosEscrita[1] = #200000 1'b1;
	dadosEscrita[1] = #100000 1'b0;
end 
// dadosEscrita[ 0 ]
initial
begin
	repeat(2)
	begin
		dadosEscrita[0] = 1'b1;
		dadosEscrita[0] = #100000 1'b0;
		# 100000;
	end
	dadosEscrita[0] = 1'b1;
	dadosEscrita[0] = #100000 1'b0;
end 
// RS[ 4 ]
initial
begin
	RS[4] = 1'b0;
end 
// RS[ 3 ]
initial
begin
	RS[3] = 1'b1;
	RS[3] = #500000 1'b0;
end 
// RS[ 2 ]
initial
begin
	RS[2] = 1'b0;
	RS[2] = #900000 1'b1;
end 
// RS[ 1 ]
initial
begin
	RS[1] = 1'b1;
	RS[1] = #500000 1'b0;
	RS[1] = #200000 1'b1;
	RS[1] = #200000 1'b0;
end 
// RS[ 0 ]
initial
begin
	RS[0] = 1'b1;
	RS[0] = #500000 1'b0;
	RS[0] = #100000 1'b1;
	RS[0] = #100000 1'b0;
	RS[0] = #100000 1'b1;
	RS[0] = #100000 1'b0;
end 
// RT[ 4 ]
initial
begin
	RT[4] = 1'b0;
end 
// RT[ 3 ]
initial
begin
	RT[3] = 1'b1;
	RT[3] = #500000 1'b0;
end 
// RT[ 2 ]
initial
begin
	RT[2] = 1'b0;
	RT[2] = #500000 1'b1;
	RT[2] = #100000 1'b0;
end 
// RT[ 1 ]
initial
begin
	RT[1] = 1'b1;
	RT[1] = #500000 1'b0;
	RT[1] = #100000 1'b1;
	RT[1] = #100000 1'b0;
	RT[1] = #100000 1'b1;
	RT[1] = #100000 1'b0;
end 
// RT[ 0 ]
initial
begin
	RT[0] = 1'b1;
	RT[0] = #500000 1'b0;
	RT[0] = #100000 1'b1;
	RT[0] = #200000 1'b0;
end 

banco_de_registradores_vlg_sample_tst tb_sample (
	.RD(RD),
	.RS(RS),
	.RT(RT),
	.clock(clock),
	.dadosEscrita(dadosEscrita),
	.regWrite(regWrite),
	.sampler_tx(sampler)
);

banco_de_registradores_vlg_check_tst tb_out(
	.leituraRS(leituraRS),
	.leituraRT(leituraRT),
	.sampler_rx(sampler)
);
endmodule

