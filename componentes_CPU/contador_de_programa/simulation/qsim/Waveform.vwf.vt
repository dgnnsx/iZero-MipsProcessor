// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2016 10:34:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    contador_de_programa
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module contador_de_programa_vlg_sample_tst(
	clock,
	endereco,
	pcWrite,
	reset,
	sampler_tx
);
input  clock;
input [25:0] endereco;
input  pcWrite;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or endereco or pcWrite or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module contador_de_programa_vlg_check_tst (
	pcAtual,
	sampler_rx
);
input [25:0] pcAtual;
input sampler_rx;

reg [25:0] pcAtual_expected;

reg [25:0] pcAtual_prev;

reg [25:0] pcAtual_expected_prev;

reg [25:0] last_pcAtual_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	pcAtual_prev = pcAtual;
end

// update expected /o prevs

always @(trigger)
begin
	pcAtual_expected_prev = pcAtual_expected;
end


// expected pcAtual[ 25 ]
initial
begin
	pcAtual_expected[25] = 1'bX;
end 
// expected pcAtual[ 24 ]
initial
begin
	pcAtual_expected[24] = 1'bX;
end 
// expected pcAtual[ 23 ]
initial
begin
	pcAtual_expected[23] = 1'bX;
end 
// expected pcAtual[ 22 ]
initial
begin
	pcAtual_expected[22] = 1'bX;
end 
// expected pcAtual[ 21 ]
initial
begin
	pcAtual_expected[21] = 1'bX;
end 
// expected pcAtual[ 20 ]
initial
begin
	pcAtual_expected[20] = 1'bX;
end 
// expected pcAtual[ 19 ]
initial
begin
	pcAtual_expected[19] = 1'bX;
end 
// expected pcAtual[ 18 ]
initial
begin
	pcAtual_expected[18] = 1'bX;
end 
// expected pcAtual[ 17 ]
initial
begin
	pcAtual_expected[17] = 1'bX;
end 
// expected pcAtual[ 16 ]
initial
begin
	pcAtual_expected[16] = 1'bX;
end 
// expected pcAtual[ 15 ]
initial
begin
	pcAtual_expected[15] = 1'bX;
end 
// expected pcAtual[ 14 ]
initial
begin
	pcAtual_expected[14] = 1'bX;
end 
// expected pcAtual[ 13 ]
initial
begin
	pcAtual_expected[13] = 1'bX;
end 
// expected pcAtual[ 12 ]
initial
begin
	pcAtual_expected[12] = 1'bX;
end 
// expected pcAtual[ 11 ]
initial
begin
	pcAtual_expected[11] = 1'bX;
end 
// expected pcAtual[ 10 ]
initial
begin
	pcAtual_expected[10] = 1'bX;
end 
// expected pcAtual[ 9 ]
initial
begin
	pcAtual_expected[9] = 1'bX;
end 
// expected pcAtual[ 8 ]
initial
begin
	pcAtual_expected[8] = 1'bX;
end 
// expected pcAtual[ 7 ]
initial
begin
	pcAtual_expected[7] = 1'bX;
end 
// expected pcAtual[ 6 ]
initial
begin
	pcAtual_expected[6] = 1'bX;
end 
// expected pcAtual[ 5 ]
initial
begin
	pcAtual_expected[5] = 1'bX;
end 
// expected pcAtual[ 4 ]
initial
begin
	pcAtual_expected[4] = 1'bX;
end 
// expected pcAtual[ 3 ]
initial
begin
	pcAtual_expected[3] = 1'bX;
end 
// expected pcAtual[ 2 ]
initial
begin
	pcAtual_expected[2] = 1'bX;
end 
// expected pcAtual[ 1 ]
initial
begin
	pcAtual_expected[1] = 1'bX;
end 
// expected pcAtual[ 0 ]
initial
begin
	pcAtual_expected[0] = 1'bX;
end 
// generate trigger
always @(pcAtual_expected or pcAtual)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pcAtual = %b | ",pcAtual_expected_prev);
	$display("| real pcAtual = %b | ",pcAtual_prev);
`endif
	if (
		( pcAtual_expected_prev[0] !== 1'bx ) && ( pcAtual_prev[0] !== pcAtual_expected_prev[0] )
		&& ((pcAtual_expected_prev[0] !== last_pcAtual_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[0] = pcAtual_expected_prev[0];
	end
	if (
		( pcAtual_expected_prev[1] !== 1'bx ) && ( pcAtual_prev[1] !== pcAtual_expected_prev[1] )
		&& ((pcAtual_expected_prev[1] !== last_pcAtual_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[1] = pcAtual_expected_prev[1];
	end
	if (
		( pcAtual_expected_prev[2] !== 1'bx ) && ( pcAtual_prev[2] !== pcAtual_expected_prev[2] )
		&& ((pcAtual_expected_prev[2] !== last_pcAtual_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[2] = pcAtual_expected_prev[2];
	end
	if (
		( pcAtual_expected_prev[3] !== 1'bx ) && ( pcAtual_prev[3] !== pcAtual_expected_prev[3] )
		&& ((pcAtual_expected_prev[3] !== last_pcAtual_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[3] = pcAtual_expected_prev[3];
	end
	if (
		( pcAtual_expected_prev[4] !== 1'bx ) && ( pcAtual_prev[4] !== pcAtual_expected_prev[4] )
		&& ((pcAtual_expected_prev[4] !== last_pcAtual_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[4] = pcAtual_expected_prev[4];
	end
	if (
		( pcAtual_expected_prev[5] !== 1'bx ) && ( pcAtual_prev[5] !== pcAtual_expected_prev[5] )
		&& ((pcAtual_expected_prev[5] !== last_pcAtual_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[5] = pcAtual_expected_prev[5];
	end
	if (
		( pcAtual_expected_prev[6] !== 1'bx ) && ( pcAtual_prev[6] !== pcAtual_expected_prev[6] )
		&& ((pcAtual_expected_prev[6] !== last_pcAtual_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[6] = pcAtual_expected_prev[6];
	end
	if (
		( pcAtual_expected_prev[7] !== 1'bx ) && ( pcAtual_prev[7] !== pcAtual_expected_prev[7] )
		&& ((pcAtual_expected_prev[7] !== last_pcAtual_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[7] = pcAtual_expected_prev[7];
	end
	if (
		( pcAtual_expected_prev[8] !== 1'bx ) && ( pcAtual_prev[8] !== pcAtual_expected_prev[8] )
		&& ((pcAtual_expected_prev[8] !== last_pcAtual_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[8] = pcAtual_expected_prev[8];
	end
	if (
		( pcAtual_expected_prev[9] !== 1'bx ) && ( pcAtual_prev[9] !== pcAtual_expected_prev[9] )
		&& ((pcAtual_expected_prev[9] !== last_pcAtual_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[9] = pcAtual_expected_prev[9];
	end
	if (
		( pcAtual_expected_prev[10] !== 1'bx ) && ( pcAtual_prev[10] !== pcAtual_expected_prev[10] )
		&& ((pcAtual_expected_prev[10] !== last_pcAtual_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[10] = pcAtual_expected_prev[10];
	end
	if (
		( pcAtual_expected_prev[11] !== 1'bx ) && ( pcAtual_prev[11] !== pcAtual_expected_prev[11] )
		&& ((pcAtual_expected_prev[11] !== last_pcAtual_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[11] = pcAtual_expected_prev[11];
	end
	if (
		( pcAtual_expected_prev[12] !== 1'bx ) && ( pcAtual_prev[12] !== pcAtual_expected_prev[12] )
		&& ((pcAtual_expected_prev[12] !== last_pcAtual_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[12] = pcAtual_expected_prev[12];
	end
	if (
		( pcAtual_expected_prev[13] !== 1'bx ) && ( pcAtual_prev[13] !== pcAtual_expected_prev[13] )
		&& ((pcAtual_expected_prev[13] !== last_pcAtual_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[13] = pcAtual_expected_prev[13];
	end
	if (
		( pcAtual_expected_prev[14] !== 1'bx ) && ( pcAtual_prev[14] !== pcAtual_expected_prev[14] )
		&& ((pcAtual_expected_prev[14] !== last_pcAtual_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[14] = pcAtual_expected_prev[14];
	end
	if (
		( pcAtual_expected_prev[15] !== 1'bx ) && ( pcAtual_prev[15] !== pcAtual_expected_prev[15] )
		&& ((pcAtual_expected_prev[15] !== last_pcAtual_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[15] = pcAtual_expected_prev[15];
	end
	if (
		( pcAtual_expected_prev[16] !== 1'bx ) && ( pcAtual_prev[16] !== pcAtual_expected_prev[16] )
		&& ((pcAtual_expected_prev[16] !== last_pcAtual_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[16] = pcAtual_expected_prev[16];
	end
	if (
		( pcAtual_expected_prev[17] !== 1'bx ) && ( pcAtual_prev[17] !== pcAtual_expected_prev[17] )
		&& ((pcAtual_expected_prev[17] !== last_pcAtual_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[17] = pcAtual_expected_prev[17];
	end
	if (
		( pcAtual_expected_prev[18] !== 1'bx ) && ( pcAtual_prev[18] !== pcAtual_expected_prev[18] )
		&& ((pcAtual_expected_prev[18] !== last_pcAtual_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[18] = pcAtual_expected_prev[18];
	end
	if (
		( pcAtual_expected_prev[19] !== 1'bx ) && ( pcAtual_prev[19] !== pcAtual_expected_prev[19] )
		&& ((pcAtual_expected_prev[19] !== last_pcAtual_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[19] = pcAtual_expected_prev[19];
	end
	if (
		( pcAtual_expected_prev[20] !== 1'bx ) && ( pcAtual_prev[20] !== pcAtual_expected_prev[20] )
		&& ((pcAtual_expected_prev[20] !== last_pcAtual_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[20] = pcAtual_expected_prev[20];
	end
	if (
		( pcAtual_expected_prev[21] !== 1'bx ) && ( pcAtual_prev[21] !== pcAtual_expected_prev[21] )
		&& ((pcAtual_expected_prev[21] !== last_pcAtual_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[21] = pcAtual_expected_prev[21];
	end
	if (
		( pcAtual_expected_prev[22] !== 1'bx ) && ( pcAtual_prev[22] !== pcAtual_expected_prev[22] )
		&& ((pcAtual_expected_prev[22] !== last_pcAtual_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[22] = pcAtual_expected_prev[22];
	end
	if (
		( pcAtual_expected_prev[23] !== 1'bx ) && ( pcAtual_prev[23] !== pcAtual_expected_prev[23] )
		&& ((pcAtual_expected_prev[23] !== last_pcAtual_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[23] = pcAtual_expected_prev[23];
	end
	if (
		( pcAtual_expected_prev[24] !== 1'bx ) && ( pcAtual_prev[24] !== pcAtual_expected_prev[24] )
		&& ((pcAtual_expected_prev[24] !== last_pcAtual_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[24] = pcAtual_expected_prev[24];
	end
	if (
		( pcAtual_expected_prev[25] !== 1'bx ) && ( pcAtual_prev[25] !== pcAtual_expected_prev[25] )
		&& ((pcAtual_expected_prev[25] !== last_pcAtual_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcAtual[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcAtual_expected_prev);
		$display ("     Real value = %b", pcAtual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pcAtual_exp[25] = pcAtual_expected_prev[25];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module contador_de_programa_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [25:0] endereco;
reg pcWrite;
reg reset;
// wires                                               
wire [25:0] pcAtual;

wire sampler;                             

// assign statements (if any)                          
contador_de_programa i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.endereco(endereco),
	.pcAtual(pcAtual),
	.pcWrite(pcWrite),
	.reset(reset)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// pcWrite
initial
begin
	repeat(3)
	begin
		pcWrite = 1'b0;
		pcWrite = #100000 1'b1;
		# 100000;
	end
	pcWrite = 1'b0;
end 

// reset
always
begin
	reset = 1'b0;
	reset = #500000 1'b1;
	#500000;
end 
// endereco[ 25 ]
initial
begin
	endereco[25] = 1'b0;
end 
// endereco[ 24 ]
initial
begin
	endereco[24] = 1'b0;
end 
// endereco[ 23 ]
initial
begin
	endereco[23] = 1'b0;
end 
// endereco[ 22 ]
initial
begin
	endereco[22] = 1'b0;
end 
// endereco[ 21 ]
initial
begin
	endereco[21] = 1'b0;
end 
// endereco[ 20 ]
initial
begin
	endereco[20] = 1'b0;
end 
// endereco[ 19 ]
initial
begin
	endereco[19] = 1'b0;
end 
// endereco[ 18 ]
initial
begin
	endereco[18] = 1'b0;
end 
// endereco[ 17 ]
initial
begin
	endereco[17] = 1'b0;
end 
// endereco[ 16 ]
initial
begin
	endereco[16] = 1'b0;
end 
// endereco[ 15 ]
initial
begin
	endereco[15] = 1'b0;
end 
// endereco[ 14 ]
initial
begin
	endereco[14] = 1'b0;
end 
// endereco[ 13 ]
initial
begin
	endereco[13] = 1'b0;
end 
// endereco[ 12 ]
initial
begin
	endereco[12] = 1'b0;
end 
// endereco[ 11 ]
initial
begin
	endereco[11] = 1'b0;
end 
// endereco[ 10 ]
initial
begin
	endereco[10] = 1'b0;
end 
// endereco[ 9 ]
initial
begin
	endereco[9] = 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
	endereco[4] = #800000 1'b1;
end 
// endereco[ 3 ]
initial
begin
	endereco[3] = 1'b0;
	endereco[3] = #400000 1'b1;
	endereco[3] = #400000 1'b0;
end 
// endereco[ 2 ]
initial
begin
	repeat(2)
	begin
		endereco[2] = 1'b0;
		endereco[2] = #200000 1'b1;
		# 200000;
	end
	endereco[2] = 1'b0;
end 
// endereco[ 1 ]
always
begin
	endereco[1] = 1'b0;
	endereco[1] = #100000 1'b1;
	#100000;
end 
// endereco[ 0 ]
always
begin
	endereco[0] = 1'b0;
	endereco[0] = #50000 1'b1;
	#50000;
end 

contador_de_programa_vlg_sample_tst tb_sample (
	.clock(clock),
	.endereco(endereco),
	.pcWrite(pcWrite),
	.reset(reset),
	.sampler_tx(sampler)
);

contador_de_programa_vlg_check_tst tb_out(
	.pcAtual(pcAtual),
	.sampler_rx(sampler)
);
endmodule

