// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2016 10:19:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memoria_de_instrucoes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memoria_de_instrucoes_vlg_sample_tst(
	clock,
	pc,
	sampler_tx
);
input  clock;
input [25:0] pc;
output sampler_tx;

reg sample;
time current_time;
always @(clock or pc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memoria_de_instrucoes_vlg_check_tst (
	instrucao,
	sampler_rx
);
input [31:0] instrucao;
input sampler_rx;

reg [31:0] instrucao_expected;

reg [31:0] instrucao_prev;

reg [31:0] instrucao_expected_prev;

reg [31:0] last_instrucao_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	instrucao_prev = instrucao;
end

// update expected /o prevs

always @(trigger)
begin
	instrucao_expected_prev = instrucao_expected;
end


// expected instrucao[ 31 ]
initial
begin
	instrucao_expected[31] = 1'bX;
end 
// expected instrucao[ 30 ]
initial
begin
	instrucao_expected[30] = 1'bX;
end 
// expected instrucao[ 29 ]
initial
begin
	instrucao_expected[29] = 1'bX;
end 
// expected instrucao[ 28 ]
initial
begin
	instrucao_expected[28] = 1'bX;
end 
// expected instrucao[ 27 ]
initial
begin
	instrucao_expected[27] = 1'bX;
end 
// expected instrucao[ 26 ]
initial
begin
	instrucao_expected[26] = 1'bX;
end 
// expected instrucao[ 25 ]
initial
begin
	instrucao_expected[25] = 1'bX;
end 
// expected instrucao[ 24 ]
initial
begin
	instrucao_expected[24] = 1'bX;
end 
// expected instrucao[ 23 ]
initial
begin
	instrucao_expected[23] = 1'bX;
end 
// expected instrucao[ 22 ]
initial
begin
	instrucao_expected[22] = 1'bX;
end 
// expected instrucao[ 21 ]
initial
begin
	instrucao_expected[21] = 1'bX;
end 
// expected instrucao[ 20 ]
initial
begin
	instrucao_expected[20] = 1'bX;
end 
// expected instrucao[ 19 ]
initial
begin
	instrucao_expected[19] = 1'bX;
end 
// expected instrucao[ 18 ]
initial
begin
	instrucao_expected[18] = 1'bX;
end 
// expected instrucao[ 17 ]
initial
begin
	instrucao_expected[17] = 1'bX;
end 
// expected instrucao[ 16 ]
initial
begin
	instrucao_expected[16] = 1'bX;
end 
// expected instrucao[ 15 ]
initial
begin
	instrucao_expected[15] = 1'bX;
end 
// expected instrucao[ 14 ]
initial
begin
	instrucao_expected[14] = 1'bX;
end 
// expected instrucao[ 13 ]
initial
begin
	instrucao_expected[13] = 1'bX;
end 
// expected instrucao[ 12 ]
initial
begin
	instrucao_expected[12] = 1'bX;
end 
// expected instrucao[ 11 ]
initial
begin
	instrucao_expected[11] = 1'bX;
end 
// expected instrucao[ 10 ]
initial
begin
	instrucao_expected[10] = 1'bX;
end 
// expected instrucao[ 9 ]
initial
begin
	instrucao_expected[9] = 1'bX;
end 
// expected instrucao[ 8 ]
initial
begin
	instrucao_expected[8] = 1'bX;
end 
// expected instrucao[ 7 ]
initial
begin
	instrucao_expected[7] = 1'bX;
end 
// expected instrucao[ 6 ]
initial
begin
	instrucao_expected[6] = 1'bX;
end 
// expected instrucao[ 5 ]
initial
begin
	instrucao_expected[5] = 1'bX;
end 
// expected instrucao[ 4 ]
initial
begin
	instrucao_expected[4] = 1'bX;
end 
// expected instrucao[ 3 ]
initial
begin
	instrucao_expected[3] = 1'bX;
end 
// expected instrucao[ 2 ]
initial
begin
	instrucao_expected[2] = 1'bX;
end 
// expected instrucao[ 1 ]
initial
begin
	instrucao_expected[1] = 1'bX;
end 
// expected instrucao[ 0 ]
initial
begin
	instrucao_expected[0] = 1'bX;
end 
// generate trigger
always @(instrucao_expected or instrucao)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected instrucao = %b | ",instrucao_expected_prev);
	$display("| real instrucao = %b | ",instrucao_prev);
`endif
	if (
		( instrucao_expected_prev[0] !== 1'bx ) && ( instrucao_prev[0] !== instrucao_expected_prev[0] )
		&& ((instrucao_expected_prev[0] !== last_instrucao_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[0] = instrucao_expected_prev[0];
	end
	if (
		( instrucao_expected_prev[1] !== 1'bx ) && ( instrucao_prev[1] !== instrucao_expected_prev[1] )
		&& ((instrucao_expected_prev[1] !== last_instrucao_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[1] = instrucao_expected_prev[1];
	end
	if (
		( instrucao_expected_prev[2] !== 1'bx ) && ( instrucao_prev[2] !== instrucao_expected_prev[2] )
		&& ((instrucao_expected_prev[2] !== last_instrucao_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[2] = instrucao_expected_prev[2];
	end
	if (
		( instrucao_expected_prev[3] !== 1'bx ) && ( instrucao_prev[3] !== instrucao_expected_prev[3] )
		&& ((instrucao_expected_prev[3] !== last_instrucao_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[3] = instrucao_expected_prev[3];
	end
	if (
		( instrucao_expected_prev[4] !== 1'bx ) && ( instrucao_prev[4] !== instrucao_expected_prev[4] )
		&& ((instrucao_expected_prev[4] !== last_instrucao_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[4] = instrucao_expected_prev[4];
	end
	if (
		( instrucao_expected_prev[5] !== 1'bx ) && ( instrucao_prev[5] !== instrucao_expected_prev[5] )
		&& ((instrucao_expected_prev[5] !== last_instrucao_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[5] = instrucao_expected_prev[5];
	end
	if (
		( instrucao_expected_prev[6] !== 1'bx ) && ( instrucao_prev[6] !== instrucao_expected_prev[6] )
		&& ((instrucao_expected_prev[6] !== last_instrucao_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[6] = instrucao_expected_prev[6];
	end
	if (
		( instrucao_expected_prev[7] !== 1'bx ) && ( instrucao_prev[7] !== instrucao_expected_prev[7] )
		&& ((instrucao_expected_prev[7] !== last_instrucao_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[7] = instrucao_expected_prev[7];
	end
	if (
		( instrucao_expected_prev[8] !== 1'bx ) && ( instrucao_prev[8] !== instrucao_expected_prev[8] )
		&& ((instrucao_expected_prev[8] !== last_instrucao_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[8] = instrucao_expected_prev[8];
	end
	if (
		( instrucao_expected_prev[9] !== 1'bx ) && ( instrucao_prev[9] !== instrucao_expected_prev[9] )
		&& ((instrucao_expected_prev[9] !== last_instrucao_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[9] = instrucao_expected_prev[9];
	end
	if (
		( instrucao_expected_prev[10] !== 1'bx ) && ( instrucao_prev[10] !== instrucao_expected_prev[10] )
		&& ((instrucao_expected_prev[10] !== last_instrucao_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[10] = instrucao_expected_prev[10];
	end
	if (
		( instrucao_expected_prev[11] !== 1'bx ) && ( instrucao_prev[11] !== instrucao_expected_prev[11] )
		&& ((instrucao_expected_prev[11] !== last_instrucao_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[11] = instrucao_expected_prev[11];
	end
	if (
		( instrucao_expected_prev[12] !== 1'bx ) && ( instrucao_prev[12] !== instrucao_expected_prev[12] )
		&& ((instrucao_expected_prev[12] !== last_instrucao_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[12] = instrucao_expected_prev[12];
	end
	if (
		( instrucao_expected_prev[13] !== 1'bx ) && ( instrucao_prev[13] !== instrucao_expected_prev[13] )
		&& ((instrucao_expected_prev[13] !== last_instrucao_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[13] = instrucao_expected_prev[13];
	end
	if (
		( instrucao_expected_prev[14] !== 1'bx ) && ( instrucao_prev[14] !== instrucao_expected_prev[14] )
		&& ((instrucao_expected_prev[14] !== last_instrucao_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[14] = instrucao_expected_prev[14];
	end
	if (
		( instrucao_expected_prev[15] !== 1'bx ) && ( instrucao_prev[15] !== instrucao_expected_prev[15] )
		&& ((instrucao_expected_prev[15] !== last_instrucao_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[15] = instrucao_expected_prev[15];
	end
	if (
		( instrucao_expected_prev[16] !== 1'bx ) && ( instrucao_prev[16] !== instrucao_expected_prev[16] )
		&& ((instrucao_expected_prev[16] !== last_instrucao_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[16] = instrucao_expected_prev[16];
	end
	if (
		( instrucao_expected_prev[17] !== 1'bx ) && ( instrucao_prev[17] !== instrucao_expected_prev[17] )
		&& ((instrucao_expected_prev[17] !== last_instrucao_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[17] = instrucao_expected_prev[17];
	end
	if (
		( instrucao_expected_prev[18] !== 1'bx ) && ( instrucao_prev[18] !== instrucao_expected_prev[18] )
		&& ((instrucao_expected_prev[18] !== last_instrucao_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[18] = instrucao_expected_prev[18];
	end
	if (
		( instrucao_expected_prev[19] !== 1'bx ) && ( instrucao_prev[19] !== instrucao_expected_prev[19] )
		&& ((instrucao_expected_prev[19] !== last_instrucao_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[19] = instrucao_expected_prev[19];
	end
	if (
		( instrucao_expected_prev[20] !== 1'bx ) && ( instrucao_prev[20] !== instrucao_expected_prev[20] )
		&& ((instrucao_expected_prev[20] !== last_instrucao_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[20] = instrucao_expected_prev[20];
	end
	if (
		( instrucao_expected_prev[21] !== 1'bx ) && ( instrucao_prev[21] !== instrucao_expected_prev[21] )
		&& ((instrucao_expected_prev[21] !== last_instrucao_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[21] = instrucao_expected_prev[21];
	end
	if (
		( instrucao_expected_prev[22] !== 1'bx ) && ( instrucao_prev[22] !== instrucao_expected_prev[22] )
		&& ((instrucao_expected_prev[22] !== last_instrucao_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[22] = instrucao_expected_prev[22];
	end
	if (
		( instrucao_expected_prev[23] !== 1'bx ) && ( instrucao_prev[23] !== instrucao_expected_prev[23] )
		&& ((instrucao_expected_prev[23] !== last_instrucao_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[23] = instrucao_expected_prev[23];
	end
	if (
		( instrucao_expected_prev[24] !== 1'bx ) && ( instrucao_prev[24] !== instrucao_expected_prev[24] )
		&& ((instrucao_expected_prev[24] !== last_instrucao_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[24] = instrucao_expected_prev[24];
	end
	if (
		( instrucao_expected_prev[25] !== 1'bx ) && ( instrucao_prev[25] !== instrucao_expected_prev[25] )
		&& ((instrucao_expected_prev[25] !== last_instrucao_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[25] = instrucao_expected_prev[25];
	end
	if (
		( instrucao_expected_prev[26] !== 1'bx ) && ( instrucao_prev[26] !== instrucao_expected_prev[26] )
		&& ((instrucao_expected_prev[26] !== last_instrucao_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[26] = instrucao_expected_prev[26];
	end
	if (
		( instrucao_expected_prev[27] !== 1'bx ) && ( instrucao_prev[27] !== instrucao_expected_prev[27] )
		&& ((instrucao_expected_prev[27] !== last_instrucao_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[27] = instrucao_expected_prev[27];
	end
	if (
		( instrucao_expected_prev[28] !== 1'bx ) && ( instrucao_prev[28] !== instrucao_expected_prev[28] )
		&& ((instrucao_expected_prev[28] !== last_instrucao_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[28] = instrucao_expected_prev[28];
	end
	if (
		( instrucao_expected_prev[29] !== 1'bx ) && ( instrucao_prev[29] !== instrucao_expected_prev[29] )
		&& ((instrucao_expected_prev[29] !== last_instrucao_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[29] = instrucao_expected_prev[29];
	end
	if (
		( instrucao_expected_prev[30] !== 1'bx ) && ( instrucao_prev[30] !== instrucao_expected_prev[30] )
		&& ((instrucao_expected_prev[30] !== last_instrucao_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[30] = instrucao_expected_prev[30];
	end
	if (
		( instrucao_expected_prev[31] !== 1'bx ) && ( instrucao_prev[31] !== instrucao_expected_prev[31] )
		&& ((instrucao_expected_prev[31] !== last_instrucao_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instrucao_exp[31] = instrucao_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memoria_de_instrucoes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [25:0] pc;
// wires                                               
wire [31:0] instrucao;

wire sampler;                             

// assign statements (if any)                          
memoria_de_instrucoes i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.instrucao(instrucao),
	.pc(pc)
);

// clock
initial
begin
	clock = 1'b1;
	# 100000;
	repeat(4)
	begin
		clock = 1'b0;
		clock = #100000 1'b1;
		# 100000;
	end
	clock = 1'b0;
end 
// pc[ 25 ]
initial
begin
	pc[25] = 1'b0;
end 
// pc[ 24 ]
initial
begin
	pc[24] = 1'b0;
end 
// pc[ 23 ]
initial
begin
	pc[23] = 1'b0;
end 
// pc[ 22 ]
initial
begin
	pc[22] = 1'b0;
end 
// pc[ 21 ]
initial
begin
	pc[21] = 1'b0;
end 
// pc[ 20 ]
initial
begin
	pc[20] = 1'b0;
end 
// pc[ 19 ]
initial
begin
	pc[19] = 1'b0;
end 
// pc[ 18 ]
initial
begin
	pc[18] = 1'b0;
end 
// pc[ 17 ]
initial
begin
	pc[17] = 1'b0;
end 
// pc[ 16 ]
initial
begin
	pc[16] = 1'b0;
end 
// pc[ 15 ]
initial
begin
	pc[15] = 1'b0;
end 
// pc[ 14 ]
initial
begin
	pc[14] = 1'b0;
end 
// pc[ 13 ]
initial
begin
	pc[13] = 1'b0;
end 
// pc[ 12 ]
initial
begin
	pc[12] = 1'b0;
end 
// pc[ 11 ]
initial
begin
	pc[11] = 1'b0;
end 
// pc[ 10 ]
initial
begin
	pc[10] = 1'b0;
end 
// pc[ 9 ]
initial
begin
	pc[9] = 1'b0;
end 
// pc[ 8 ]
initial
begin
	pc[8] = 1'b0;
end 
// pc[ 7 ]
initial
begin
	pc[7] = 1'b0;
end 
// pc[ 6 ]
initial
begin
	pc[6] = 1'b0;
	pc[6] = #600000 1'b1;
	pc[6] = #200000 1'b0;
end 
// pc[ 5 ]
initial
begin
	pc[5] = 1'b0;
	pc[5] = #400000 1'b1;
	pc[5] = #400000 1'b0;
end 
// pc[ 4 ]
initial
begin
	pc[4] = 1'b0;
	pc[4] = #200000 1'b1;
	pc[4] = #200000 1'b0;
end 
// pc[ 3 ]
initial
begin
	pc[3] = 1'b0;
end 
// pc[ 2 ]
initial
begin
	pc[2] = 1'b0;
	pc[2] = #200000 1'b1;
end 
// pc[ 1 ]
initial
begin
	pc[1] = 1'b0;
	pc[1] = #200000 1'b1;
	pc[1] = #200000 1'b0;
end 
// pc[ 0 ]
initial
begin
	pc[0] = 1'b0;
	pc[0] = #400000 1'b1;
	pc[0] = #200000 1'b0;
end 

memoria_de_instrucoes_vlg_sample_tst tb_sample (
	.clock(clock),
	.pc(pc),
	.sampler_tx(sampler)
);

memoria_de_instrucoes_vlg_check_tst tb_out(
	.instrucao(instrucao),
	.sampler_rx(sampler)
);
endmodule

