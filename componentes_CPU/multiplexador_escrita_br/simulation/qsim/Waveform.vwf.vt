// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2016 10:39:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplexador_escrita_br
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplexador_escrita_br_vlg_sample_tst(
	ULA,
	ctrl_mux_escrita_br,
	entrada_dados,
	instrucao,
	memoria_dados,
	sampler_tx
);
input [31:0] ULA;
input [1:0] ctrl_mux_escrita_br;
input [31:0] entrada_dados;
input [31:0] instrucao;
input [31:0] memoria_dados;
output sampler_tx;

reg sample;
time current_time;
always @(ULA or ctrl_mux_escrita_br or entrada_dados or instrucao or memoria_dados)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplexador_escrita_br_vlg_check_tst (
	dadoEscrito,
	sampler_rx
);
input [31:0] dadoEscrito;
input sampler_rx;

reg [31:0] dadoEscrito_expected;

reg [31:0] dadoEscrito_prev;

reg [31:0] dadoEscrito_expected_prev;

reg [31:0] last_dadoEscrito_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	dadoEscrito_prev = dadoEscrito;
end

// update expected /o prevs

always @(trigger)
begin
	dadoEscrito_expected_prev = dadoEscrito_expected;
end


// expected dadoEscrito[ 31 ]
initial
begin
	dadoEscrito_expected[31] = 1'bX;
end 
// expected dadoEscrito[ 30 ]
initial
begin
	dadoEscrito_expected[30] = 1'bX;
end 
// expected dadoEscrito[ 29 ]
initial
begin
	dadoEscrito_expected[29] = 1'bX;
end 
// expected dadoEscrito[ 28 ]
initial
begin
	dadoEscrito_expected[28] = 1'bX;
end 
// expected dadoEscrito[ 27 ]
initial
begin
	dadoEscrito_expected[27] = 1'bX;
end 
// expected dadoEscrito[ 26 ]
initial
begin
	dadoEscrito_expected[26] = 1'bX;
end 
// expected dadoEscrito[ 25 ]
initial
begin
	dadoEscrito_expected[25] = 1'bX;
end 
// expected dadoEscrito[ 24 ]
initial
begin
	dadoEscrito_expected[24] = 1'bX;
end 
// expected dadoEscrito[ 23 ]
initial
begin
	dadoEscrito_expected[23] = 1'bX;
end 
// expected dadoEscrito[ 22 ]
initial
begin
	dadoEscrito_expected[22] = 1'bX;
end 
// expected dadoEscrito[ 21 ]
initial
begin
	dadoEscrito_expected[21] = 1'bX;
end 
// expected dadoEscrito[ 20 ]
initial
begin
	dadoEscrito_expected[20] = 1'bX;
end 
// expected dadoEscrito[ 19 ]
initial
begin
	dadoEscrito_expected[19] = 1'bX;
end 
// expected dadoEscrito[ 18 ]
initial
begin
	dadoEscrito_expected[18] = 1'bX;
end 
// expected dadoEscrito[ 17 ]
initial
begin
	dadoEscrito_expected[17] = 1'bX;
end 
// expected dadoEscrito[ 16 ]
initial
begin
	dadoEscrito_expected[16] = 1'bX;
end 
// expected dadoEscrito[ 15 ]
initial
begin
	dadoEscrito_expected[15] = 1'bX;
end 
// expected dadoEscrito[ 14 ]
initial
begin
	dadoEscrito_expected[14] = 1'bX;
end 
// expected dadoEscrito[ 13 ]
initial
begin
	dadoEscrito_expected[13] = 1'bX;
end 
// expected dadoEscrito[ 12 ]
initial
begin
	dadoEscrito_expected[12] = 1'bX;
end 
// expected dadoEscrito[ 11 ]
initial
begin
	dadoEscrito_expected[11] = 1'bX;
end 
// expected dadoEscrito[ 10 ]
initial
begin
	dadoEscrito_expected[10] = 1'bX;
end 
// expected dadoEscrito[ 9 ]
initial
begin
	dadoEscrito_expected[9] = 1'bX;
end 
// expected dadoEscrito[ 8 ]
initial
begin
	dadoEscrito_expected[8] = 1'bX;
end 
// expected dadoEscrito[ 7 ]
initial
begin
	dadoEscrito_expected[7] = 1'bX;
end 
// expected dadoEscrito[ 6 ]
initial
begin
	dadoEscrito_expected[6] = 1'bX;
end 
// expected dadoEscrito[ 5 ]
initial
begin
	dadoEscrito_expected[5] = 1'bX;
end 
// expected dadoEscrito[ 4 ]
initial
begin
	dadoEscrito_expected[4] = 1'bX;
end 
// expected dadoEscrito[ 3 ]
initial
begin
	dadoEscrito_expected[3] = 1'bX;
end 
// expected dadoEscrito[ 2 ]
initial
begin
	dadoEscrito_expected[2] = 1'bX;
end 
// expected dadoEscrito[ 1 ]
initial
begin
	dadoEscrito_expected[1] = 1'bX;
end 
// expected dadoEscrito[ 0 ]
initial
begin
	dadoEscrito_expected[0] = 1'bX;
end 
// generate trigger
always @(dadoEscrito_expected or dadoEscrito)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dadoEscrito = %b | ",dadoEscrito_expected_prev);
	$display("| real dadoEscrito = %b | ",dadoEscrito_prev);
`endif
	if (
		( dadoEscrito_expected_prev[0] !== 1'bx ) && ( dadoEscrito_prev[0] !== dadoEscrito_expected_prev[0] )
		&& ((dadoEscrito_expected_prev[0] !== last_dadoEscrito_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[0] = dadoEscrito_expected_prev[0];
	end
	if (
		( dadoEscrito_expected_prev[1] !== 1'bx ) && ( dadoEscrito_prev[1] !== dadoEscrito_expected_prev[1] )
		&& ((dadoEscrito_expected_prev[1] !== last_dadoEscrito_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[1] = dadoEscrito_expected_prev[1];
	end
	if (
		( dadoEscrito_expected_prev[2] !== 1'bx ) && ( dadoEscrito_prev[2] !== dadoEscrito_expected_prev[2] )
		&& ((dadoEscrito_expected_prev[2] !== last_dadoEscrito_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[2] = dadoEscrito_expected_prev[2];
	end
	if (
		( dadoEscrito_expected_prev[3] !== 1'bx ) && ( dadoEscrito_prev[3] !== dadoEscrito_expected_prev[3] )
		&& ((dadoEscrito_expected_prev[3] !== last_dadoEscrito_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[3] = dadoEscrito_expected_prev[3];
	end
	if (
		( dadoEscrito_expected_prev[4] !== 1'bx ) && ( dadoEscrito_prev[4] !== dadoEscrito_expected_prev[4] )
		&& ((dadoEscrito_expected_prev[4] !== last_dadoEscrito_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[4] = dadoEscrito_expected_prev[4];
	end
	if (
		( dadoEscrito_expected_prev[5] !== 1'bx ) && ( dadoEscrito_prev[5] !== dadoEscrito_expected_prev[5] )
		&& ((dadoEscrito_expected_prev[5] !== last_dadoEscrito_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[5] = dadoEscrito_expected_prev[5];
	end
	if (
		( dadoEscrito_expected_prev[6] !== 1'bx ) && ( dadoEscrito_prev[6] !== dadoEscrito_expected_prev[6] )
		&& ((dadoEscrito_expected_prev[6] !== last_dadoEscrito_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[6] = dadoEscrito_expected_prev[6];
	end
	if (
		( dadoEscrito_expected_prev[7] !== 1'bx ) && ( dadoEscrito_prev[7] !== dadoEscrito_expected_prev[7] )
		&& ((dadoEscrito_expected_prev[7] !== last_dadoEscrito_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[7] = dadoEscrito_expected_prev[7];
	end
	if (
		( dadoEscrito_expected_prev[8] !== 1'bx ) && ( dadoEscrito_prev[8] !== dadoEscrito_expected_prev[8] )
		&& ((dadoEscrito_expected_prev[8] !== last_dadoEscrito_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[8] = dadoEscrito_expected_prev[8];
	end
	if (
		( dadoEscrito_expected_prev[9] !== 1'bx ) && ( dadoEscrito_prev[9] !== dadoEscrito_expected_prev[9] )
		&& ((dadoEscrito_expected_prev[9] !== last_dadoEscrito_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[9] = dadoEscrito_expected_prev[9];
	end
	if (
		( dadoEscrito_expected_prev[10] !== 1'bx ) && ( dadoEscrito_prev[10] !== dadoEscrito_expected_prev[10] )
		&& ((dadoEscrito_expected_prev[10] !== last_dadoEscrito_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[10] = dadoEscrito_expected_prev[10];
	end
	if (
		( dadoEscrito_expected_prev[11] !== 1'bx ) && ( dadoEscrito_prev[11] !== dadoEscrito_expected_prev[11] )
		&& ((dadoEscrito_expected_prev[11] !== last_dadoEscrito_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[11] = dadoEscrito_expected_prev[11];
	end
	if (
		( dadoEscrito_expected_prev[12] !== 1'bx ) && ( dadoEscrito_prev[12] !== dadoEscrito_expected_prev[12] )
		&& ((dadoEscrito_expected_prev[12] !== last_dadoEscrito_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[12] = dadoEscrito_expected_prev[12];
	end
	if (
		( dadoEscrito_expected_prev[13] !== 1'bx ) && ( dadoEscrito_prev[13] !== dadoEscrito_expected_prev[13] )
		&& ((dadoEscrito_expected_prev[13] !== last_dadoEscrito_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[13] = dadoEscrito_expected_prev[13];
	end
	if (
		( dadoEscrito_expected_prev[14] !== 1'bx ) && ( dadoEscrito_prev[14] !== dadoEscrito_expected_prev[14] )
		&& ((dadoEscrito_expected_prev[14] !== last_dadoEscrito_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[14] = dadoEscrito_expected_prev[14];
	end
	if (
		( dadoEscrito_expected_prev[15] !== 1'bx ) && ( dadoEscrito_prev[15] !== dadoEscrito_expected_prev[15] )
		&& ((dadoEscrito_expected_prev[15] !== last_dadoEscrito_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[15] = dadoEscrito_expected_prev[15];
	end
	if (
		( dadoEscrito_expected_prev[16] !== 1'bx ) && ( dadoEscrito_prev[16] !== dadoEscrito_expected_prev[16] )
		&& ((dadoEscrito_expected_prev[16] !== last_dadoEscrito_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[16] = dadoEscrito_expected_prev[16];
	end
	if (
		( dadoEscrito_expected_prev[17] !== 1'bx ) && ( dadoEscrito_prev[17] !== dadoEscrito_expected_prev[17] )
		&& ((dadoEscrito_expected_prev[17] !== last_dadoEscrito_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[17] = dadoEscrito_expected_prev[17];
	end
	if (
		( dadoEscrito_expected_prev[18] !== 1'bx ) && ( dadoEscrito_prev[18] !== dadoEscrito_expected_prev[18] )
		&& ((dadoEscrito_expected_prev[18] !== last_dadoEscrito_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[18] = dadoEscrito_expected_prev[18];
	end
	if (
		( dadoEscrito_expected_prev[19] !== 1'bx ) && ( dadoEscrito_prev[19] !== dadoEscrito_expected_prev[19] )
		&& ((dadoEscrito_expected_prev[19] !== last_dadoEscrito_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[19] = dadoEscrito_expected_prev[19];
	end
	if (
		( dadoEscrito_expected_prev[20] !== 1'bx ) && ( dadoEscrito_prev[20] !== dadoEscrito_expected_prev[20] )
		&& ((dadoEscrito_expected_prev[20] !== last_dadoEscrito_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[20] = dadoEscrito_expected_prev[20];
	end
	if (
		( dadoEscrito_expected_prev[21] !== 1'bx ) && ( dadoEscrito_prev[21] !== dadoEscrito_expected_prev[21] )
		&& ((dadoEscrito_expected_prev[21] !== last_dadoEscrito_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[21] = dadoEscrito_expected_prev[21];
	end
	if (
		( dadoEscrito_expected_prev[22] !== 1'bx ) && ( dadoEscrito_prev[22] !== dadoEscrito_expected_prev[22] )
		&& ((dadoEscrito_expected_prev[22] !== last_dadoEscrito_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[22] = dadoEscrito_expected_prev[22];
	end
	if (
		( dadoEscrito_expected_prev[23] !== 1'bx ) && ( dadoEscrito_prev[23] !== dadoEscrito_expected_prev[23] )
		&& ((dadoEscrito_expected_prev[23] !== last_dadoEscrito_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[23] = dadoEscrito_expected_prev[23];
	end
	if (
		( dadoEscrito_expected_prev[24] !== 1'bx ) && ( dadoEscrito_prev[24] !== dadoEscrito_expected_prev[24] )
		&& ((dadoEscrito_expected_prev[24] !== last_dadoEscrito_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[24] = dadoEscrito_expected_prev[24];
	end
	if (
		( dadoEscrito_expected_prev[25] !== 1'bx ) && ( dadoEscrito_prev[25] !== dadoEscrito_expected_prev[25] )
		&& ((dadoEscrito_expected_prev[25] !== last_dadoEscrito_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[25] = dadoEscrito_expected_prev[25];
	end
	if (
		( dadoEscrito_expected_prev[26] !== 1'bx ) && ( dadoEscrito_prev[26] !== dadoEscrito_expected_prev[26] )
		&& ((dadoEscrito_expected_prev[26] !== last_dadoEscrito_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[26] = dadoEscrito_expected_prev[26];
	end
	if (
		( dadoEscrito_expected_prev[27] !== 1'bx ) && ( dadoEscrito_prev[27] !== dadoEscrito_expected_prev[27] )
		&& ((dadoEscrito_expected_prev[27] !== last_dadoEscrito_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[27] = dadoEscrito_expected_prev[27];
	end
	if (
		( dadoEscrito_expected_prev[28] !== 1'bx ) && ( dadoEscrito_prev[28] !== dadoEscrito_expected_prev[28] )
		&& ((dadoEscrito_expected_prev[28] !== last_dadoEscrito_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[28] = dadoEscrito_expected_prev[28];
	end
	if (
		( dadoEscrito_expected_prev[29] !== 1'bx ) && ( dadoEscrito_prev[29] !== dadoEscrito_expected_prev[29] )
		&& ((dadoEscrito_expected_prev[29] !== last_dadoEscrito_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[29] = dadoEscrito_expected_prev[29];
	end
	if (
		( dadoEscrito_expected_prev[30] !== 1'bx ) && ( dadoEscrito_prev[30] !== dadoEscrito_expected_prev[30] )
		&& ((dadoEscrito_expected_prev[30] !== last_dadoEscrito_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[30] = dadoEscrito_expected_prev[30];
	end
	if (
		( dadoEscrito_expected_prev[31] !== 1'bx ) && ( dadoEscrito_prev[31] !== dadoEscrito_expected_prev[31] )
		&& ((dadoEscrito_expected_prev[31] !== last_dadoEscrito_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoEscrito[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoEscrito_expected_prev);
		$display ("     Real value = %b", dadoEscrito_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dadoEscrito_exp[31] = dadoEscrito_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplexador_escrita_br_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ULA;
reg [1:0] ctrl_mux_escrita_br;
reg [31:0] entrada_dados;
reg [31:0] instrucao;
reg [31:0] memoria_dados;
// wires                                               
wire [31:0] dadoEscrito;

wire sampler;                             

// assign statements (if any)                          
multiplexador_escrita_br i1 (
// port map - connection between master ports and signals/registers   
	.ULA(ULA),
	.ctrl_mux_escrita_br(ctrl_mux_escrita_br),
	.dadoEscrito(dadoEscrito),
	.entrada_dados(entrada_dados),
	.instrucao(instrucao),
	.memoria_dados(memoria_dados)
);
// entrada_dados[ 31 ]
initial
begin
	entrada_dados[31] = 1'b0;
end 
// entrada_dados[ 30 ]
initial
begin
	entrada_dados[30] = 1'b0;
end 
// entrada_dados[ 29 ]
initial
begin
	entrada_dados[29] = 1'b0;
end 
// entrada_dados[ 28 ]
initial
begin
	entrada_dados[28] = 1'b0;
end 
// entrada_dados[ 27 ]
initial
begin
	entrada_dados[27] = 1'b0;
end 
// entrada_dados[ 26 ]
initial
begin
	entrada_dados[26] = 1'b0;
end 
// entrada_dados[ 25 ]
initial
begin
	entrada_dados[25] = 1'b0;
end 
// entrada_dados[ 24 ]
initial
begin
	entrada_dados[24] = 1'b0;
end 
// entrada_dados[ 23 ]
initial
begin
	entrada_dados[23] = 1'b0;
end 
// entrada_dados[ 22 ]
initial
begin
	entrada_dados[22] = 1'b0;
end 
// entrada_dados[ 21 ]
initial
begin
	entrada_dados[21] = 1'b0;
end 
// entrada_dados[ 20 ]
initial
begin
	entrada_dados[20] = 1'b0;
end 
// entrada_dados[ 19 ]
initial
begin
	entrada_dados[19] = 1'b0;
end 
// entrada_dados[ 18 ]
initial
begin
	entrada_dados[18] = 1'b0;
end 
// entrada_dados[ 17 ]
initial
begin
	entrada_dados[17] = 1'b0;
end 
// entrada_dados[ 16 ]
initial
begin
	entrada_dados[16] = 1'b0;
end 
// entrada_dados[ 15 ]
initial
begin
	entrada_dados[15] = 1'b0;
end 
// entrada_dados[ 14 ]
initial
begin
	entrada_dados[14] = 1'b0;
end 
// entrada_dados[ 13 ]
initial
begin
	entrada_dados[13] = 1'b0;
end 
// entrada_dados[ 12 ]
initial
begin
	entrada_dados[12] = 1'b0;
end 
// entrada_dados[ 11 ]
initial
begin
	entrada_dados[11] = 1'b0;
end 
// entrada_dados[ 10 ]
initial
begin
	entrada_dados[10] = 1'b0;
end 
// entrada_dados[ 9 ]
initial
begin
	entrada_dados[9] = 1'b0;
end 
// entrada_dados[ 8 ]
initial
begin
	entrada_dados[8] = 1'b0;
end 
// entrada_dados[ 7 ]
initial
begin
	entrada_dados[7] = 1'b0;
end 
// entrada_dados[ 6 ]
initial
begin
	entrada_dados[6] = 1'b0;
end 
// entrada_dados[ 5 ]
initial
begin
	entrada_dados[5] = 1'b0;
end 
// entrada_dados[ 4 ]
initial
begin
	entrada_dados[4] = 1'b0;
end 
// entrada_dados[ 3 ]
initial
begin
	entrada_dados[3] = 1'b0;
	entrada_dados[3] = #800000 1'b1;
end 
// entrada_dados[ 2 ]
initial
begin
	entrada_dados[2] = 1'b0;
	entrada_dados[2] = #400000 1'b1;
	entrada_dados[2] = #400000 1'b0;
end 
// entrada_dados[ 1 ]
initial
begin
	repeat(2)
	begin
		entrada_dados[1] = 1'b0;
		entrada_dados[1] = #200000 1'b1;
		# 200000;
	end
	entrada_dados[1] = 1'b0;
end 
// entrada_dados[ 0 ]
always
begin
	entrada_dados[0] = 1'b0;
	entrada_dados[0] = #100000 1'b1;
	#100000;
end 
// instrucao[ 31 ]
initial
begin
	instrucao[31] = 1'b0;
end 
// instrucao[ 30 ]
initial
begin
	instrucao[30] = 1'b0;
end 
// instrucao[ 29 ]
initial
begin
	instrucao[29] = 1'b0;
end 
// instrucao[ 28 ]
initial
begin
	instrucao[28] = 1'b0;
end 
// instrucao[ 27 ]
initial
begin
	instrucao[27] = 1'b0;
end 
// instrucao[ 26 ]
initial
begin
	instrucao[26] = 1'b0;
end 
// instrucao[ 25 ]
initial
begin
	instrucao[25] = 1'b0;
end 
// instrucao[ 24 ]
initial
begin
	instrucao[24] = 1'b0;
end 
// instrucao[ 23 ]
initial
begin
	instrucao[23] = 1'b0;
end 
// instrucao[ 22 ]
initial
begin
	instrucao[22] = 1'b0;
end 
// instrucao[ 21 ]
initial
begin
	instrucao[21] = 1'b0;
end 
// instrucao[ 20 ]
initial
begin
	instrucao[20] = 1'b0;
end 
// instrucao[ 19 ]
initial
begin
	instrucao[19] = 1'b0;
end 
// instrucao[ 18 ]
initial
begin
	instrucao[18] = 1'b0;
end 
// instrucao[ 17 ]
initial
begin
	instrucao[17] = 1'b0;
end 
// instrucao[ 16 ]
initial
begin
	instrucao[16] = 1'b0;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
	instrucao[10] = #900000 1'b1;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
	instrucao[9] = #400000 1'b1;
	instrucao[9] = #500000 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
	instrucao[8] = #200000 1'b1;
	instrucao[8] = #200000 1'b0;
	instrucao[8] = #200000 1'b1;
	instrucao[8] = #300000 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	repeat(3)
	begin
		instrucao[7] = 1'b0;
		instrucao[7] = #100000 1'b1;
		# 100000;
	end
	instrucao[7] = 1'b0;
	instrucao[7] = #200000 1'b1;
	instrucao[7] = #100000 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b1;
	instrucao[6] = #300000 1'b0;
	instrucao[6] = #400000 1'b1;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b1;
	# 100000;
	repeat(2)
	begin
		instrucao[5] = 1'b0;
		instrucao[5] = #200000 1'b1;
		# 200000;
	end
	instrucao[5] = 1'b0;
end 
// instrucao[ 4 ]
always
begin
	instrucao[4] = 1'b0;
	instrucao[4] = #100000 1'b1;
	#100000;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b1;
	instrucao[3] = #800000 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b1;
	instrucao[2] = #400000 1'b0;
	instrucao[2] = #400000 1'b1;
end 
// instrucao[ 1 ]
initial
begin
	repeat(2)
	begin
		instrucao[1] = 1'b1;
		instrucao[1] = #200000 1'b0;
		# 200000;
	end
	instrucao[1] = 1'b1;
end 
// instrucao[ 0 ]
always
begin
	instrucao[0] = 1'b1;
	instrucao[0] = #100000 1'b0;
	#100000;
end 
// memoria_dados[ 31 ]
initial
begin
	memoria_dados[31] = 1'b0;
end 
// memoria_dados[ 30 ]
initial
begin
	memoria_dados[30] = 1'b0;
end 
// memoria_dados[ 29 ]
initial
begin
	memoria_dados[29] = 1'b0;
end 
// memoria_dados[ 28 ]
initial
begin
	memoria_dados[28] = 1'b0;
end 
// memoria_dados[ 27 ]
initial
begin
	memoria_dados[27] = 1'b0;
end 
// memoria_dados[ 26 ]
initial
begin
	memoria_dados[26] = 1'b0;
end 
// memoria_dados[ 25 ]
initial
begin
	memoria_dados[25] = 1'b0;
end 
// memoria_dados[ 24 ]
initial
begin
	memoria_dados[24] = 1'b0;
end 
// memoria_dados[ 23 ]
initial
begin
	memoria_dados[23] = 1'b0;
end 
// memoria_dados[ 22 ]
initial
begin
	memoria_dados[22] = 1'b0;
end 
// memoria_dados[ 21 ]
initial
begin
	memoria_dados[21] = 1'b0;
end 
// memoria_dados[ 20 ]
initial
begin
	memoria_dados[20] = 1'b0;
end 
// memoria_dados[ 19 ]
initial
begin
	memoria_dados[19] = 1'b0;
end 
// memoria_dados[ 18 ]
initial
begin
	memoria_dados[18] = 1'b0;
end 
// memoria_dados[ 17 ]
initial
begin
	memoria_dados[17] = 1'b0;
end 
// memoria_dados[ 16 ]
initial
begin
	memoria_dados[16] = 1'b0;
end 
// memoria_dados[ 15 ]
initial
begin
	memoria_dados[15] = 1'b0;
	memoria_dados[15] = #900000 1'b1;
end 
// memoria_dados[ 14 ]
initial
begin
	memoria_dados[14] = 1'b0;
	memoria_dados[14] = #400000 1'b1;
	memoria_dados[14] = #500000 1'b0;
end 
// memoria_dados[ 13 ]
initial
begin
	memoria_dados[13] = 1'b0;
	memoria_dados[13] = #200000 1'b1;
	memoria_dados[13] = #200000 1'b0;
	memoria_dados[13] = #300000 1'b1;
	memoria_dados[13] = #200000 1'b0;
end 
// memoria_dados[ 12 ]
initial
begin
	repeat(2)
	begin
		memoria_dados[12] = 1'b0;
		memoria_dados[12] = #100000 1'b1;
		# 100000;
	end
	memoria_dados[12] = 1'b0;
	# 200000;
	repeat(2)
	begin
		memoria_dados[12] = 1'b1;
		memoria_dados[12] = #100000 1'b0;
		# 100000;
	end
end 
// memoria_dados[ 11 ]
initial
begin
	memoria_dados[11] = 1'b1;
	memoria_dados[11] = #200000 1'b0;
	memoria_dados[11] = #300000 1'b1;
	memoria_dados[11] = #300000 1'b0;
end 
// memoria_dados[ 10 ]
initial
begin
	memoria_dados[10] = 1'b1;
	memoria_dados[10] = #100000 1'b0;
	memoria_dados[10] = #100000 1'b1;
	memoria_dados[10] = #200000 1'b0;
	memoria_dados[10] = #100000 1'b1;
	memoria_dados[10] = #100000 1'b0;
	memoria_dados[10] = #200000 1'b1;
	memoria_dados[10] = #100000 1'b0;
end 
// memoria_dados[ 9 ]
initial
begin
	memoria_dados[9] = 1'b0;
	# 100000;
	repeat(2)
	begin
		memoria_dados[9] = 1'b1;
		memoria_dados[9] = #200000 1'b0;
		# 200000;
	end
	memoria_dados[9] = 1'b1;
end 
// memoria_dados[ 8 ]
always
begin
	memoria_dados[8] = 1'b1;
	memoria_dados[8] = #100000 1'b0;
	#100000;
end 
// memoria_dados[ 7 ]
initial
begin
	memoria_dados[7] = 1'b0;
end 
// memoria_dados[ 6 ]
initial
begin
	memoria_dados[6] = 1'b0;
end 
// memoria_dados[ 5 ]
initial
begin
	memoria_dados[5] = 1'b0;
	memoria_dados[5] = #600000 1'b1;
end 
// memoria_dados[ 4 ]
initial
begin
	memoria_dados[4] = 1'b0;
	memoria_dados[4] = #300000 1'b1;
	memoria_dados[4] = #300000 1'b0;
	memoria_dados[4] = #300000 1'b1;
end 
// memoria_dados[ 3 ]
initial
begin
	repeat(3)
	begin
		memoria_dados[3] = 1'b0;
		memoria_dados[3] = #100000 1'b1;
		# 200000;
	end
	memoria_dados[3] = 1'b0;
end 
// memoria_dados[ 2 ]
initial
begin
	memoria_dados[2] = 1'b1;
	memoria_dados[2] = #100000 1'b0;
	memoria_dados[2] = #100000 1'b1;
	memoria_dados[2] = #200000 1'b0;
	memoria_dados[2] = #100000 1'b1;
	memoria_dados[2] = #100000 1'b0;
	memoria_dados[2] = #200000 1'b1;
	memoria_dados[2] = #100000 1'b0;
end 
// memoria_dados[ 1 ]
initial
begin
	memoria_dados[1] = 1'b0;
	# 100000;
	repeat(2)
	begin
		memoria_dados[1] = 1'b1;
		memoria_dados[1] = #200000 1'b0;
		# 200000;
	end
	memoria_dados[1] = 1'b1;
end 
// memoria_dados[ 0 ]
always
begin
	memoria_dados[0] = 1'b1;
	memoria_dados[0] = #100000 1'b0;
	#100000;
end 
// ULA[ 31 ]
initial
begin
	ULA[31] = 1'b0;
end 
// ULA[ 30 ]
initial
begin
	ULA[30] = 1'b0;
end 
// ULA[ 29 ]
initial
begin
	ULA[29] = 1'b0;
end 
// ULA[ 28 ]
initial
begin
	ULA[28] = 1'b0;
end 
// ULA[ 27 ]
initial
begin
	ULA[27] = 1'b0;
end 
// ULA[ 26 ]
initial
begin
	ULA[26] = 1'b0;
end 
// ULA[ 25 ]
initial
begin
	ULA[25] = 1'b0;
end 
// ULA[ 24 ]
initial
begin
	ULA[24] = 1'b0;
end 
// ULA[ 23 ]
initial
begin
	ULA[23] = 1'b0;
end 
// ULA[ 22 ]
initial
begin
	ULA[22] = 1'b0;
end 
// ULA[ 21 ]
initial
begin
	ULA[21] = 1'b0;
end 
// ULA[ 20 ]
initial
begin
	ULA[20] = 1'b0;
end 
// ULA[ 19 ]
initial
begin
	ULA[19] = 1'b0;
end 
// ULA[ 18 ]
initial
begin
	ULA[18] = 1'b0;
end 
// ULA[ 17 ]
initial
begin
	ULA[17] = 1'b0;
end 
// ULA[ 16 ]
initial
begin
	ULA[16] = 1'b0;
end 
// ULA[ 15 ]
initial
begin
	ULA[15] = 1'b0;
end 
// ULA[ 14 ]
initial
begin
	ULA[14] = 1'b0;
end 
// ULA[ 13 ]
initial
begin
	ULA[13] = 1'b0;
end 
// ULA[ 12 ]
initial
begin
	ULA[12] = 1'b0;
end 
// ULA[ 11 ]
initial
begin
	ULA[11] = 1'b0;
end 
// ULA[ 10 ]
initial
begin
	ULA[10] = 1'b0;
	ULA[10] = #300000 1'b1;
end 
// ULA[ 9 ]
initial
begin
	ULA[9] = 1'b1;
	ULA[9] = #300000 1'b0;
end 
// ULA[ 8 ]
initial
begin
	ULA[8] = 1'b1;
	ULA[8] = #300000 1'b0;
end 
// ULA[ 7 ]
initial
begin
	ULA[7] = 1'b1;
	ULA[7] = #300000 1'b0;
end 
// ULA[ 6 ]
initial
begin
	ULA[6] = 1'b1;
	ULA[6] = #300000 1'b0;
	ULA[6] = #600000 1'b1;
end 
// ULA[ 5 ]
initial
begin
	ULA[5] = 1'b1;
	ULA[5] = #300000 1'b0;
	ULA[5] = #300000 1'b1;
	ULA[5] = #300000 1'b0;
end 
// ULA[ 4 ]
initial
begin
	ULA[4] = 1'b0;
	ULA[4] = #100000 1'b1;
	# 200000;
	repeat(2)
	begin
		ULA[4] = 1'b0;
		ULA[4] = #200000 1'b1;
		# 100000;
	end
	ULA[4] = 1'b0;
end 
// ULA[ 3 ]
initial
begin
	ULA[3] = 1'b0;
	ULA[3] = #200000 1'b1;
	ULA[3] = #100000 1'b0;
	ULA[3] = #100000 1'b1;
	ULA[3] = #200000 1'b0;
	ULA[3] = #100000 1'b1;
	ULA[3] = #100000 1'b0;
end 
// ULA[ 2 ]
initial
begin
	ULA[2] = 1'b1;
	# 100000;
	repeat(2)
	begin
		ULA[2] = 1'b0;
		ULA[2] = #200000 1'b1;
		# 200000;
	end
	ULA[2] = 1'b0;
end 
// ULA[ 1 ]
always
begin
	ULA[1] = 1'b1;
	ULA[1] = #100000 1'b0;
	#100000;
end 
// ULA[ 0 ]
initial
begin
	ULA[0] = 1'b1;
end 
// ctrl_mux_escrita_br[ 1 ]
initial
begin
	repeat(2)
	begin
		ctrl_mux_escrita_br[1] = 1'b0;
		ctrl_mux_escrita_br[1] = #200000 1'b1;
		# 200000;
	end
	ctrl_mux_escrita_br[1] = 1'b0;
end 
// ctrl_mux_escrita_br[ 0 ]
always
begin
	ctrl_mux_escrita_br[0] = 1'b0;
	ctrl_mux_escrita_br[0] = #100000 1'b1;
	#100000;
end 

multiplexador_escrita_br_vlg_sample_tst tb_sample (
	.ULA(ULA),
	.ctrl_mux_escrita_br(ctrl_mux_escrita_br),
	.entrada_dados(entrada_dados),
	.instrucao(instrucao),
	.memoria_dados(memoria_dados),
	.sampler_tx(sampler)
);

multiplexador_escrita_br_vlg_check_tst tb_out(
	.dadoEscrito(dadoEscrito),
	.sampler_rx(sampler)
);
endmodule

