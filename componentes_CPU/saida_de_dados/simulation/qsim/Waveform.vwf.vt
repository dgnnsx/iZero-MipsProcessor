// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2016 19:31:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    saida_de_dados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module saida_de_dados_vlg_sample_tst(
	OUT,
	clock,
	dado_de_saida,
	endereco,
	reset,
	sampler_tx
);
input  OUT;
input  clock;
input [31:0] dado_de_saida;
input [25:0] endereco;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(OUT or clock or dado_de_saida or endereco or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module saida_de_dados_vlg_check_tst (
	D1,
	D2,
	D3,
	sampler_rx
);
input [31:0] D1;
input [31:0] D2;
input [31:0] D3;
input sampler_rx;

reg [31:0] D1_expected;
reg [31:0] D2_expected;
reg [31:0] D3_expected;

reg [31:0] D1_prev;
reg [31:0] D2_prev;
reg [31:0] D3_prev;

reg [31:0] D1_expected_prev;
reg [31:0] D2_expected_prev;
reg [31:0] D3_expected_prev;

reg [31:0] last_D1_exp;
reg [31:0] last_D2_exp;
reg [31:0] last_D3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
end

// update expected /o prevs

always @(trigger)
begin
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
end


// expected D1[ 31 ]
initial
begin
	D1_expected[31] = 1'bX;
end 
// expected D1[ 30 ]
initial
begin
	D1_expected[30] = 1'bX;
end 
// expected D1[ 29 ]
initial
begin
	D1_expected[29] = 1'bX;
end 
// expected D1[ 28 ]
initial
begin
	D1_expected[28] = 1'bX;
end 
// expected D1[ 27 ]
initial
begin
	D1_expected[27] = 1'bX;
end 
// expected D1[ 26 ]
initial
begin
	D1_expected[26] = 1'bX;
end 
// expected D1[ 25 ]
initial
begin
	D1_expected[25] = 1'bX;
end 
// expected D1[ 24 ]
initial
begin
	D1_expected[24] = 1'bX;
end 
// expected D1[ 23 ]
initial
begin
	D1_expected[23] = 1'bX;
end 
// expected D1[ 22 ]
initial
begin
	D1_expected[22] = 1'bX;
end 
// expected D1[ 21 ]
initial
begin
	D1_expected[21] = 1'bX;
end 
// expected D1[ 20 ]
initial
begin
	D1_expected[20] = 1'bX;
end 
// expected D1[ 19 ]
initial
begin
	D1_expected[19] = 1'bX;
end 
// expected D1[ 18 ]
initial
begin
	D1_expected[18] = 1'bX;
end 
// expected D1[ 17 ]
initial
begin
	D1_expected[17] = 1'bX;
end 
// expected D1[ 16 ]
initial
begin
	D1_expected[16] = 1'bX;
end 
// expected D1[ 15 ]
initial
begin
	D1_expected[15] = 1'bX;
end 
// expected D1[ 14 ]
initial
begin
	D1_expected[14] = 1'bX;
end 
// expected D1[ 13 ]
initial
begin
	D1_expected[13] = 1'bX;
end 
// expected D1[ 12 ]
initial
begin
	D1_expected[12] = 1'bX;
end 
// expected D1[ 11 ]
initial
begin
	D1_expected[11] = 1'bX;
end 
// expected D1[ 10 ]
initial
begin
	D1_expected[10] = 1'bX;
end 
// expected D1[ 9 ]
initial
begin
	D1_expected[9] = 1'bX;
end 
// expected D1[ 8 ]
initial
begin
	D1_expected[8] = 1'bX;
end 
// expected D1[ 7 ]
initial
begin
	D1_expected[7] = 1'bX;
end 
// expected D1[ 6 ]
initial
begin
	D1_expected[6] = 1'bX;
end 
// expected D1[ 5 ]
initial
begin
	D1_expected[5] = 1'bX;
end 
// expected D1[ 4 ]
initial
begin
	D1_expected[4] = 1'bX;
end 
// expected D1[ 3 ]
initial
begin
	D1_expected[3] = 1'bX;
end 
// expected D1[ 2 ]
initial
begin
	D1_expected[2] = 1'bX;
end 
// expected D1[ 1 ]
initial
begin
	D1_expected[1] = 1'bX;
end 
// expected D1[ 0 ]
initial
begin
	D1_expected[0] = 1'bX;
end 
// expected D2[ 31 ]
initial
begin
	D2_expected[31] = 1'bX;
end 
// expected D2[ 30 ]
initial
begin
	D2_expected[30] = 1'bX;
end 
// expected D2[ 29 ]
initial
begin
	D2_expected[29] = 1'bX;
end 
// expected D2[ 28 ]
initial
begin
	D2_expected[28] = 1'bX;
end 
// expected D2[ 27 ]
initial
begin
	D2_expected[27] = 1'bX;
end 
// expected D2[ 26 ]
initial
begin
	D2_expected[26] = 1'bX;
end 
// expected D2[ 25 ]
initial
begin
	D2_expected[25] = 1'bX;
end 
// expected D2[ 24 ]
initial
begin
	D2_expected[24] = 1'bX;
end 
// expected D2[ 23 ]
initial
begin
	D2_expected[23] = 1'bX;
end 
// expected D2[ 22 ]
initial
begin
	D2_expected[22] = 1'bX;
end 
// expected D2[ 21 ]
initial
begin
	D2_expected[21] = 1'bX;
end 
// expected D2[ 20 ]
initial
begin
	D2_expected[20] = 1'bX;
end 
// expected D2[ 19 ]
initial
begin
	D2_expected[19] = 1'bX;
end 
// expected D2[ 18 ]
initial
begin
	D2_expected[18] = 1'bX;
end 
// expected D2[ 17 ]
initial
begin
	D2_expected[17] = 1'bX;
end 
// expected D2[ 16 ]
initial
begin
	D2_expected[16] = 1'bX;
end 
// expected D2[ 15 ]
initial
begin
	D2_expected[15] = 1'bX;
end 
// expected D2[ 14 ]
initial
begin
	D2_expected[14] = 1'bX;
end 
// expected D2[ 13 ]
initial
begin
	D2_expected[13] = 1'bX;
end 
// expected D2[ 12 ]
initial
begin
	D2_expected[12] = 1'bX;
end 
// expected D2[ 11 ]
initial
begin
	D2_expected[11] = 1'bX;
end 
// expected D2[ 10 ]
initial
begin
	D2_expected[10] = 1'bX;
end 
// expected D2[ 9 ]
initial
begin
	D2_expected[9] = 1'bX;
end 
// expected D2[ 8 ]
initial
begin
	D2_expected[8] = 1'bX;
end 
// expected D2[ 7 ]
initial
begin
	D2_expected[7] = 1'bX;
end 
// expected D2[ 6 ]
initial
begin
	D2_expected[6] = 1'bX;
end 
// expected D2[ 5 ]
initial
begin
	D2_expected[5] = 1'bX;
end 
// expected D2[ 4 ]
initial
begin
	D2_expected[4] = 1'bX;
end 
// expected D2[ 3 ]
initial
begin
	D2_expected[3] = 1'bX;
end 
// expected D2[ 2 ]
initial
begin
	D2_expected[2] = 1'bX;
end 
// expected D2[ 1 ]
initial
begin
	D2_expected[1] = 1'bX;
end 
// expected D2[ 0 ]
initial
begin
	D2_expected[0] = 1'bX;
end 
// expected D3[ 31 ]
initial
begin
	D3_expected[31] = 1'bX;
end 
// expected D3[ 30 ]
initial
begin
	D3_expected[30] = 1'bX;
end 
// expected D3[ 29 ]
initial
begin
	D3_expected[29] = 1'bX;
end 
// expected D3[ 28 ]
initial
begin
	D3_expected[28] = 1'bX;
end 
// expected D3[ 27 ]
initial
begin
	D3_expected[27] = 1'bX;
end 
// expected D3[ 26 ]
initial
begin
	D3_expected[26] = 1'bX;
end 
// expected D3[ 25 ]
initial
begin
	D3_expected[25] = 1'bX;
end 
// expected D3[ 24 ]
initial
begin
	D3_expected[24] = 1'bX;
end 
// expected D3[ 23 ]
initial
begin
	D3_expected[23] = 1'bX;
end 
// expected D3[ 22 ]
initial
begin
	D3_expected[22] = 1'bX;
end 
// expected D3[ 21 ]
initial
begin
	D3_expected[21] = 1'bX;
end 
// expected D3[ 20 ]
initial
begin
	D3_expected[20] = 1'bX;
end 
// expected D3[ 19 ]
initial
begin
	D3_expected[19] = 1'bX;
end 
// expected D3[ 18 ]
initial
begin
	D3_expected[18] = 1'bX;
end 
// expected D3[ 17 ]
initial
begin
	D3_expected[17] = 1'bX;
end 
// expected D3[ 16 ]
initial
begin
	D3_expected[16] = 1'bX;
end 
// expected D3[ 15 ]
initial
begin
	D3_expected[15] = 1'bX;
end 
// expected D3[ 14 ]
initial
begin
	D3_expected[14] = 1'bX;
end 
// expected D3[ 13 ]
initial
begin
	D3_expected[13] = 1'bX;
end 
// expected D3[ 12 ]
initial
begin
	D3_expected[12] = 1'bX;
end 
// expected D3[ 11 ]
initial
begin
	D3_expected[11] = 1'bX;
end 
// expected D3[ 10 ]
initial
begin
	D3_expected[10] = 1'bX;
end 
// expected D3[ 9 ]
initial
begin
	D3_expected[9] = 1'bX;
end 
// expected D3[ 8 ]
initial
begin
	D3_expected[8] = 1'bX;
end 
// expected D3[ 7 ]
initial
begin
	D3_expected[7] = 1'bX;
end 
// expected D3[ 6 ]
initial
begin
	D3_expected[6] = 1'bX;
end 
// expected D3[ 5 ]
initial
begin
	D3_expected[5] = 1'bX;
end 
// expected D3[ 4 ]
initial
begin
	D3_expected[4] = 1'bX;
end 
// expected D3[ 3 ]
initial
begin
	D3_expected[3] = 1'bX;
end 
// expected D3[ 2 ]
initial
begin
	D3_expected[2] = 1'bX;
end 
// expected D3[ 1 ]
initial
begin
	D3_expected[1] = 1'bX;
end 
// expected D3[ 0 ]
initial
begin
	D3_expected[0] = 1'bX;
end 
// generate trigger
always @(D1_expected or D1 or D2_expected or D2 or D3_expected or D3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D1 = %b | expected D2 = %b | expected D3 = %b | ",D1_expected_prev,D2_expected_prev,D3_expected_prev);
	$display("| real D1 = %b | real D2 = %b | real D3 = %b | ",D1_prev,D2_prev,D3_prev);
`endif
	if (
		( D1_expected_prev[0] !== 1'bx ) && ( D1_prev[0] !== D1_expected_prev[0] )
		&& ((D1_expected_prev[0] !== last_D1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[0] = D1_expected_prev[0];
	end
	if (
		( D1_expected_prev[1] !== 1'bx ) && ( D1_prev[1] !== D1_expected_prev[1] )
		&& ((D1_expected_prev[1] !== last_D1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[1] = D1_expected_prev[1];
	end
	if (
		( D1_expected_prev[2] !== 1'bx ) && ( D1_prev[2] !== D1_expected_prev[2] )
		&& ((D1_expected_prev[2] !== last_D1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[2] = D1_expected_prev[2];
	end
	if (
		( D1_expected_prev[3] !== 1'bx ) && ( D1_prev[3] !== D1_expected_prev[3] )
		&& ((D1_expected_prev[3] !== last_D1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[3] = D1_expected_prev[3];
	end
	if (
		( D1_expected_prev[4] !== 1'bx ) && ( D1_prev[4] !== D1_expected_prev[4] )
		&& ((D1_expected_prev[4] !== last_D1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[4] = D1_expected_prev[4];
	end
	if (
		( D1_expected_prev[5] !== 1'bx ) && ( D1_prev[5] !== D1_expected_prev[5] )
		&& ((D1_expected_prev[5] !== last_D1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[5] = D1_expected_prev[5];
	end
	if (
		( D1_expected_prev[6] !== 1'bx ) && ( D1_prev[6] !== D1_expected_prev[6] )
		&& ((D1_expected_prev[6] !== last_D1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[6] = D1_expected_prev[6];
	end
	if (
		( D1_expected_prev[7] !== 1'bx ) && ( D1_prev[7] !== D1_expected_prev[7] )
		&& ((D1_expected_prev[7] !== last_D1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[7] = D1_expected_prev[7];
	end
	if (
		( D1_expected_prev[8] !== 1'bx ) && ( D1_prev[8] !== D1_expected_prev[8] )
		&& ((D1_expected_prev[8] !== last_D1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[8] = D1_expected_prev[8];
	end
	if (
		( D1_expected_prev[9] !== 1'bx ) && ( D1_prev[9] !== D1_expected_prev[9] )
		&& ((D1_expected_prev[9] !== last_D1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[9] = D1_expected_prev[9];
	end
	if (
		( D1_expected_prev[10] !== 1'bx ) && ( D1_prev[10] !== D1_expected_prev[10] )
		&& ((D1_expected_prev[10] !== last_D1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[10] = D1_expected_prev[10];
	end
	if (
		( D1_expected_prev[11] !== 1'bx ) && ( D1_prev[11] !== D1_expected_prev[11] )
		&& ((D1_expected_prev[11] !== last_D1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[11] = D1_expected_prev[11];
	end
	if (
		( D1_expected_prev[12] !== 1'bx ) && ( D1_prev[12] !== D1_expected_prev[12] )
		&& ((D1_expected_prev[12] !== last_D1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[12] = D1_expected_prev[12];
	end
	if (
		( D1_expected_prev[13] !== 1'bx ) && ( D1_prev[13] !== D1_expected_prev[13] )
		&& ((D1_expected_prev[13] !== last_D1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[13] = D1_expected_prev[13];
	end
	if (
		( D1_expected_prev[14] !== 1'bx ) && ( D1_prev[14] !== D1_expected_prev[14] )
		&& ((D1_expected_prev[14] !== last_D1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[14] = D1_expected_prev[14];
	end
	if (
		( D1_expected_prev[15] !== 1'bx ) && ( D1_prev[15] !== D1_expected_prev[15] )
		&& ((D1_expected_prev[15] !== last_D1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[15] = D1_expected_prev[15];
	end
	if (
		( D1_expected_prev[16] !== 1'bx ) && ( D1_prev[16] !== D1_expected_prev[16] )
		&& ((D1_expected_prev[16] !== last_D1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[16] = D1_expected_prev[16];
	end
	if (
		( D1_expected_prev[17] !== 1'bx ) && ( D1_prev[17] !== D1_expected_prev[17] )
		&& ((D1_expected_prev[17] !== last_D1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[17] = D1_expected_prev[17];
	end
	if (
		( D1_expected_prev[18] !== 1'bx ) && ( D1_prev[18] !== D1_expected_prev[18] )
		&& ((D1_expected_prev[18] !== last_D1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[18] = D1_expected_prev[18];
	end
	if (
		( D1_expected_prev[19] !== 1'bx ) && ( D1_prev[19] !== D1_expected_prev[19] )
		&& ((D1_expected_prev[19] !== last_D1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[19] = D1_expected_prev[19];
	end
	if (
		( D1_expected_prev[20] !== 1'bx ) && ( D1_prev[20] !== D1_expected_prev[20] )
		&& ((D1_expected_prev[20] !== last_D1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[20] = D1_expected_prev[20];
	end
	if (
		( D1_expected_prev[21] !== 1'bx ) && ( D1_prev[21] !== D1_expected_prev[21] )
		&& ((D1_expected_prev[21] !== last_D1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[21] = D1_expected_prev[21];
	end
	if (
		( D1_expected_prev[22] !== 1'bx ) && ( D1_prev[22] !== D1_expected_prev[22] )
		&& ((D1_expected_prev[22] !== last_D1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[22] = D1_expected_prev[22];
	end
	if (
		( D1_expected_prev[23] !== 1'bx ) && ( D1_prev[23] !== D1_expected_prev[23] )
		&& ((D1_expected_prev[23] !== last_D1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[23] = D1_expected_prev[23];
	end
	if (
		( D1_expected_prev[24] !== 1'bx ) && ( D1_prev[24] !== D1_expected_prev[24] )
		&& ((D1_expected_prev[24] !== last_D1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[24] = D1_expected_prev[24];
	end
	if (
		( D1_expected_prev[25] !== 1'bx ) && ( D1_prev[25] !== D1_expected_prev[25] )
		&& ((D1_expected_prev[25] !== last_D1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[25] = D1_expected_prev[25];
	end
	if (
		( D1_expected_prev[26] !== 1'bx ) && ( D1_prev[26] !== D1_expected_prev[26] )
		&& ((D1_expected_prev[26] !== last_D1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[26] = D1_expected_prev[26];
	end
	if (
		( D1_expected_prev[27] !== 1'bx ) && ( D1_prev[27] !== D1_expected_prev[27] )
		&& ((D1_expected_prev[27] !== last_D1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[27] = D1_expected_prev[27];
	end
	if (
		( D1_expected_prev[28] !== 1'bx ) && ( D1_prev[28] !== D1_expected_prev[28] )
		&& ((D1_expected_prev[28] !== last_D1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[28] = D1_expected_prev[28];
	end
	if (
		( D1_expected_prev[29] !== 1'bx ) && ( D1_prev[29] !== D1_expected_prev[29] )
		&& ((D1_expected_prev[29] !== last_D1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[29] = D1_expected_prev[29];
	end
	if (
		( D1_expected_prev[30] !== 1'bx ) && ( D1_prev[30] !== D1_expected_prev[30] )
		&& ((D1_expected_prev[30] !== last_D1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[30] = D1_expected_prev[30];
	end
	if (
		( D1_expected_prev[31] !== 1'bx ) && ( D1_prev[31] !== D1_expected_prev[31] )
		&& ((D1_expected_prev[31] !== last_D1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[31] = D1_expected_prev[31];
	end
	if (
		( D2_expected_prev[0] !== 1'bx ) && ( D2_prev[0] !== D2_expected_prev[0] )
		&& ((D2_expected_prev[0] !== last_D2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[0] = D2_expected_prev[0];
	end
	if (
		( D2_expected_prev[1] !== 1'bx ) && ( D2_prev[1] !== D2_expected_prev[1] )
		&& ((D2_expected_prev[1] !== last_D2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[1] = D2_expected_prev[1];
	end
	if (
		( D2_expected_prev[2] !== 1'bx ) && ( D2_prev[2] !== D2_expected_prev[2] )
		&& ((D2_expected_prev[2] !== last_D2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[2] = D2_expected_prev[2];
	end
	if (
		( D2_expected_prev[3] !== 1'bx ) && ( D2_prev[3] !== D2_expected_prev[3] )
		&& ((D2_expected_prev[3] !== last_D2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[3] = D2_expected_prev[3];
	end
	if (
		( D2_expected_prev[4] !== 1'bx ) && ( D2_prev[4] !== D2_expected_prev[4] )
		&& ((D2_expected_prev[4] !== last_D2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[4] = D2_expected_prev[4];
	end
	if (
		( D2_expected_prev[5] !== 1'bx ) && ( D2_prev[5] !== D2_expected_prev[5] )
		&& ((D2_expected_prev[5] !== last_D2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[5] = D2_expected_prev[5];
	end
	if (
		( D2_expected_prev[6] !== 1'bx ) && ( D2_prev[6] !== D2_expected_prev[6] )
		&& ((D2_expected_prev[6] !== last_D2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[6] = D2_expected_prev[6];
	end
	if (
		( D2_expected_prev[7] !== 1'bx ) && ( D2_prev[7] !== D2_expected_prev[7] )
		&& ((D2_expected_prev[7] !== last_D2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[7] = D2_expected_prev[7];
	end
	if (
		( D2_expected_prev[8] !== 1'bx ) && ( D2_prev[8] !== D2_expected_prev[8] )
		&& ((D2_expected_prev[8] !== last_D2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[8] = D2_expected_prev[8];
	end
	if (
		( D2_expected_prev[9] !== 1'bx ) && ( D2_prev[9] !== D2_expected_prev[9] )
		&& ((D2_expected_prev[9] !== last_D2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[9] = D2_expected_prev[9];
	end
	if (
		( D2_expected_prev[10] !== 1'bx ) && ( D2_prev[10] !== D2_expected_prev[10] )
		&& ((D2_expected_prev[10] !== last_D2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[10] = D2_expected_prev[10];
	end
	if (
		( D2_expected_prev[11] !== 1'bx ) && ( D2_prev[11] !== D2_expected_prev[11] )
		&& ((D2_expected_prev[11] !== last_D2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[11] = D2_expected_prev[11];
	end
	if (
		( D2_expected_prev[12] !== 1'bx ) && ( D2_prev[12] !== D2_expected_prev[12] )
		&& ((D2_expected_prev[12] !== last_D2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[12] = D2_expected_prev[12];
	end
	if (
		( D2_expected_prev[13] !== 1'bx ) && ( D2_prev[13] !== D2_expected_prev[13] )
		&& ((D2_expected_prev[13] !== last_D2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[13] = D2_expected_prev[13];
	end
	if (
		( D2_expected_prev[14] !== 1'bx ) && ( D2_prev[14] !== D2_expected_prev[14] )
		&& ((D2_expected_prev[14] !== last_D2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[14] = D2_expected_prev[14];
	end
	if (
		( D2_expected_prev[15] !== 1'bx ) && ( D2_prev[15] !== D2_expected_prev[15] )
		&& ((D2_expected_prev[15] !== last_D2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[15] = D2_expected_prev[15];
	end
	if (
		( D2_expected_prev[16] !== 1'bx ) && ( D2_prev[16] !== D2_expected_prev[16] )
		&& ((D2_expected_prev[16] !== last_D2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[16] = D2_expected_prev[16];
	end
	if (
		( D2_expected_prev[17] !== 1'bx ) && ( D2_prev[17] !== D2_expected_prev[17] )
		&& ((D2_expected_prev[17] !== last_D2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[17] = D2_expected_prev[17];
	end
	if (
		( D2_expected_prev[18] !== 1'bx ) && ( D2_prev[18] !== D2_expected_prev[18] )
		&& ((D2_expected_prev[18] !== last_D2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[18] = D2_expected_prev[18];
	end
	if (
		( D2_expected_prev[19] !== 1'bx ) && ( D2_prev[19] !== D2_expected_prev[19] )
		&& ((D2_expected_prev[19] !== last_D2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[19] = D2_expected_prev[19];
	end
	if (
		( D2_expected_prev[20] !== 1'bx ) && ( D2_prev[20] !== D2_expected_prev[20] )
		&& ((D2_expected_prev[20] !== last_D2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[20] = D2_expected_prev[20];
	end
	if (
		( D2_expected_prev[21] !== 1'bx ) && ( D2_prev[21] !== D2_expected_prev[21] )
		&& ((D2_expected_prev[21] !== last_D2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[21] = D2_expected_prev[21];
	end
	if (
		( D2_expected_prev[22] !== 1'bx ) && ( D2_prev[22] !== D2_expected_prev[22] )
		&& ((D2_expected_prev[22] !== last_D2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[22] = D2_expected_prev[22];
	end
	if (
		( D2_expected_prev[23] !== 1'bx ) && ( D2_prev[23] !== D2_expected_prev[23] )
		&& ((D2_expected_prev[23] !== last_D2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[23] = D2_expected_prev[23];
	end
	if (
		( D2_expected_prev[24] !== 1'bx ) && ( D2_prev[24] !== D2_expected_prev[24] )
		&& ((D2_expected_prev[24] !== last_D2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[24] = D2_expected_prev[24];
	end
	if (
		( D2_expected_prev[25] !== 1'bx ) && ( D2_prev[25] !== D2_expected_prev[25] )
		&& ((D2_expected_prev[25] !== last_D2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[25] = D2_expected_prev[25];
	end
	if (
		( D2_expected_prev[26] !== 1'bx ) && ( D2_prev[26] !== D2_expected_prev[26] )
		&& ((D2_expected_prev[26] !== last_D2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[26] = D2_expected_prev[26];
	end
	if (
		( D2_expected_prev[27] !== 1'bx ) && ( D2_prev[27] !== D2_expected_prev[27] )
		&& ((D2_expected_prev[27] !== last_D2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[27] = D2_expected_prev[27];
	end
	if (
		( D2_expected_prev[28] !== 1'bx ) && ( D2_prev[28] !== D2_expected_prev[28] )
		&& ((D2_expected_prev[28] !== last_D2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[28] = D2_expected_prev[28];
	end
	if (
		( D2_expected_prev[29] !== 1'bx ) && ( D2_prev[29] !== D2_expected_prev[29] )
		&& ((D2_expected_prev[29] !== last_D2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[29] = D2_expected_prev[29];
	end
	if (
		( D2_expected_prev[30] !== 1'bx ) && ( D2_prev[30] !== D2_expected_prev[30] )
		&& ((D2_expected_prev[30] !== last_D2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[30] = D2_expected_prev[30];
	end
	if (
		( D2_expected_prev[31] !== 1'bx ) && ( D2_prev[31] !== D2_expected_prev[31] )
		&& ((D2_expected_prev[31] !== last_D2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[31] = D2_expected_prev[31];
	end
	if (
		( D3_expected_prev[0] !== 1'bx ) && ( D3_prev[0] !== D3_expected_prev[0] )
		&& ((D3_expected_prev[0] !== last_D3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[0] = D3_expected_prev[0];
	end
	if (
		( D3_expected_prev[1] !== 1'bx ) && ( D3_prev[1] !== D3_expected_prev[1] )
		&& ((D3_expected_prev[1] !== last_D3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[1] = D3_expected_prev[1];
	end
	if (
		( D3_expected_prev[2] !== 1'bx ) && ( D3_prev[2] !== D3_expected_prev[2] )
		&& ((D3_expected_prev[2] !== last_D3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[2] = D3_expected_prev[2];
	end
	if (
		( D3_expected_prev[3] !== 1'bx ) && ( D3_prev[3] !== D3_expected_prev[3] )
		&& ((D3_expected_prev[3] !== last_D3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[3] = D3_expected_prev[3];
	end
	if (
		( D3_expected_prev[4] !== 1'bx ) && ( D3_prev[4] !== D3_expected_prev[4] )
		&& ((D3_expected_prev[4] !== last_D3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[4] = D3_expected_prev[4];
	end
	if (
		( D3_expected_prev[5] !== 1'bx ) && ( D3_prev[5] !== D3_expected_prev[5] )
		&& ((D3_expected_prev[5] !== last_D3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[5] = D3_expected_prev[5];
	end
	if (
		( D3_expected_prev[6] !== 1'bx ) && ( D3_prev[6] !== D3_expected_prev[6] )
		&& ((D3_expected_prev[6] !== last_D3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[6] = D3_expected_prev[6];
	end
	if (
		( D3_expected_prev[7] !== 1'bx ) && ( D3_prev[7] !== D3_expected_prev[7] )
		&& ((D3_expected_prev[7] !== last_D3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[7] = D3_expected_prev[7];
	end
	if (
		( D3_expected_prev[8] !== 1'bx ) && ( D3_prev[8] !== D3_expected_prev[8] )
		&& ((D3_expected_prev[8] !== last_D3_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[8] = D3_expected_prev[8];
	end
	if (
		( D3_expected_prev[9] !== 1'bx ) && ( D3_prev[9] !== D3_expected_prev[9] )
		&& ((D3_expected_prev[9] !== last_D3_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[9] = D3_expected_prev[9];
	end
	if (
		( D3_expected_prev[10] !== 1'bx ) && ( D3_prev[10] !== D3_expected_prev[10] )
		&& ((D3_expected_prev[10] !== last_D3_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[10] = D3_expected_prev[10];
	end
	if (
		( D3_expected_prev[11] !== 1'bx ) && ( D3_prev[11] !== D3_expected_prev[11] )
		&& ((D3_expected_prev[11] !== last_D3_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[11] = D3_expected_prev[11];
	end
	if (
		( D3_expected_prev[12] !== 1'bx ) && ( D3_prev[12] !== D3_expected_prev[12] )
		&& ((D3_expected_prev[12] !== last_D3_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[12] = D3_expected_prev[12];
	end
	if (
		( D3_expected_prev[13] !== 1'bx ) && ( D3_prev[13] !== D3_expected_prev[13] )
		&& ((D3_expected_prev[13] !== last_D3_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[13] = D3_expected_prev[13];
	end
	if (
		( D3_expected_prev[14] !== 1'bx ) && ( D3_prev[14] !== D3_expected_prev[14] )
		&& ((D3_expected_prev[14] !== last_D3_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[14] = D3_expected_prev[14];
	end
	if (
		( D3_expected_prev[15] !== 1'bx ) && ( D3_prev[15] !== D3_expected_prev[15] )
		&& ((D3_expected_prev[15] !== last_D3_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[15] = D3_expected_prev[15];
	end
	if (
		( D3_expected_prev[16] !== 1'bx ) && ( D3_prev[16] !== D3_expected_prev[16] )
		&& ((D3_expected_prev[16] !== last_D3_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[16] = D3_expected_prev[16];
	end
	if (
		( D3_expected_prev[17] !== 1'bx ) && ( D3_prev[17] !== D3_expected_prev[17] )
		&& ((D3_expected_prev[17] !== last_D3_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[17] = D3_expected_prev[17];
	end
	if (
		( D3_expected_prev[18] !== 1'bx ) && ( D3_prev[18] !== D3_expected_prev[18] )
		&& ((D3_expected_prev[18] !== last_D3_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[18] = D3_expected_prev[18];
	end
	if (
		( D3_expected_prev[19] !== 1'bx ) && ( D3_prev[19] !== D3_expected_prev[19] )
		&& ((D3_expected_prev[19] !== last_D3_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[19] = D3_expected_prev[19];
	end
	if (
		( D3_expected_prev[20] !== 1'bx ) && ( D3_prev[20] !== D3_expected_prev[20] )
		&& ((D3_expected_prev[20] !== last_D3_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[20] = D3_expected_prev[20];
	end
	if (
		( D3_expected_prev[21] !== 1'bx ) && ( D3_prev[21] !== D3_expected_prev[21] )
		&& ((D3_expected_prev[21] !== last_D3_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[21] = D3_expected_prev[21];
	end
	if (
		( D3_expected_prev[22] !== 1'bx ) && ( D3_prev[22] !== D3_expected_prev[22] )
		&& ((D3_expected_prev[22] !== last_D3_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[22] = D3_expected_prev[22];
	end
	if (
		( D3_expected_prev[23] !== 1'bx ) && ( D3_prev[23] !== D3_expected_prev[23] )
		&& ((D3_expected_prev[23] !== last_D3_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[23] = D3_expected_prev[23];
	end
	if (
		( D3_expected_prev[24] !== 1'bx ) && ( D3_prev[24] !== D3_expected_prev[24] )
		&& ((D3_expected_prev[24] !== last_D3_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[24] = D3_expected_prev[24];
	end
	if (
		( D3_expected_prev[25] !== 1'bx ) && ( D3_prev[25] !== D3_expected_prev[25] )
		&& ((D3_expected_prev[25] !== last_D3_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[25] = D3_expected_prev[25];
	end
	if (
		( D3_expected_prev[26] !== 1'bx ) && ( D3_prev[26] !== D3_expected_prev[26] )
		&& ((D3_expected_prev[26] !== last_D3_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[26] = D3_expected_prev[26];
	end
	if (
		( D3_expected_prev[27] !== 1'bx ) && ( D3_prev[27] !== D3_expected_prev[27] )
		&& ((D3_expected_prev[27] !== last_D3_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[27] = D3_expected_prev[27];
	end
	if (
		( D3_expected_prev[28] !== 1'bx ) && ( D3_prev[28] !== D3_expected_prev[28] )
		&& ((D3_expected_prev[28] !== last_D3_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[28] = D3_expected_prev[28];
	end
	if (
		( D3_expected_prev[29] !== 1'bx ) && ( D3_prev[29] !== D3_expected_prev[29] )
		&& ((D3_expected_prev[29] !== last_D3_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[29] = D3_expected_prev[29];
	end
	if (
		( D3_expected_prev[30] !== 1'bx ) && ( D3_prev[30] !== D3_expected_prev[30] )
		&& ((D3_expected_prev[30] !== last_D3_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[30] = D3_expected_prev[30];
	end
	if (
		( D3_expected_prev[31] !== 1'bx ) && ( D3_prev[31] !== D3_expected_prev[31] )
		&& ((D3_expected_prev[31] !== last_D3_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[31] = D3_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module saida_de_dados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg OUT;
reg clock;
reg [31:0] dado_de_saida;
reg [25:0] endereco;
reg reset;
// wires                                               
wire [31:0] D1;
wire [31:0] D2;
wire [31:0] D3;

wire sampler;                             

// assign statements (if any)                          
saida_de_dados i1 (
// port map - connection between master ports and signals/registers   
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.OUT(OUT),
	.clock(clock),
	.dado_de_saida(dado_de_saida),
	.endereco(endereco),
	.reset(reset)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// OUT
always
begin
	OUT = 1'b0;
	OUT = #100000 1'b1;
	#100000;
end 
// dado_de_saida[ 31 ]
initial
begin
	dado_de_saida[31] = 1'b0;
end 
// dado_de_saida[ 30 ]
initial
begin
	dado_de_saida[30] = 1'b0;
end 
// dado_de_saida[ 29 ]
initial
begin
	dado_de_saida[29] = 1'b0;
end 
// dado_de_saida[ 28 ]
initial
begin
	dado_de_saida[28] = 1'b0;
end 
// dado_de_saida[ 27 ]
initial
begin
	dado_de_saida[27] = 1'b0;
end 
// dado_de_saida[ 26 ]
initial
begin
	dado_de_saida[26] = 1'b0;
end 
// dado_de_saida[ 25 ]
initial
begin
	dado_de_saida[25] = 1'b0;
end 
// dado_de_saida[ 24 ]
initial
begin
	dado_de_saida[24] = 1'b0;
end 
// dado_de_saida[ 23 ]
initial
begin
	dado_de_saida[23] = 1'b0;
end 
// dado_de_saida[ 22 ]
initial
begin
	dado_de_saida[22] = 1'b0;
end 
// dado_de_saida[ 21 ]
initial
begin
	dado_de_saida[21] = 1'b0;
end 
// dado_de_saida[ 20 ]
initial
begin
	dado_de_saida[20] = 1'b0;
end 
// dado_de_saida[ 19 ]
initial
begin
	dado_de_saida[19] = 1'b0;
end 
// dado_de_saida[ 18 ]
initial
begin
	dado_de_saida[18] = 1'b0;
end 
// dado_de_saida[ 17 ]
initial
begin
	dado_de_saida[17] = 1'b0;
end 
// dado_de_saida[ 16 ]
initial
begin
	dado_de_saida[16] = 1'b0;
end 
// dado_de_saida[ 15 ]
initial
begin
	dado_de_saida[15] = 1'b0;
end 
// dado_de_saida[ 14 ]
initial
begin
	dado_de_saida[14] = 1'b0;
end 
// dado_de_saida[ 13 ]
initial
begin
	dado_de_saida[13] = 1'b0;
end 
// dado_de_saida[ 12 ]
initial
begin
	dado_de_saida[12] = 1'b0;
end 
// dado_de_saida[ 11 ]
initial
begin
	dado_de_saida[11] = 1'b0;
end 
// dado_de_saida[ 10 ]
initial
begin
	dado_de_saida[10] = 1'b0;
end 
// dado_de_saida[ 9 ]
initial
begin
	dado_de_saida[9] = 1'b0;
end 
// dado_de_saida[ 8 ]
initial
begin
	dado_de_saida[8] = 1'b0;
end 
// dado_de_saida[ 7 ]
initial
begin
	dado_de_saida[7] = 1'b0;
	dado_de_saida[7] = #600000 1'b1;
end 
// dado_de_saida[ 6 ]
initial
begin
	dado_de_saida[6] = 1'b0;
	dado_de_saida[6] = #300000 1'b1;
	dado_de_saida[6] = #300000 1'b0;
	dado_de_saida[6] = #300000 1'b1;
end 
// dado_de_saida[ 5 ]
initial
begin
	repeat(3)
	begin
		dado_de_saida[5] = 1'b0;
		dado_de_saida[5] = #200000 1'b1;
		# 100000;
	end
	dado_de_saida[5] = 1'b0;
end 
// dado_de_saida[ 4 ]
initial
begin
	dado_de_saida[4] = 1'b0;
	# 100000;
	repeat(2)
	begin
		dado_de_saida[4] = 1'b1;
		dado_de_saida[4] = #100000 1'b0;
		# 200000;
	end
	dado_de_saida[4] = 1'b1;
	dado_de_saida[4] = #200000 1'b0;
end 
// dado_de_saida[ 3 ]
initial
begin
	dado_de_saida[3] = 1'b0;
	dado_de_saida[3] = #200000 1'b1;
	dado_de_saida[3] = #100000 1'b0;
	dado_de_saida[3] = #100000 1'b1;
	dado_de_saida[3] = #200000 1'b0;
	dado_de_saida[3] = #100000 1'b1;
	dado_de_saida[3] = #100000 1'b0;
end 
// dado_de_saida[ 2 ]
initial
begin
	dado_de_saida[2] = 1'b0;
	# 100000;
	repeat(2)
	begin
		dado_de_saida[2] = 1'b1;
		dado_de_saida[2] = #200000 1'b0;
		# 200000;
	end
	dado_de_saida[2] = 1'b1;
end 
// dado_de_saida[ 1 ]
always
begin
	dado_de_saida[1] = 1'b0;
	dado_de_saida[1] = #100000 1'b1;
	#100000;
end 
// dado_de_saida[ 0 ]
initial
begin
	dado_de_saida[0] = 1'b0;
end 
// endereco[ 25 ]
initial
begin
	endereco[25] = 1'b0;
end 
// endereco[ 24 ]
initial
begin
	endereco[24] = 1'b0;
end 
// endereco[ 23 ]
initial
begin
	endereco[23] = 1'b0;
end 
// endereco[ 22 ]
initial
begin
	endereco[22] = 1'b0;
end 
// endereco[ 21 ]
initial
begin
	endereco[21] = 1'b0;
end 
// endereco[ 20 ]
initial
begin
	endereco[20] = 1'b0;
end 
// endereco[ 19 ]
initial
begin
	endereco[19] = 1'b0;
end 
// endereco[ 18 ]
initial
begin
	endereco[18] = 1'b0;
end 
// endereco[ 17 ]
initial
begin
	endereco[17] = 1'b0;
end 
// endereco[ 16 ]
initial
begin
	endereco[16] = 1'b0;
end 
// endereco[ 15 ]
initial
begin
	endereco[15] = 1'b0;
end 
// endereco[ 14 ]
initial
begin
	endereco[14] = 1'b0;
end 
// endereco[ 13 ]
initial
begin
	endereco[13] = 1'b0;
end 
// endereco[ 12 ]
initial
begin
	endereco[12] = 1'b0;
end 
// endereco[ 11 ]
initial
begin
	endereco[11] = 1'b0;
end 
// endereco[ 10 ]
initial
begin
	endereco[10] = 1'b0;
end 
// endereco[ 9 ]
initial
begin
	endereco[9] = 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
end 
// endereco[ 3 ]
initial
begin
	endereco[3] = 1'b0;
end 
// endereco[ 2 ]
initial
begin
	endereco[2] = 1'b0;
	endereco[2] = #800000 1'b1;
end 
// endereco[ 1 ]
initial
begin
	endereco[1] = 1'b0;
	endereco[1] = #400000 1'b1;
	endereco[1] = #400000 1'b0;
end 
// endereco[ 0 ]
initial
begin
	repeat(2)
	begin
		endereco[0] = 1'b0;
		endereco[0] = #200000 1'b1;
		# 200000;
	end
	endereco[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #700000 1'b1;
end 

saida_de_dados_vlg_sample_tst tb_sample (
	.OUT(OUT),
	.clock(clock),
	.dado_de_saida(dado_de_saida),
	.endereco(endereco),
	.reset(reset),
	.sampler_tx(sampler)
);

saida_de_dados_vlg_check_tst tb_out(
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.sampler_rx(sampler)
);
endmodule

