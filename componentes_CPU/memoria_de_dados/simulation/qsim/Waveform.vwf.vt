// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2016 12:23:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memoria_de_dados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memoria_de_dados_vlg_sample_tst(
	clock,
	dado_Escrito,
	endereco,
	memRead,
	memWrite,
	sampler_tx
);
input  clock;
input [31:0] dado_Escrito;
input [25:0] endereco;
input  memRead;
input  memWrite;
output sampler_tx;

reg sample;
time current_time;
always @(clock or dado_Escrito or endereco or memRead or memWrite)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memoria_de_dados_vlg_check_tst (
	dado_Lido,
	sampler_rx
);
input [31:0] dado_Lido;
input sampler_rx;

reg [31:0] dado_Lido_expected;

reg [31:0] dado_Lido_prev;

reg [31:0] dado_Lido_expected_prev;

reg [31:0] last_dado_Lido_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	dado_Lido_prev = dado_Lido;
end

// update expected /o prevs

always @(trigger)
begin
	dado_Lido_expected_prev = dado_Lido_expected;
end


// expected dado_Lido[ 31 ]
initial
begin
	dado_Lido_expected[31] = 1'bX;
end 
// expected dado_Lido[ 30 ]
initial
begin
	dado_Lido_expected[30] = 1'bX;
end 
// expected dado_Lido[ 29 ]
initial
begin
	dado_Lido_expected[29] = 1'bX;
end 
// expected dado_Lido[ 28 ]
initial
begin
	dado_Lido_expected[28] = 1'bX;
end 
// expected dado_Lido[ 27 ]
initial
begin
	dado_Lido_expected[27] = 1'bX;
end 
// expected dado_Lido[ 26 ]
initial
begin
	dado_Lido_expected[26] = 1'bX;
end 
// expected dado_Lido[ 25 ]
initial
begin
	dado_Lido_expected[25] = 1'bX;
end 
// expected dado_Lido[ 24 ]
initial
begin
	dado_Lido_expected[24] = 1'bX;
end 
// expected dado_Lido[ 23 ]
initial
begin
	dado_Lido_expected[23] = 1'bX;
end 
// expected dado_Lido[ 22 ]
initial
begin
	dado_Lido_expected[22] = 1'bX;
end 
// expected dado_Lido[ 21 ]
initial
begin
	dado_Lido_expected[21] = 1'bX;
end 
// expected dado_Lido[ 20 ]
initial
begin
	dado_Lido_expected[20] = 1'bX;
end 
// expected dado_Lido[ 19 ]
initial
begin
	dado_Lido_expected[19] = 1'bX;
end 
// expected dado_Lido[ 18 ]
initial
begin
	dado_Lido_expected[18] = 1'bX;
end 
// expected dado_Lido[ 17 ]
initial
begin
	dado_Lido_expected[17] = 1'bX;
end 
// expected dado_Lido[ 16 ]
initial
begin
	dado_Lido_expected[16] = 1'bX;
end 
// expected dado_Lido[ 15 ]
initial
begin
	dado_Lido_expected[15] = 1'bX;
end 
// expected dado_Lido[ 14 ]
initial
begin
	dado_Lido_expected[14] = 1'bX;
end 
// expected dado_Lido[ 13 ]
initial
begin
	dado_Lido_expected[13] = 1'bX;
end 
// expected dado_Lido[ 12 ]
initial
begin
	dado_Lido_expected[12] = 1'bX;
end 
// expected dado_Lido[ 11 ]
initial
begin
	dado_Lido_expected[11] = 1'bX;
end 
// expected dado_Lido[ 10 ]
initial
begin
	dado_Lido_expected[10] = 1'bX;
end 
// expected dado_Lido[ 9 ]
initial
begin
	dado_Lido_expected[9] = 1'bX;
end 
// expected dado_Lido[ 8 ]
initial
begin
	dado_Lido_expected[8] = 1'bX;
end 
// expected dado_Lido[ 7 ]
initial
begin
	dado_Lido_expected[7] = 1'bX;
end 
// expected dado_Lido[ 6 ]
initial
begin
	dado_Lido_expected[6] = 1'bX;
end 
// expected dado_Lido[ 5 ]
initial
begin
	dado_Lido_expected[5] = 1'bX;
end 
// expected dado_Lido[ 4 ]
initial
begin
	dado_Lido_expected[4] = 1'bX;
end 
// expected dado_Lido[ 3 ]
initial
begin
	dado_Lido_expected[3] = 1'bX;
end 
// expected dado_Lido[ 2 ]
initial
begin
	dado_Lido_expected[2] = 1'bX;
end 
// expected dado_Lido[ 1 ]
initial
begin
	dado_Lido_expected[1] = 1'bX;
end 
// expected dado_Lido[ 0 ]
initial
begin
	dado_Lido_expected[0] = 1'bX;
end 
// generate trigger
always @(dado_Lido_expected or dado_Lido)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dado_Lido = %b | ",dado_Lido_expected_prev);
	$display("| real dado_Lido = %b | ",dado_Lido_prev);
`endif
	if (
		( dado_Lido_expected_prev[0] !== 1'bx ) && ( dado_Lido_prev[0] !== dado_Lido_expected_prev[0] )
		&& ((dado_Lido_expected_prev[0] !== last_dado_Lido_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[0] = dado_Lido_expected_prev[0];
	end
	if (
		( dado_Lido_expected_prev[1] !== 1'bx ) && ( dado_Lido_prev[1] !== dado_Lido_expected_prev[1] )
		&& ((dado_Lido_expected_prev[1] !== last_dado_Lido_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[1] = dado_Lido_expected_prev[1];
	end
	if (
		( dado_Lido_expected_prev[2] !== 1'bx ) && ( dado_Lido_prev[2] !== dado_Lido_expected_prev[2] )
		&& ((dado_Lido_expected_prev[2] !== last_dado_Lido_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[2] = dado_Lido_expected_prev[2];
	end
	if (
		( dado_Lido_expected_prev[3] !== 1'bx ) && ( dado_Lido_prev[3] !== dado_Lido_expected_prev[3] )
		&& ((dado_Lido_expected_prev[3] !== last_dado_Lido_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[3] = dado_Lido_expected_prev[3];
	end
	if (
		( dado_Lido_expected_prev[4] !== 1'bx ) && ( dado_Lido_prev[4] !== dado_Lido_expected_prev[4] )
		&& ((dado_Lido_expected_prev[4] !== last_dado_Lido_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[4] = dado_Lido_expected_prev[4];
	end
	if (
		( dado_Lido_expected_prev[5] !== 1'bx ) && ( dado_Lido_prev[5] !== dado_Lido_expected_prev[5] )
		&& ((dado_Lido_expected_prev[5] !== last_dado_Lido_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[5] = dado_Lido_expected_prev[5];
	end
	if (
		( dado_Lido_expected_prev[6] !== 1'bx ) && ( dado_Lido_prev[6] !== dado_Lido_expected_prev[6] )
		&& ((dado_Lido_expected_prev[6] !== last_dado_Lido_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[6] = dado_Lido_expected_prev[6];
	end
	if (
		( dado_Lido_expected_prev[7] !== 1'bx ) && ( dado_Lido_prev[7] !== dado_Lido_expected_prev[7] )
		&& ((dado_Lido_expected_prev[7] !== last_dado_Lido_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[7] = dado_Lido_expected_prev[7];
	end
	if (
		( dado_Lido_expected_prev[8] !== 1'bx ) && ( dado_Lido_prev[8] !== dado_Lido_expected_prev[8] )
		&& ((dado_Lido_expected_prev[8] !== last_dado_Lido_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[8] = dado_Lido_expected_prev[8];
	end
	if (
		( dado_Lido_expected_prev[9] !== 1'bx ) && ( dado_Lido_prev[9] !== dado_Lido_expected_prev[9] )
		&& ((dado_Lido_expected_prev[9] !== last_dado_Lido_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[9] = dado_Lido_expected_prev[9];
	end
	if (
		( dado_Lido_expected_prev[10] !== 1'bx ) && ( dado_Lido_prev[10] !== dado_Lido_expected_prev[10] )
		&& ((dado_Lido_expected_prev[10] !== last_dado_Lido_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[10] = dado_Lido_expected_prev[10];
	end
	if (
		( dado_Lido_expected_prev[11] !== 1'bx ) && ( dado_Lido_prev[11] !== dado_Lido_expected_prev[11] )
		&& ((dado_Lido_expected_prev[11] !== last_dado_Lido_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[11] = dado_Lido_expected_prev[11];
	end
	if (
		( dado_Lido_expected_prev[12] !== 1'bx ) && ( dado_Lido_prev[12] !== dado_Lido_expected_prev[12] )
		&& ((dado_Lido_expected_prev[12] !== last_dado_Lido_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[12] = dado_Lido_expected_prev[12];
	end
	if (
		( dado_Lido_expected_prev[13] !== 1'bx ) && ( dado_Lido_prev[13] !== dado_Lido_expected_prev[13] )
		&& ((dado_Lido_expected_prev[13] !== last_dado_Lido_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[13] = dado_Lido_expected_prev[13];
	end
	if (
		( dado_Lido_expected_prev[14] !== 1'bx ) && ( dado_Lido_prev[14] !== dado_Lido_expected_prev[14] )
		&& ((dado_Lido_expected_prev[14] !== last_dado_Lido_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[14] = dado_Lido_expected_prev[14];
	end
	if (
		( dado_Lido_expected_prev[15] !== 1'bx ) && ( dado_Lido_prev[15] !== dado_Lido_expected_prev[15] )
		&& ((dado_Lido_expected_prev[15] !== last_dado_Lido_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[15] = dado_Lido_expected_prev[15];
	end
	if (
		( dado_Lido_expected_prev[16] !== 1'bx ) && ( dado_Lido_prev[16] !== dado_Lido_expected_prev[16] )
		&& ((dado_Lido_expected_prev[16] !== last_dado_Lido_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[16] = dado_Lido_expected_prev[16];
	end
	if (
		( dado_Lido_expected_prev[17] !== 1'bx ) && ( dado_Lido_prev[17] !== dado_Lido_expected_prev[17] )
		&& ((dado_Lido_expected_prev[17] !== last_dado_Lido_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[17] = dado_Lido_expected_prev[17];
	end
	if (
		( dado_Lido_expected_prev[18] !== 1'bx ) && ( dado_Lido_prev[18] !== dado_Lido_expected_prev[18] )
		&& ((dado_Lido_expected_prev[18] !== last_dado_Lido_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[18] = dado_Lido_expected_prev[18];
	end
	if (
		( dado_Lido_expected_prev[19] !== 1'bx ) && ( dado_Lido_prev[19] !== dado_Lido_expected_prev[19] )
		&& ((dado_Lido_expected_prev[19] !== last_dado_Lido_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[19] = dado_Lido_expected_prev[19];
	end
	if (
		( dado_Lido_expected_prev[20] !== 1'bx ) && ( dado_Lido_prev[20] !== dado_Lido_expected_prev[20] )
		&& ((dado_Lido_expected_prev[20] !== last_dado_Lido_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[20] = dado_Lido_expected_prev[20];
	end
	if (
		( dado_Lido_expected_prev[21] !== 1'bx ) && ( dado_Lido_prev[21] !== dado_Lido_expected_prev[21] )
		&& ((dado_Lido_expected_prev[21] !== last_dado_Lido_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[21] = dado_Lido_expected_prev[21];
	end
	if (
		( dado_Lido_expected_prev[22] !== 1'bx ) && ( dado_Lido_prev[22] !== dado_Lido_expected_prev[22] )
		&& ((dado_Lido_expected_prev[22] !== last_dado_Lido_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[22] = dado_Lido_expected_prev[22];
	end
	if (
		( dado_Lido_expected_prev[23] !== 1'bx ) && ( dado_Lido_prev[23] !== dado_Lido_expected_prev[23] )
		&& ((dado_Lido_expected_prev[23] !== last_dado_Lido_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[23] = dado_Lido_expected_prev[23];
	end
	if (
		( dado_Lido_expected_prev[24] !== 1'bx ) && ( dado_Lido_prev[24] !== dado_Lido_expected_prev[24] )
		&& ((dado_Lido_expected_prev[24] !== last_dado_Lido_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[24] = dado_Lido_expected_prev[24];
	end
	if (
		( dado_Lido_expected_prev[25] !== 1'bx ) && ( dado_Lido_prev[25] !== dado_Lido_expected_prev[25] )
		&& ((dado_Lido_expected_prev[25] !== last_dado_Lido_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[25] = dado_Lido_expected_prev[25];
	end
	if (
		( dado_Lido_expected_prev[26] !== 1'bx ) && ( dado_Lido_prev[26] !== dado_Lido_expected_prev[26] )
		&& ((dado_Lido_expected_prev[26] !== last_dado_Lido_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[26] = dado_Lido_expected_prev[26];
	end
	if (
		( dado_Lido_expected_prev[27] !== 1'bx ) && ( dado_Lido_prev[27] !== dado_Lido_expected_prev[27] )
		&& ((dado_Lido_expected_prev[27] !== last_dado_Lido_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[27] = dado_Lido_expected_prev[27];
	end
	if (
		( dado_Lido_expected_prev[28] !== 1'bx ) && ( dado_Lido_prev[28] !== dado_Lido_expected_prev[28] )
		&& ((dado_Lido_expected_prev[28] !== last_dado_Lido_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[28] = dado_Lido_expected_prev[28];
	end
	if (
		( dado_Lido_expected_prev[29] !== 1'bx ) && ( dado_Lido_prev[29] !== dado_Lido_expected_prev[29] )
		&& ((dado_Lido_expected_prev[29] !== last_dado_Lido_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[29] = dado_Lido_expected_prev[29];
	end
	if (
		( dado_Lido_expected_prev[30] !== 1'bx ) && ( dado_Lido_prev[30] !== dado_Lido_expected_prev[30] )
		&& ((dado_Lido_expected_prev[30] !== last_dado_Lido_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[30] = dado_Lido_expected_prev[30];
	end
	if (
		( dado_Lido_expected_prev[31] !== 1'bx ) && ( dado_Lido_prev[31] !== dado_Lido_expected_prev[31] )
		&& ((dado_Lido_expected_prev[31] !== last_dado_Lido_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado_Lido[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_Lido_expected_prev);
		$display ("     Real value = %b", dado_Lido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_Lido_exp[31] = dado_Lido_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memoria_de_dados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] dado_Escrito;
reg [25:0] endereco;
reg memRead;
reg memWrite;
// wires                                               
wire [31:0] dado_Lido;

wire sampler;                             

// assign statements (if any)                          
memoria_de_dados i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dado_Escrito(dado_Escrito),
	.dado_Lido(dado_Lido),
	.endereco(endereco),
	.memRead(memRead),
	.memWrite(memWrite)
);

// clock
initial
begin
	repeat(16)
	begin
		clock = 1'b0;
		clock = #30000 1'b1;
		# 30000;
	end
	clock = 1'b0;
	clock = #30000 1'b1;
end 

// memWrite
initial
begin
	memWrite = 1'b1;
	memWrite = #500000 1'b0;
end 

// memRead
always
begin
	memRead = 1'b0;
	memRead = #500000 1'b1;
	#500000;
end 
// dado_Escrito[ 31 ]
initial
begin
	dado_Escrito[31] = 1'b0;
end 
// dado_Escrito[ 30 ]
initial
begin
	dado_Escrito[30] = 1'b0;
end 
// dado_Escrito[ 29 ]
initial
begin
	dado_Escrito[29] = 1'b0;
end 
// dado_Escrito[ 28 ]
initial
begin
	dado_Escrito[28] = 1'b0;
end 
// dado_Escrito[ 27 ]
initial
begin
	dado_Escrito[27] = 1'b0;
end 
// dado_Escrito[ 26 ]
initial
begin
	dado_Escrito[26] = 1'b0;
end 
// dado_Escrito[ 25 ]
initial
begin
	dado_Escrito[25] = 1'b0;
end 
// dado_Escrito[ 24 ]
initial
begin
	dado_Escrito[24] = 1'b0;
end 
// dado_Escrito[ 23 ]
initial
begin
	dado_Escrito[23] = 1'b0;
end 
// dado_Escrito[ 22 ]
initial
begin
	dado_Escrito[22] = 1'b0;
end 
// dado_Escrito[ 21 ]
initial
begin
	dado_Escrito[21] = 1'b0;
end 
// dado_Escrito[ 20 ]
initial
begin
	dado_Escrito[20] = 1'b0;
end 
// dado_Escrito[ 19 ]
initial
begin
	dado_Escrito[19] = 1'b0;
end 
// dado_Escrito[ 18 ]
initial
begin
	dado_Escrito[18] = 1'b0;
end 
// dado_Escrito[ 17 ]
initial
begin
	dado_Escrito[17] = 1'b0;
end 
// dado_Escrito[ 16 ]
initial
begin
	dado_Escrito[16] = 1'b0;
end 
// dado_Escrito[ 15 ]
initial
begin
	dado_Escrito[15] = 1'b0;
end 
// dado_Escrito[ 14 ]
initial
begin
	dado_Escrito[14] = 1'b0;
end 
// dado_Escrito[ 13 ]
initial
begin
	dado_Escrito[13] = 1'b0;
end 
// dado_Escrito[ 12 ]
initial
begin
	dado_Escrito[12] = 1'b0;
end 
// dado_Escrito[ 11 ]
initial
begin
	dado_Escrito[11] = 1'b0;
end 
// dado_Escrito[ 10 ]
initial
begin
	dado_Escrito[10] = 1'b0;
end 
// dado_Escrito[ 9 ]
initial
begin
	dado_Escrito[9] = 1'b0;
end 
// dado_Escrito[ 8 ]
initial
begin
	dado_Escrito[8] = 1'b0;
end 
// dado_Escrito[ 7 ]
initial
begin
	dado_Escrito[7] = 1'b0;
	dado_Escrito[7] = #720000 1'b1;
end 
// dado_Escrito[ 6 ]
initial
begin
	dado_Escrito[6] = 1'b0;
	dado_Escrito[6] = #360000 1'b1;
	dado_Escrito[6] = #360000 1'b0;
end 
// dado_Escrito[ 5 ]
initial
begin
	repeat(2)
	begin
		dado_Escrito[5] = 1'b0;
		dado_Escrito[5] = #180000 1'b1;
		# 180000;
	end
	dado_Escrito[5] = 1'b0;
	dado_Escrito[5] = #180000 1'b1;
end 
// dado_Escrito[ 4 ]
initial
begin
	repeat(3)
	begin
		dado_Escrito[4] = 1'b0;
		dado_Escrito[4] = #60000 1'b1;
		# 120000;
	end
	repeat(2)
	begin
		dado_Escrito[4] = 1'b0;
		dado_Escrito[4] = #120000 1'b1;
		# 60000;
	end
	dado_Escrito[4] = 1'b0;
end 
// dado_Escrito[ 3 ]
initial
begin
	repeat(2)
	begin
		dado_Escrito[3] = 1'b1;
		dado_Escrito[3] = #60000 1'b0;
		dado_Escrito[3] = #60000 1'b1;
		dado_Escrito[3] = #120000 1'b0;
		dado_Escrito[3] = #60000 1'b1;
		dado_Escrito[3] = #60000 1'b0;
		# 120000;
	end
	dado_Escrito[3] = 1'b1;
end 
// dado_Escrito[ 2 ]
initial
begin
	dado_Escrito[2] = 1'b0;
	# 60000;
	repeat(3)
	begin
		dado_Escrito[2] = 1'b1;
		dado_Escrito[2] = #120000 1'b0;
		# 120000;
	end
	dado_Escrito[2] = 1'b1;
	dado_Escrito[2] = #120000 1'b0;
end 
// dado_Escrito[ 1 ]
initial
begin
	repeat(8)
	begin
		dado_Escrito[1] = 1'b1;
		dado_Escrito[1] = #60000 1'b0;
		# 60000;
	end
	dado_Escrito[1] = 1'b1;
end 
// dado_Escrito[ 0 ]
initial
begin
	dado_Escrito[0] = 1'b0;
end 
// endereco[ 25 ]
initial
begin
	endereco[25] = 1'b0;
end 
// endereco[ 24 ]
initial
begin
	endereco[24] = 1'b0;
end 
// endereco[ 23 ]
initial
begin
	endereco[23] = 1'b0;
end 
// endereco[ 22 ]
initial
begin
	endereco[22] = 1'b0;
end 
// endereco[ 21 ]
initial
begin
	endereco[21] = 1'b0;
end 
// endereco[ 20 ]
initial
begin
	endereco[20] = 1'b0;
end 
// endereco[ 19 ]
initial
begin
	endereco[19] = 1'b0;
end 
// endereco[ 18 ]
initial
begin
	endereco[18] = 1'b0;
end 
// endereco[ 17 ]
initial
begin
	endereco[17] = 1'b0;
end 
// endereco[ 16 ]
initial
begin
	endereco[16] = 1'b0;
end 
// endereco[ 15 ]
initial
begin
	endereco[15] = 1'b0;
end 
// endereco[ 14 ]
initial
begin
	endereco[14] = 1'b0;
end 
// endereco[ 13 ]
initial
begin
	endereco[13] = 1'b0;
end 
// endereco[ 12 ]
initial
begin
	endereco[12] = 1'b0;
end 
// endereco[ 11 ]
initial
begin
	endereco[11] = 1'b0;
end 
// endereco[ 10 ]
initial
begin
	endereco[10] = 1'b0;
end 
// endereco[ 9 ]
initial
begin
	endereco[9] = 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
end 
// endereco[ 3 ]
initial
begin
	endereco[3] = 1'b0;
	endereco[3] = #480000 1'b1;
	endereco[3] = #60000 1'b0;
	endereco[3] = #120000 1'b1;
	endereco[3] = #60000 1'b0;
end 
// endereco[ 2 ]
initial
begin
	endereco[2] = 1'b0;
	endereco[2] = #240000 1'b1;
	endereco[2] = #240000 1'b0;
	endereco[2] = #360000 1'b1;
end 
// endereco[ 1 ]
initial
begin
	repeat(2)
	begin
		endereco[1] = 1'b0;
		endereco[1] = #120000 1'b1;
		# 120000;
	end
	endereco[1] = 1'b0;
	endereco[1] = #180000 1'b1;
	endereco[1] = #180000 1'b0;
	endereco[1] = #120000 1'b1;
end 
// endereco[ 0 ]
initial
begin
	repeat(4)
	begin
		endereco[0] = 1'b0;
		endereco[0] = #60000 1'b1;
		# 60000;
	end
	endereco[0] = 1'b0;
	endereco[0] = #120000 1'b1;
	endereco[0] = #120000 1'b0;
	endereco[0] = #60000 1'b1;
	endereco[0] = #60000 1'b0;
	endereco[0] = #60000 1'b1;
	endereco[0] = #60000 1'b0;
end 

memoria_de_dados_vlg_sample_tst tb_sample (
	.clock(clock),
	.dado_Escrito(dado_Escrito),
	.endereco(endereco),
	.memRead(memRead),
	.memWrite(memWrite),
	.sampler_tx(sampler)
);

memoria_de_dados_vlg_check_tst tb_out(
	.dado_Lido(dado_Lido),
	.sampler_rx(sampler)
);
endmodule

