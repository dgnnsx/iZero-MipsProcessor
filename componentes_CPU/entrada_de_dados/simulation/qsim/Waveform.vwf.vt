// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2016 19:24:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    entrada_de_dados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module entrada_de_dados_vlg_sample_tst(
	IN,
	chaves,
	sampler_tx
);
input  IN;
input [7:0] chaves;
output sampler_tx;

reg sample;
time current_time;
always @(IN or chaves)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module entrada_de_dados_vlg_check_tst (
	dado,
	flag_IN,
	sampler_rx
);
input [31:0] dado;
input  flag_IN;
input sampler_rx;

reg [31:0] dado_expected;
reg  flag_IN_expected;

reg [31:0] dado_prev;
reg  flag_IN_prev;

reg [31:0] dado_expected_prev;
reg  flag_IN_expected_prev;

reg [31:0] last_dado_exp;
reg  last_flag_IN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	dado_prev = dado;
	flag_IN_prev = flag_IN;
end

// update expected /o prevs

always @(trigger)
begin
	dado_expected_prev = dado_expected;
	flag_IN_expected_prev = flag_IN_expected;
end


// expected dado[ 31 ]
initial
begin
	dado_expected[31] = 1'bX;
end 
// expected dado[ 30 ]
initial
begin
	dado_expected[30] = 1'bX;
end 
// expected dado[ 29 ]
initial
begin
	dado_expected[29] = 1'bX;
end 
// expected dado[ 28 ]
initial
begin
	dado_expected[28] = 1'bX;
end 
// expected dado[ 27 ]
initial
begin
	dado_expected[27] = 1'bX;
end 
// expected dado[ 26 ]
initial
begin
	dado_expected[26] = 1'bX;
end 
// expected dado[ 25 ]
initial
begin
	dado_expected[25] = 1'bX;
end 
// expected dado[ 24 ]
initial
begin
	dado_expected[24] = 1'bX;
end 
// expected dado[ 23 ]
initial
begin
	dado_expected[23] = 1'bX;
end 
// expected dado[ 22 ]
initial
begin
	dado_expected[22] = 1'bX;
end 
// expected dado[ 21 ]
initial
begin
	dado_expected[21] = 1'bX;
end 
// expected dado[ 20 ]
initial
begin
	dado_expected[20] = 1'bX;
end 
// expected dado[ 19 ]
initial
begin
	dado_expected[19] = 1'bX;
end 
// expected dado[ 18 ]
initial
begin
	dado_expected[18] = 1'bX;
end 
// expected dado[ 17 ]
initial
begin
	dado_expected[17] = 1'bX;
end 
// expected dado[ 16 ]
initial
begin
	dado_expected[16] = 1'bX;
end 
// expected dado[ 15 ]
initial
begin
	dado_expected[15] = 1'bX;
end 
// expected dado[ 14 ]
initial
begin
	dado_expected[14] = 1'bX;
end 
// expected dado[ 13 ]
initial
begin
	dado_expected[13] = 1'bX;
end 
// expected dado[ 12 ]
initial
begin
	dado_expected[12] = 1'bX;
end 
// expected dado[ 11 ]
initial
begin
	dado_expected[11] = 1'bX;
end 
// expected dado[ 10 ]
initial
begin
	dado_expected[10] = 1'bX;
end 
// expected dado[ 9 ]
initial
begin
	dado_expected[9] = 1'bX;
end 
// expected dado[ 8 ]
initial
begin
	dado_expected[8] = 1'bX;
end 
// expected dado[ 7 ]
initial
begin
	dado_expected[7] = 1'bX;
end 
// expected dado[ 6 ]
initial
begin
	dado_expected[6] = 1'bX;
end 
// expected dado[ 5 ]
initial
begin
	dado_expected[5] = 1'bX;
end 
// expected dado[ 4 ]
initial
begin
	dado_expected[4] = 1'bX;
end 
// expected dado[ 3 ]
initial
begin
	dado_expected[3] = 1'bX;
end 
// expected dado[ 2 ]
initial
begin
	dado_expected[2] = 1'bX;
end 
// expected dado[ 1 ]
initial
begin
	dado_expected[1] = 1'bX;
end 
// expected dado[ 0 ]
initial
begin
	dado_expected[0] = 1'bX;
end 

// expected flag_IN
initial
begin
	flag_IN_expected = 1'bX;
end 
// generate trigger
always @(dado_expected or dado or flag_IN_expected or flag_IN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dado = %b | expected flag_IN = %b | ",dado_expected_prev,flag_IN_expected_prev);
	$display("| real dado = %b | real flag_IN = %b | ",dado_prev,flag_IN_prev);
`endif
	if (
		( dado_expected_prev[0] !== 1'bx ) && ( dado_prev[0] !== dado_expected_prev[0] )
		&& ((dado_expected_prev[0] !== last_dado_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[0] = dado_expected_prev[0];
	end
	if (
		( dado_expected_prev[1] !== 1'bx ) && ( dado_prev[1] !== dado_expected_prev[1] )
		&& ((dado_expected_prev[1] !== last_dado_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[1] = dado_expected_prev[1];
	end
	if (
		( dado_expected_prev[2] !== 1'bx ) && ( dado_prev[2] !== dado_expected_prev[2] )
		&& ((dado_expected_prev[2] !== last_dado_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[2] = dado_expected_prev[2];
	end
	if (
		( dado_expected_prev[3] !== 1'bx ) && ( dado_prev[3] !== dado_expected_prev[3] )
		&& ((dado_expected_prev[3] !== last_dado_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[3] = dado_expected_prev[3];
	end
	if (
		( dado_expected_prev[4] !== 1'bx ) && ( dado_prev[4] !== dado_expected_prev[4] )
		&& ((dado_expected_prev[4] !== last_dado_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[4] = dado_expected_prev[4];
	end
	if (
		( dado_expected_prev[5] !== 1'bx ) && ( dado_prev[5] !== dado_expected_prev[5] )
		&& ((dado_expected_prev[5] !== last_dado_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[5] = dado_expected_prev[5];
	end
	if (
		( dado_expected_prev[6] !== 1'bx ) && ( dado_prev[6] !== dado_expected_prev[6] )
		&& ((dado_expected_prev[6] !== last_dado_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[6] = dado_expected_prev[6];
	end
	if (
		( dado_expected_prev[7] !== 1'bx ) && ( dado_prev[7] !== dado_expected_prev[7] )
		&& ((dado_expected_prev[7] !== last_dado_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[7] = dado_expected_prev[7];
	end
	if (
		( dado_expected_prev[8] !== 1'bx ) && ( dado_prev[8] !== dado_expected_prev[8] )
		&& ((dado_expected_prev[8] !== last_dado_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[8] = dado_expected_prev[8];
	end
	if (
		( dado_expected_prev[9] !== 1'bx ) && ( dado_prev[9] !== dado_expected_prev[9] )
		&& ((dado_expected_prev[9] !== last_dado_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[9] = dado_expected_prev[9];
	end
	if (
		( dado_expected_prev[10] !== 1'bx ) && ( dado_prev[10] !== dado_expected_prev[10] )
		&& ((dado_expected_prev[10] !== last_dado_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[10] = dado_expected_prev[10];
	end
	if (
		( dado_expected_prev[11] !== 1'bx ) && ( dado_prev[11] !== dado_expected_prev[11] )
		&& ((dado_expected_prev[11] !== last_dado_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[11] = dado_expected_prev[11];
	end
	if (
		( dado_expected_prev[12] !== 1'bx ) && ( dado_prev[12] !== dado_expected_prev[12] )
		&& ((dado_expected_prev[12] !== last_dado_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[12] = dado_expected_prev[12];
	end
	if (
		( dado_expected_prev[13] !== 1'bx ) && ( dado_prev[13] !== dado_expected_prev[13] )
		&& ((dado_expected_prev[13] !== last_dado_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[13] = dado_expected_prev[13];
	end
	if (
		( dado_expected_prev[14] !== 1'bx ) && ( dado_prev[14] !== dado_expected_prev[14] )
		&& ((dado_expected_prev[14] !== last_dado_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[14] = dado_expected_prev[14];
	end
	if (
		( dado_expected_prev[15] !== 1'bx ) && ( dado_prev[15] !== dado_expected_prev[15] )
		&& ((dado_expected_prev[15] !== last_dado_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[15] = dado_expected_prev[15];
	end
	if (
		( dado_expected_prev[16] !== 1'bx ) && ( dado_prev[16] !== dado_expected_prev[16] )
		&& ((dado_expected_prev[16] !== last_dado_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[16] = dado_expected_prev[16];
	end
	if (
		( dado_expected_prev[17] !== 1'bx ) && ( dado_prev[17] !== dado_expected_prev[17] )
		&& ((dado_expected_prev[17] !== last_dado_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[17] = dado_expected_prev[17];
	end
	if (
		( dado_expected_prev[18] !== 1'bx ) && ( dado_prev[18] !== dado_expected_prev[18] )
		&& ((dado_expected_prev[18] !== last_dado_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[18] = dado_expected_prev[18];
	end
	if (
		( dado_expected_prev[19] !== 1'bx ) && ( dado_prev[19] !== dado_expected_prev[19] )
		&& ((dado_expected_prev[19] !== last_dado_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[19] = dado_expected_prev[19];
	end
	if (
		( dado_expected_prev[20] !== 1'bx ) && ( dado_prev[20] !== dado_expected_prev[20] )
		&& ((dado_expected_prev[20] !== last_dado_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[20] = dado_expected_prev[20];
	end
	if (
		( dado_expected_prev[21] !== 1'bx ) && ( dado_prev[21] !== dado_expected_prev[21] )
		&& ((dado_expected_prev[21] !== last_dado_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[21] = dado_expected_prev[21];
	end
	if (
		( dado_expected_prev[22] !== 1'bx ) && ( dado_prev[22] !== dado_expected_prev[22] )
		&& ((dado_expected_prev[22] !== last_dado_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[22] = dado_expected_prev[22];
	end
	if (
		( dado_expected_prev[23] !== 1'bx ) && ( dado_prev[23] !== dado_expected_prev[23] )
		&& ((dado_expected_prev[23] !== last_dado_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[23] = dado_expected_prev[23];
	end
	if (
		( dado_expected_prev[24] !== 1'bx ) && ( dado_prev[24] !== dado_expected_prev[24] )
		&& ((dado_expected_prev[24] !== last_dado_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[24] = dado_expected_prev[24];
	end
	if (
		( dado_expected_prev[25] !== 1'bx ) && ( dado_prev[25] !== dado_expected_prev[25] )
		&& ((dado_expected_prev[25] !== last_dado_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[25] = dado_expected_prev[25];
	end
	if (
		( dado_expected_prev[26] !== 1'bx ) && ( dado_prev[26] !== dado_expected_prev[26] )
		&& ((dado_expected_prev[26] !== last_dado_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[26] = dado_expected_prev[26];
	end
	if (
		( dado_expected_prev[27] !== 1'bx ) && ( dado_prev[27] !== dado_expected_prev[27] )
		&& ((dado_expected_prev[27] !== last_dado_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[27] = dado_expected_prev[27];
	end
	if (
		( dado_expected_prev[28] !== 1'bx ) && ( dado_prev[28] !== dado_expected_prev[28] )
		&& ((dado_expected_prev[28] !== last_dado_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[28] = dado_expected_prev[28];
	end
	if (
		( dado_expected_prev[29] !== 1'bx ) && ( dado_prev[29] !== dado_expected_prev[29] )
		&& ((dado_expected_prev[29] !== last_dado_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[29] = dado_expected_prev[29];
	end
	if (
		( dado_expected_prev[30] !== 1'bx ) && ( dado_prev[30] !== dado_expected_prev[30] )
		&& ((dado_expected_prev[30] !== last_dado_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[30] = dado_expected_prev[30];
	end
	if (
		( dado_expected_prev[31] !== 1'bx ) && ( dado_prev[31] !== dado_expected_prev[31] )
		&& ((dado_expected_prev[31] !== last_dado_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dado[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dado_expected_prev);
		$display ("     Real value = %b", dado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dado_exp[31] = dado_expected_prev[31];
	end
	if (
		( flag_IN_expected_prev !== 1'bx ) && ( flag_IN_prev !== flag_IN_expected_prev )
		&& ((flag_IN_expected_prev !== last_flag_IN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_IN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_IN_expected_prev);
		$display ("     Real value = %b", flag_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_flag_IN_exp = flag_IN_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module entrada_de_dados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg IN;
reg [7:0] chaves;
// wires                                               
wire [31:0] dado;
wire flag_IN;

wire sampler;                             

// assign statements (if any)                          
entrada_de_dados i1 (
// port map - connection between master ports and signals/registers   
	.IN(IN),
	.chaves(chaves),
	.dado(dado),
	.flag_IN(flag_IN)
);

// IN
always
begin
	IN = 1'b0;
	IN = #50000 1'b1;
	#50000;
end 
// chaves[ 7 ]
initial
begin
	chaves[7] = 1'b0;
end 
// chaves[ 6 ]
initial
begin
	chaves[6] = 1'b0;
end 
// chaves[ 5 ]
initial
begin
	chaves[5] = 1'b0;
end 
// chaves[ 4 ]
initial
begin
	chaves[4] = 1'b0;
end 
// chaves[ 3 ]
initial
begin
	chaves[3] = 1'b1;
end 
// chaves[ 2 ]
initial
begin
	chaves[2] = 1'b0;
end 
// chaves[ 1 ]
initial
begin
	chaves[1] = 1'b1;
end 
// chaves[ 0 ]
initial
begin
	chaves[0] = 1'b1;
end 

entrada_de_dados_vlg_sample_tst tb_sample (
	.IN(IN),
	.chaves(chaves),
	.sampler_tx(sampler)
);

entrada_de_dados_vlg_check_tst tb_out(
	.dado(dado),
	.flag_IN(flag_IN),
	.sampler_rx(sampler)
);
endmodule

