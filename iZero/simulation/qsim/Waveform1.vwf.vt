// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2017 10:48:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    iZero
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module iZero_vlg_sample_tst(
	clock,
	IN_BUTTON,
	reset,
	SLIDE_SWITCHES,
	sampler_tx
);
input  clock;
input  IN_BUTTON;
input  reset;
input [7:0] SLIDE_SWITCHES;
output sampler_tx;

reg sample;
time current_time;
always @(clock or IN_BUTTON or reset or SLIDE_SWITCHES)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module iZero_vlg_check_tst (
	D1_DEZENA,
	D1_SINAL,
	D1_UNIDADE,
	D2_DEZENA,
	D2_SINAL,
	D2_UNIDADE,
	D3_CENTENA,
	D3_DEZENA,
	D3_MILHAR,
	D3_SINAL,
	D3_UNIDADE,
	instrucao,
	leds_SLIDE_SWITCHES,
	ula_res,
	sampler_rx
);
input [6:0] D1_DEZENA;
input  D1_SINAL;
input [6:0] D1_UNIDADE;
input [6:0] D2_DEZENA;
input  D2_SINAL;
input [6:0] D2_UNIDADE;
input [6:0] D3_CENTENA;
input [6:0] D3_DEZENA;
input [6:0] D3_MILHAR;
input  D3_SINAL;
input [6:0] D3_UNIDADE;
input [31:0] instrucao;
input [7:0] leds_SLIDE_SWITCHES;
input [31:0] ula_res;
input sampler_rx;

reg [6:0] D1_DEZENA_expected;
reg  D1_SINAL_expected;
reg [6:0] D1_UNIDADE_expected;
reg [6:0] D2_DEZENA_expected;
reg  D2_SINAL_expected;
reg [6:0] D2_UNIDADE_expected;
reg [6:0] D3_CENTENA_expected;
reg [6:0] D3_DEZENA_expected;
reg [6:0] D3_MILHAR_expected;
reg  D3_SINAL_expected;
reg [6:0] D3_UNIDADE_expected;
reg [31:0] instrucao_expected;
reg [7:0] leds_SLIDE_SWITCHES_expected;
reg [31:0] ula_res_expected;

reg [6:0] D1_DEZENA_prev;
reg  D1_SINAL_prev;
reg [6:0] D1_UNIDADE_prev;
reg [6:0] D2_DEZENA_prev;
reg  D2_SINAL_prev;
reg [6:0] D2_UNIDADE_prev;
reg [6:0] D3_CENTENA_prev;
reg [6:0] D3_DEZENA_prev;
reg [6:0] D3_MILHAR_prev;
reg  D3_SINAL_prev;
reg [6:0] D3_UNIDADE_prev;
reg [31:0] instrucao_prev;
reg [7:0] leds_SLIDE_SWITCHES_prev;
reg [31:0] ula_res_prev;

reg [6:0] D1_DEZENA_expected_prev;
reg  D1_SINAL_expected_prev;
reg [6:0] D1_UNIDADE_expected_prev;
reg [6:0] D2_DEZENA_expected_prev;
reg  D2_SINAL_expected_prev;
reg [6:0] D2_UNIDADE_expected_prev;
reg [6:0] D3_CENTENA_expected_prev;
reg [6:0] D3_DEZENA_expected_prev;
reg [6:0] D3_MILHAR_expected_prev;
reg  D3_SINAL_expected_prev;
reg [6:0] D3_UNIDADE_expected_prev;
reg [31:0] instrucao_expected_prev;
reg [7:0] leds_SLIDE_SWITCHES_expected_prev;
reg [31:0] ula_res_expected_prev;

reg [6:0] last_D1_DEZENA_exp;
reg  last_D1_SINAL_exp;
reg [6:0] last_D1_UNIDADE_exp;
reg [6:0] last_D2_DEZENA_exp;
reg  last_D2_SINAL_exp;
reg [6:0] last_D2_UNIDADE_exp;
reg [6:0] last_D3_CENTENA_exp;
reg [6:0] last_D3_DEZENA_exp;
reg [6:0] last_D3_MILHAR_exp;
reg  last_D3_SINAL_exp;
reg [6:0] last_D3_UNIDADE_exp;
reg [31:0] last_instrucao_exp;
reg [7:0] last_leds_SLIDE_SWITCHES_exp;
reg [31:0] last_ula_res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	D1_DEZENA_prev = D1_DEZENA;
	D1_SINAL_prev = D1_SINAL;
	D1_UNIDADE_prev = D1_UNIDADE;
	D2_DEZENA_prev = D2_DEZENA;
	D2_SINAL_prev = D2_SINAL;
	D2_UNIDADE_prev = D2_UNIDADE;
	D3_CENTENA_prev = D3_CENTENA;
	D3_DEZENA_prev = D3_DEZENA;
	D3_MILHAR_prev = D3_MILHAR;
	D3_SINAL_prev = D3_SINAL;
	D3_UNIDADE_prev = D3_UNIDADE;
	instrucao_prev = instrucao;
	leds_SLIDE_SWITCHES_prev = leds_SLIDE_SWITCHES;
	ula_res_prev = ula_res;
end

// update expected /o prevs

always @(trigger)
begin
	D1_DEZENA_expected_prev = D1_DEZENA_expected;
	D1_SINAL_expected_prev = D1_SINAL_expected;
	D1_UNIDADE_expected_prev = D1_UNIDADE_expected;
	D2_DEZENA_expected_prev = D2_DEZENA_expected;
	D2_SINAL_expected_prev = D2_SINAL_expected;
	D2_UNIDADE_expected_prev = D2_UNIDADE_expected;
	D3_CENTENA_expected_prev = D3_CENTENA_expected;
	D3_DEZENA_expected_prev = D3_DEZENA_expected;
	D3_MILHAR_expected_prev = D3_MILHAR_expected;
	D3_SINAL_expected_prev = D3_SINAL_expected;
	D3_UNIDADE_expected_prev = D3_UNIDADE_expected;
	instrucao_expected_prev = instrucao_expected;
	leds_SLIDE_SWITCHES_expected_prev = leds_SLIDE_SWITCHES_expected;
	ula_res_expected_prev = ula_res_expected;
end


// expected D1_DEZENA[ 6 ]
initial
begin
	D1_DEZENA_expected[6] = 1'bX;
end 
// expected D1_DEZENA[ 5 ]
initial
begin
	D1_DEZENA_expected[5] = 1'bX;
end 
// expected D1_DEZENA[ 4 ]
initial
begin
	D1_DEZENA_expected[4] = 1'bX;
end 
// expected D1_DEZENA[ 3 ]
initial
begin
	D1_DEZENA_expected[3] = 1'bX;
end 
// expected D1_DEZENA[ 2 ]
initial
begin
	D1_DEZENA_expected[2] = 1'bX;
end 
// expected D1_DEZENA[ 1 ]
initial
begin
	D1_DEZENA_expected[1] = 1'bX;
end 
// expected D1_DEZENA[ 0 ]
initial
begin
	D1_DEZENA_expected[0] = 1'bX;
end 

// expected D1_SINAL
initial
begin
	D1_SINAL_expected = 1'bX;
end 
// expected D1_UNIDADE[ 6 ]
initial
begin
	D1_UNIDADE_expected[6] = 1'bX;
end 
// expected D1_UNIDADE[ 5 ]
initial
begin
	D1_UNIDADE_expected[5] = 1'bX;
end 
// expected D1_UNIDADE[ 4 ]
initial
begin
	D1_UNIDADE_expected[4] = 1'bX;
end 
// expected D1_UNIDADE[ 3 ]
initial
begin
	D1_UNIDADE_expected[3] = 1'bX;
end 
// expected D1_UNIDADE[ 2 ]
initial
begin
	D1_UNIDADE_expected[2] = 1'bX;
end 
// expected D1_UNIDADE[ 1 ]
initial
begin
	D1_UNIDADE_expected[1] = 1'bX;
end 
// expected D1_UNIDADE[ 0 ]
initial
begin
	D1_UNIDADE_expected[0] = 1'bX;
end 
// expected D2_DEZENA[ 6 ]
initial
begin
	D2_DEZENA_expected[6] = 1'bX;
end 
// expected D2_DEZENA[ 5 ]
initial
begin
	D2_DEZENA_expected[5] = 1'bX;
end 
// expected D2_DEZENA[ 4 ]
initial
begin
	D2_DEZENA_expected[4] = 1'bX;
end 
// expected D2_DEZENA[ 3 ]
initial
begin
	D2_DEZENA_expected[3] = 1'bX;
end 
// expected D2_DEZENA[ 2 ]
initial
begin
	D2_DEZENA_expected[2] = 1'bX;
end 
// expected D2_DEZENA[ 1 ]
initial
begin
	D2_DEZENA_expected[1] = 1'bX;
end 
// expected D2_DEZENA[ 0 ]
initial
begin
	D2_DEZENA_expected[0] = 1'bX;
end 

// expected D2_SINAL
initial
begin
	D2_SINAL_expected = 1'bX;
end 
// expected D2_UNIDADE[ 6 ]
initial
begin
	D2_UNIDADE_expected[6] = 1'bX;
end 
// expected D2_UNIDADE[ 5 ]
initial
begin
	D2_UNIDADE_expected[5] = 1'bX;
end 
// expected D2_UNIDADE[ 4 ]
initial
begin
	D2_UNIDADE_expected[4] = 1'bX;
end 
// expected D2_UNIDADE[ 3 ]
initial
begin
	D2_UNIDADE_expected[3] = 1'bX;
end 
// expected D2_UNIDADE[ 2 ]
initial
begin
	D2_UNIDADE_expected[2] = 1'bX;
end 
// expected D2_UNIDADE[ 1 ]
initial
begin
	D2_UNIDADE_expected[1] = 1'bX;
end 
// expected D2_UNIDADE[ 0 ]
initial
begin
	D2_UNIDADE_expected[0] = 1'bX;
end 
// expected D3_CENTENA[ 6 ]
initial
begin
	D3_CENTENA_expected[6] = 1'bX;
end 
// expected D3_CENTENA[ 5 ]
initial
begin
	D3_CENTENA_expected[5] = 1'bX;
end 
// expected D3_CENTENA[ 4 ]
initial
begin
	D3_CENTENA_expected[4] = 1'bX;
end 
// expected D3_CENTENA[ 3 ]
initial
begin
	D3_CENTENA_expected[3] = 1'bX;
end 
// expected D3_CENTENA[ 2 ]
initial
begin
	D3_CENTENA_expected[2] = 1'bX;
end 
// expected D3_CENTENA[ 1 ]
initial
begin
	D3_CENTENA_expected[1] = 1'bX;
end 
// expected D3_CENTENA[ 0 ]
initial
begin
	D3_CENTENA_expected[0] = 1'bX;
end 
// expected D3_DEZENA[ 6 ]
initial
begin
	D3_DEZENA_expected[6] = 1'bX;
end 
// expected D3_DEZENA[ 5 ]
initial
begin
	D3_DEZENA_expected[5] = 1'bX;
end 
// expected D3_DEZENA[ 4 ]
initial
begin
	D3_DEZENA_expected[4] = 1'bX;
end 
// expected D3_DEZENA[ 3 ]
initial
begin
	D3_DEZENA_expected[3] = 1'bX;
end 
// expected D3_DEZENA[ 2 ]
initial
begin
	D3_DEZENA_expected[2] = 1'bX;
end 
// expected D3_DEZENA[ 1 ]
initial
begin
	D3_DEZENA_expected[1] = 1'bX;
end 
// expected D3_DEZENA[ 0 ]
initial
begin
	D3_DEZENA_expected[0] = 1'bX;
end 
// expected D3_MILHAR[ 6 ]
initial
begin
	D3_MILHAR_expected[6] = 1'bX;
end 
// expected D3_MILHAR[ 5 ]
initial
begin
	D3_MILHAR_expected[5] = 1'bX;
end 
// expected D3_MILHAR[ 4 ]
initial
begin
	D3_MILHAR_expected[4] = 1'bX;
end 
// expected D3_MILHAR[ 3 ]
initial
begin
	D3_MILHAR_expected[3] = 1'bX;
end 
// expected D3_MILHAR[ 2 ]
initial
begin
	D3_MILHAR_expected[2] = 1'bX;
end 
// expected D3_MILHAR[ 1 ]
initial
begin
	D3_MILHAR_expected[1] = 1'bX;
end 
// expected D3_MILHAR[ 0 ]
initial
begin
	D3_MILHAR_expected[0] = 1'bX;
end 

// expected D3_SINAL
initial
begin
	D3_SINAL_expected = 1'bX;
end 
// expected D3_UNIDADE[ 6 ]
initial
begin
	D3_UNIDADE_expected[6] = 1'bX;
end 
// expected D3_UNIDADE[ 5 ]
initial
begin
	D3_UNIDADE_expected[5] = 1'bX;
end 
// expected D3_UNIDADE[ 4 ]
initial
begin
	D3_UNIDADE_expected[4] = 1'bX;
end 
// expected D3_UNIDADE[ 3 ]
initial
begin
	D3_UNIDADE_expected[3] = 1'bX;
end 
// expected D3_UNIDADE[ 2 ]
initial
begin
	D3_UNIDADE_expected[2] = 1'bX;
end 
// expected D3_UNIDADE[ 1 ]
initial
begin
	D3_UNIDADE_expected[1] = 1'bX;
end 
// expected D3_UNIDADE[ 0 ]
initial
begin
	D3_UNIDADE_expected[0] = 1'bX;
end 
// expected instrucao[ 31 ]
initial
begin
	instrucao_expected[31] = 1'bX;
end 
// expected instrucao[ 30 ]
initial
begin
	instrucao_expected[30] = 1'bX;
end 
// expected instrucao[ 29 ]
initial
begin
	instrucao_expected[29] = 1'bX;
end 
// expected instrucao[ 28 ]
initial
begin
	instrucao_expected[28] = 1'bX;
end 
// expected instrucao[ 27 ]
initial
begin
	instrucao_expected[27] = 1'bX;
end 
// expected instrucao[ 26 ]
initial
begin
	instrucao_expected[26] = 1'bX;
end 
// expected instrucao[ 25 ]
initial
begin
	instrucao_expected[25] = 1'bX;
end 
// expected instrucao[ 24 ]
initial
begin
	instrucao_expected[24] = 1'bX;
end 
// expected instrucao[ 23 ]
initial
begin
	instrucao_expected[23] = 1'bX;
end 
// expected instrucao[ 22 ]
initial
begin
	instrucao_expected[22] = 1'bX;
end 
// expected instrucao[ 21 ]
initial
begin
	instrucao_expected[21] = 1'bX;
end 
// expected instrucao[ 20 ]
initial
begin
	instrucao_expected[20] = 1'bX;
end 
// expected instrucao[ 19 ]
initial
begin
	instrucao_expected[19] = 1'bX;
end 
// expected instrucao[ 18 ]
initial
begin
	instrucao_expected[18] = 1'bX;
end 
// expected instrucao[ 17 ]
initial
begin
	instrucao_expected[17] = 1'bX;
end 
// expected instrucao[ 16 ]
initial
begin
	instrucao_expected[16] = 1'bX;
end 
// expected instrucao[ 15 ]
initial
begin
	instrucao_expected[15] = 1'bX;
end 
// expected instrucao[ 14 ]
initial
begin
	instrucao_expected[14] = 1'bX;
end 
// expected instrucao[ 13 ]
initial
begin
	instrucao_expected[13] = 1'bX;
end 
// expected instrucao[ 12 ]
initial
begin
	instrucao_expected[12] = 1'bX;
end 
// expected instrucao[ 11 ]
initial
begin
	instrucao_expected[11] = 1'bX;
end 
// expected instrucao[ 10 ]
initial
begin
	instrucao_expected[10] = 1'bX;
end 
// expected instrucao[ 9 ]
initial
begin
	instrucao_expected[9] = 1'bX;
end 
// expected instrucao[ 8 ]
initial
begin
	instrucao_expected[8] = 1'bX;
end 
// expected instrucao[ 7 ]
initial
begin
	instrucao_expected[7] = 1'bX;
end 
// expected instrucao[ 6 ]
initial
begin
	instrucao_expected[6] = 1'bX;
end 
// expected instrucao[ 5 ]
initial
begin
	instrucao_expected[5] = 1'bX;
end 
// expected instrucao[ 4 ]
initial
begin
	instrucao_expected[4] = 1'bX;
end 
// expected instrucao[ 3 ]
initial
begin
	instrucao_expected[3] = 1'bX;
end 
// expected instrucao[ 2 ]
initial
begin
	instrucao_expected[2] = 1'bX;
end 
// expected instrucao[ 1 ]
initial
begin
	instrucao_expected[1] = 1'bX;
end 
// expected instrucao[ 0 ]
initial
begin
	instrucao_expected[0] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 7 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[7] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 6 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[6] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 5 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[5] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 4 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[4] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 3 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[3] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 2 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[2] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 1 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[1] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 0 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[0] = 1'bX;
end 
// expected ula_res[ 31 ]
initial
begin
	ula_res_expected[31] = 1'bX;
end 
// expected ula_res[ 30 ]
initial
begin
	ula_res_expected[30] = 1'bX;
end 
// expected ula_res[ 29 ]
initial
begin
	ula_res_expected[29] = 1'bX;
end 
// expected ula_res[ 28 ]
initial
begin
	ula_res_expected[28] = 1'bX;
end 
// expected ula_res[ 27 ]
initial
begin
	ula_res_expected[27] = 1'bX;
end 
// expected ula_res[ 26 ]
initial
begin
	ula_res_expected[26] = 1'bX;
end 
// expected ula_res[ 25 ]
initial
begin
	ula_res_expected[25] = 1'bX;
end 
// expected ula_res[ 24 ]
initial
begin
	ula_res_expected[24] = 1'bX;
end 
// expected ula_res[ 23 ]
initial
begin
	ula_res_expected[23] = 1'bX;
end 
// expected ula_res[ 22 ]
initial
begin
	ula_res_expected[22] = 1'bX;
end 
// expected ula_res[ 21 ]
initial
begin
	ula_res_expected[21] = 1'bX;
end 
// expected ula_res[ 20 ]
initial
begin
	ula_res_expected[20] = 1'bX;
end 
// expected ula_res[ 19 ]
initial
begin
	ula_res_expected[19] = 1'bX;
end 
// expected ula_res[ 18 ]
initial
begin
	ula_res_expected[18] = 1'bX;
end 
// expected ula_res[ 17 ]
initial
begin
	ula_res_expected[17] = 1'bX;
end 
// expected ula_res[ 16 ]
initial
begin
	ula_res_expected[16] = 1'bX;
end 
// expected ula_res[ 15 ]
initial
begin
	ula_res_expected[15] = 1'bX;
end 
// expected ula_res[ 14 ]
initial
begin
	ula_res_expected[14] = 1'bX;
end 
// expected ula_res[ 13 ]
initial
begin
	ula_res_expected[13] = 1'bX;
end 
// expected ula_res[ 12 ]
initial
begin
	ula_res_expected[12] = 1'bX;
end 
// expected ula_res[ 11 ]
initial
begin
	ula_res_expected[11] = 1'bX;
end 
// expected ula_res[ 10 ]
initial
begin
	ula_res_expected[10] = 1'bX;
end 
// expected ula_res[ 9 ]
initial
begin
	ula_res_expected[9] = 1'bX;
end 
// expected ula_res[ 8 ]
initial
begin
	ula_res_expected[8] = 1'bX;
end 
// expected ula_res[ 7 ]
initial
begin
	ula_res_expected[7] = 1'bX;
end 
// expected ula_res[ 6 ]
initial
begin
	ula_res_expected[6] = 1'bX;
end 
// expected ula_res[ 5 ]
initial
begin
	ula_res_expected[5] = 1'bX;
end 
// expected ula_res[ 4 ]
initial
begin
	ula_res_expected[4] = 1'bX;
end 
// expected ula_res[ 3 ]
initial
begin
	ula_res_expected[3] = 1'bX;
end 
// expected ula_res[ 2 ]
initial
begin
	ula_res_expected[2] = 1'bX;
end 
// expected ula_res[ 1 ]
initial
begin
	ula_res_expected[1] = 1'bX;
end 
// expected ula_res[ 0 ]
initial
begin
	ula_res_expected[0] = 1'bX;
end 
// generate trigger
always @(D1_DEZENA_expected or D1_DEZENA or D1_SINAL_expected or D1_SINAL or D1_UNIDADE_expected or D1_UNIDADE or D2_DEZENA_expected or D2_DEZENA or D2_SINAL_expected or D2_SINAL or D2_UNIDADE_expected or D2_UNIDADE or D3_CENTENA_expected or D3_CENTENA or D3_DEZENA_expected or D3_DEZENA or D3_MILHAR_expected or D3_MILHAR or D3_SINAL_expected or D3_SINAL or D3_UNIDADE_expected or D3_UNIDADE or instrucao_expected or instrucao or leds_SLIDE_SWITCHES_expected or leds_SLIDE_SWITCHES or ula_res_expected or ula_res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D1_DEZENA = %b | expected D1_SINAL = %b | expected D1_UNIDADE = %b | expected D2_DEZENA = %b | expected D2_SINAL = %b | expected D2_UNIDADE = %b | expected D3_CENTENA = %b | expected D3_DEZENA = %b | expected D3_MILHAR = %b | expected D3_SINAL = %b | expected D3_UNIDADE = %b | expected instrucao = %b | expected leds_SLIDE_SWITCHES = %b | expected ula_res = %b | ",D1_DEZENA_expected_prev,D1_SINAL_expected_prev,D1_UNIDADE_expected_prev,D2_DEZENA_expected_prev,D2_SINAL_expected_prev,D2_UNIDADE_expected_prev,D3_CENTENA_expected_prev,D3_DEZENA_expected_prev,D3_MILHAR_expected_prev,D3_SINAL_expected_prev,D3_UNIDADE_expected_prev,instrucao_expected_prev,leds_SLIDE_SWITCHES_expected_prev,ula_res_expected_prev);
	$display("| real D1_DEZENA = %b | real D1_SINAL = %b | real D1_UNIDADE = %b | real D2_DEZENA = %b | real D2_SINAL = %b | real D2_UNIDADE = %b | real D3_CENTENA = %b | real D3_DEZENA = %b | real D3_MILHAR = %b | real D3_SINAL = %b | real D3_UNIDADE = %b | real instrucao = %b | real leds_SLIDE_SWITCHES = %b | real ula_res = %b | ",D1_DEZENA_prev,D1_SINAL_prev,D1_UNIDADE_prev,D2_DEZENA_prev,D2_SINAL_prev,D2_UNIDADE_prev,D3_CENTENA_prev,D3_DEZENA_prev,D3_MILHAR_prev,D3_SINAL_prev,D3_UNIDADE_prev,instrucao_prev,leds_SLIDE_SWITCHES_prev,ula_res_prev);
`endif
	if (
		( D1_DEZENA_expected_prev[0] !== 1'bx ) && ( D1_DEZENA_prev[0] !== D1_DEZENA_expected_prev[0] )
		&& ((D1_DEZENA_expected_prev[0] !== last_D1_DEZENA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[0] = D1_DEZENA_expected_prev[0];
	end
	if (
		( D1_DEZENA_expected_prev[1] !== 1'bx ) && ( D1_DEZENA_prev[1] !== D1_DEZENA_expected_prev[1] )
		&& ((D1_DEZENA_expected_prev[1] !== last_D1_DEZENA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[1] = D1_DEZENA_expected_prev[1];
	end
	if (
		( D1_DEZENA_expected_prev[2] !== 1'bx ) && ( D1_DEZENA_prev[2] !== D1_DEZENA_expected_prev[2] )
		&& ((D1_DEZENA_expected_prev[2] !== last_D1_DEZENA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[2] = D1_DEZENA_expected_prev[2];
	end
	if (
		( D1_DEZENA_expected_prev[3] !== 1'bx ) && ( D1_DEZENA_prev[3] !== D1_DEZENA_expected_prev[3] )
		&& ((D1_DEZENA_expected_prev[3] !== last_D1_DEZENA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[3] = D1_DEZENA_expected_prev[3];
	end
	if (
		( D1_DEZENA_expected_prev[4] !== 1'bx ) && ( D1_DEZENA_prev[4] !== D1_DEZENA_expected_prev[4] )
		&& ((D1_DEZENA_expected_prev[4] !== last_D1_DEZENA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[4] = D1_DEZENA_expected_prev[4];
	end
	if (
		( D1_DEZENA_expected_prev[5] !== 1'bx ) && ( D1_DEZENA_prev[5] !== D1_DEZENA_expected_prev[5] )
		&& ((D1_DEZENA_expected_prev[5] !== last_D1_DEZENA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[5] = D1_DEZENA_expected_prev[5];
	end
	if (
		( D1_DEZENA_expected_prev[6] !== 1'bx ) && ( D1_DEZENA_prev[6] !== D1_DEZENA_expected_prev[6] )
		&& ((D1_DEZENA_expected_prev[6] !== last_D1_DEZENA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[6] = D1_DEZENA_expected_prev[6];
	end
	if (
		( D1_SINAL_expected_prev !== 1'bx ) && ( D1_SINAL_prev !== D1_SINAL_expected_prev )
		&& ((D1_SINAL_expected_prev !== last_D1_SINAL_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_SINAL_expected_prev);
		$display ("     Real value = %b", D1_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D1_SINAL_exp = D1_SINAL_expected_prev;
	end
	if (
		( D1_UNIDADE_expected_prev[0] !== 1'bx ) && ( D1_UNIDADE_prev[0] !== D1_UNIDADE_expected_prev[0] )
		&& ((D1_UNIDADE_expected_prev[0] !== last_D1_UNIDADE_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[0] = D1_UNIDADE_expected_prev[0];
	end
	if (
		( D1_UNIDADE_expected_prev[1] !== 1'bx ) && ( D1_UNIDADE_prev[1] !== D1_UNIDADE_expected_prev[1] )
		&& ((D1_UNIDADE_expected_prev[1] !== last_D1_UNIDADE_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[1] = D1_UNIDADE_expected_prev[1];
	end
	if (
		( D1_UNIDADE_expected_prev[2] !== 1'bx ) && ( D1_UNIDADE_prev[2] !== D1_UNIDADE_expected_prev[2] )
		&& ((D1_UNIDADE_expected_prev[2] !== last_D1_UNIDADE_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[2] = D1_UNIDADE_expected_prev[2];
	end
	if (
		( D1_UNIDADE_expected_prev[3] !== 1'bx ) && ( D1_UNIDADE_prev[3] !== D1_UNIDADE_expected_prev[3] )
		&& ((D1_UNIDADE_expected_prev[3] !== last_D1_UNIDADE_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[3] = D1_UNIDADE_expected_prev[3];
	end
	if (
		( D1_UNIDADE_expected_prev[4] !== 1'bx ) && ( D1_UNIDADE_prev[4] !== D1_UNIDADE_expected_prev[4] )
		&& ((D1_UNIDADE_expected_prev[4] !== last_D1_UNIDADE_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[4] = D1_UNIDADE_expected_prev[4];
	end
	if (
		( D1_UNIDADE_expected_prev[5] !== 1'bx ) && ( D1_UNIDADE_prev[5] !== D1_UNIDADE_expected_prev[5] )
		&& ((D1_UNIDADE_expected_prev[5] !== last_D1_UNIDADE_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[5] = D1_UNIDADE_expected_prev[5];
	end
	if (
		( D1_UNIDADE_expected_prev[6] !== 1'bx ) && ( D1_UNIDADE_prev[6] !== D1_UNIDADE_expected_prev[6] )
		&& ((D1_UNIDADE_expected_prev[6] !== last_D1_UNIDADE_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[6] = D1_UNIDADE_expected_prev[6];
	end
	if (
		( D2_DEZENA_expected_prev[0] !== 1'bx ) && ( D2_DEZENA_prev[0] !== D2_DEZENA_expected_prev[0] )
		&& ((D2_DEZENA_expected_prev[0] !== last_D2_DEZENA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[0] = D2_DEZENA_expected_prev[0];
	end
	if (
		( D2_DEZENA_expected_prev[1] !== 1'bx ) && ( D2_DEZENA_prev[1] !== D2_DEZENA_expected_prev[1] )
		&& ((D2_DEZENA_expected_prev[1] !== last_D2_DEZENA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[1] = D2_DEZENA_expected_prev[1];
	end
	if (
		( D2_DEZENA_expected_prev[2] !== 1'bx ) && ( D2_DEZENA_prev[2] !== D2_DEZENA_expected_prev[2] )
		&& ((D2_DEZENA_expected_prev[2] !== last_D2_DEZENA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[2] = D2_DEZENA_expected_prev[2];
	end
	if (
		( D2_DEZENA_expected_prev[3] !== 1'bx ) && ( D2_DEZENA_prev[3] !== D2_DEZENA_expected_prev[3] )
		&& ((D2_DEZENA_expected_prev[3] !== last_D2_DEZENA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[3] = D2_DEZENA_expected_prev[3];
	end
	if (
		( D2_DEZENA_expected_prev[4] !== 1'bx ) && ( D2_DEZENA_prev[4] !== D2_DEZENA_expected_prev[4] )
		&& ((D2_DEZENA_expected_prev[4] !== last_D2_DEZENA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[4] = D2_DEZENA_expected_prev[4];
	end
	if (
		( D2_DEZENA_expected_prev[5] !== 1'bx ) && ( D2_DEZENA_prev[5] !== D2_DEZENA_expected_prev[5] )
		&& ((D2_DEZENA_expected_prev[5] !== last_D2_DEZENA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[5] = D2_DEZENA_expected_prev[5];
	end
	if (
		( D2_DEZENA_expected_prev[6] !== 1'bx ) && ( D2_DEZENA_prev[6] !== D2_DEZENA_expected_prev[6] )
		&& ((D2_DEZENA_expected_prev[6] !== last_D2_DEZENA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[6] = D2_DEZENA_expected_prev[6];
	end
	if (
		( D2_SINAL_expected_prev !== 1'bx ) && ( D2_SINAL_prev !== D2_SINAL_expected_prev )
		&& ((D2_SINAL_expected_prev !== last_D2_SINAL_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_SINAL_expected_prev);
		$display ("     Real value = %b", D2_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D2_SINAL_exp = D2_SINAL_expected_prev;
	end
	if (
		( D2_UNIDADE_expected_prev[0] !== 1'bx ) && ( D2_UNIDADE_prev[0] !== D2_UNIDADE_expected_prev[0] )
		&& ((D2_UNIDADE_expected_prev[0] !== last_D2_UNIDADE_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[0] = D2_UNIDADE_expected_prev[0];
	end
	if (
		( D2_UNIDADE_expected_prev[1] !== 1'bx ) && ( D2_UNIDADE_prev[1] !== D2_UNIDADE_expected_prev[1] )
		&& ((D2_UNIDADE_expected_prev[1] !== last_D2_UNIDADE_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[1] = D2_UNIDADE_expected_prev[1];
	end
	if (
		( D2_UNIDADE_expected_prev[2] !== 1'bx ) && ( D2_UNIDADE_prev[2] !== D2_UNIDADE_expected_prev[2] )
		&& ((D2_UNIDADE_expected_prev[2] !== last_D2_UNIDADE_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[2] = D2_UNIDADE_expected_prev[2];
	end
	if (
		( D2_UNIDADE_expected_prev[3] !== 1'bx ) && ( D2_UNIDADE_prev[3] !== D2_UNIDADE_expected_prev[3] )
		&& ((D2_UNIDADE_expected_prev[3] !== last_D2_UNIDADE_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[3] = D2_UNIDADE_expected_prev[3];
	end
	if (
		( D2_UNIDADE_expected_prev[4] !== 1'bx ) && ( D2_UNIDADE_prev[4] !== D2_UNIDADE_expected_prev[4] )
		&& ((D2_UNIDADE_expected_prev[4] !== last_D2_UNIDADE_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[4] = D2_UNIDADE_expected_prev[4];
	end
	if (
		( D2_UNIDADE_expected_prev[5] !== 1'bx ) && ( D2_UNIDADE_prev[5] !== D2_UNIDADE_expected_prev[5] )
		&& ((D2_UNIDADE_expected_prev[5] !== last_D2_UNIDADE_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[5] = D2_UNIDADE_expected_prev[5];
	end
	if (
		( D2_UNIDADE_expected_prev[6] !== 1'bx ) && ( D2_UNIDADE_prev[6] !== D2_UNIDADE_expected_prev[6] )
		&& ((D2_UNIDADE_expected_prev[6] !== last_D2_UNIDADE_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[6] = D2_UNIDADE_expected_prev[6];
	end
	if (
		( D3_CENTENA_expected_prev[0] !== 1'bx ) && ( D3_CENTENA_prev[0] !== D3_CENTENA_expected_prev[0] )
		&& ((D3_CENTENA_expected_prev[0] !== last_D3_CENTENA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[0] = D3_CENTENA_expected_prev[0];
	end
	if (
		( D3_CENTENA_expected_prev[1] !== 1'bx ) && ( D3_CENTENA_prev[1] !== D3_CENTENA_expected_prev[1] )
		&& ((D3_CENTENA_expected_prev[1] !== last_D3_CENTENA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[1] = D3_CENTENA_expected_prev[1];
	end
	if (
		( D3_CENTENA_expected_prev[2] !== 1'bx ) && ( D3_CENTENA_prev[2] !== D3_CENTENA_expected_prev[2] )
		&& ((D3_CENTENA_expected_prev[2] !== last_D3_CENTENA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[2] = D3_CENTENA_expected_prev[2];
	end
	if (
		( D3_CENTENA_expected_prev[3] !== 1'bx ) && ( D3_CENTENA_prev[3] !== D3_CENTENA_expected_prev[3] )
		&& ((D3_CENTENA_expected_prev[3] !== last_D3_CENTENA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[3] = D3_CENTENA_expected_prev[3];
	end
	if (
		( D3_CENTENA_expected_prev[4] !== 1'bx ) && ( D3_CENTENA_prev[4] !== D3_CENTENA_expected_prev[4] )
		&& ((D3_CENTENA_expected_prev[4] !== last_D3_CENTENA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[4] = D3_CENTENA_expected_prev[4];
	end
	if (
		( D3_CENTENA_expected_prev[5] !== 1'bx ) && ( D3_CENTENA_prev[5] !== D3_CENTENA_expected_prev[5] )
		&& ((D3_CENTENA_expected_prev[5] !== last_D3_CENTENA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[5] = D3_CENTENA_expected_prev[5];
	end
	if (
		( D3_CENTENA_expected_prev[6] !== 1'bx ) && ( D3_CENTENA_prev[6] !== D3_CENTENA_expected_prev[6] )
		&& ((D3_CENTENA_expected_prev[6] !== last_D3_CENTENA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[6] = D3_CENTENA_expected_prev[6];
	end
	if (
		( D3_DEZENA_expected_prev[0] !== 1'bx ) && ( D3_DEZENA_prev[0] !== D3_DEZENA_expected_prev[0] )
		&& ((D3_DEZENA_expected_prev[0] !== last_D3_DEZENA_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[0] = D3_DEZENA_expected_prev[0];
	end
	if (
		( D3_DEZENA_expected_prev[1] !== 1'bx ) && ( D3_DEZENA_prev[1] !== D3_DEZENA_expected_prev[1] )
		&& ((D3_DEZENA_expected_prev[1] !== last_D3_DEZENA_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[1] = D3_DEZENA_expected_prev[1];
	end
	if (
		( D3_DEZENA_expected_prev[2] !== 1'bx ) && ( D3_DEZENA_prev[2] !== D3_DEZENA_expected_prev[2] )
		&& ((D3_DEZENA_expected_prev[2] !== last_D3_DEZENA_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[2] = D3_DEZENA_expected_prev[2];
	end
	if (
		( D3_DEZENA_expected_prev[3] !== 1'bx ) && ( D3_DEZENA_prev[3] !== D3_DEZENA_expected_prev[3] )
		&& ((D3_DEZENA_expected_prev[3] !== last_D3_DEZENA_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[3] = D3_DEZENA_expected_prev[3];
	end
	if (
		( D3_DEZENA_expected_prev[4] !== 1'bx ) && ( D3_DEZENA_prev[4] !== D3_DEZENA_expected_prev[4] )
		&& ((D3_DEZENA_expected_prev[4] !== last_D3_DEZENA_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[4] = D3_DEZENA_expected_prev[4];
	end
	if (
		( D3_DEZENA_expected_prev[5] !== 1'bx ) && ( D3_DEZENA_prev[5] !== D3_DEZENA_expected_prev[5] )
		&& ((D3_DEZENA_expected_prev[5] !== last_D3_DEZENA_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[5] = D3_DEZENA_expected_prev[5];
	end
	if (
		( D3_DEZENA_expected_prev[6] !== 1'bx ) && ( D3_DEZENA_prev[6] !== D3_DEZENA_expected_prev[6] )
		&& ((D3_DEZENA_expected_prev[6] !== last_D3_DEZENA_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[6] = D3_DEZENA_expected_prev[6];
	end
	if (
		( D3_MILHAR_expected_prev[0] !== 1'bx ) && ( D3_MILHAR_prev[0] !== D3_MILHAR_expected_prev[0] )
		&& ((D3_MILHAR_expected_prev[0] !== last_D3_MILHAR_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[0] = D3_MILHAR_expected_prev[0];
	end
	if (
		( D3_MILHAR_expected_prev[1] !== 1'bx ) && ( D3_MILHAR_prev[1] !== D3_MILHAR_expected_prev[1] )
		&& ((D3_MILHAR_expected_prev[1] !== last_D3_MILHAR_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[1] = D3_MILHAR_expected_prev[1];
	end
	if (
		( D3_MILHAR_expected_prev[2] !== 1'bx ) && ( D3_MILHAR_prev[2] !== D3_MILHAR_expected_prev[2] )
		&& ((D3_MILHAR_expected_prev[2] !== last_D3_MILHAR_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[2] = D3_MILHAR_expected_prev[2];
	end
	if (
		( D3_MILHAR_expected_prev[3] !== 1'bx ) && ( D3_MILHAR_prev[3] !== D3_MILHAR_expected_prev[3] )
		&& ((D3_MILHAR_expected_prev[3] !== last_D3_MILHAR_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[3] = D3_MILHAR_expected_prev[3];
	end
	if (
		( D3_MILHAR_expected_prev[4] !== 1'bx ) && ( D3_MILHAR_prev[4] !== D3_MILHAR_expected_prev[4] )
		&& ((D3_MILHAR_expected_prev[4] !== last_D3_MILHAR_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[4] = D3_MILHAR_expected_prev[4];
	end
	if (
		( D3_MILHAR_expected_prev[5] !== 1'bx ) && ( D3_MILHAR_prev[5] !== D3_MILHAR_expected_prev[5] )
		&& ((D3_MILHAR_expected_prev[5] !== last_D3_MILHAR_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[5] = D3_MILHAR_expected_prev[5];
	end
	if (
		( D3_MILHAR_expected_prev[6] !== 1'bx ) && ( D3_MILHAR_prev[6] !== D3_MILHAR_expected_prev[6] )
		&& ((D3_MILHAR_expected_prev[6] !== last_D3_MILHAR_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[6] = D3_MILHAR_expected_prev[6];
	end
	if (
		( D3_SINAL_expected_prev !== 1'bx ) && ( D3_SINAL_prev !== D3_SINAL_expected_prev )
		&& ((D3_SINAL_expected_prev !== last_D3_SINAL_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_SINAL_expected_prev);
		$display ("     Real value = %b", D3_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_SINAL_exp = D3_SINAL_expected_prev;
	end
	if (
		( D3_UNIDADE_expected_prev[0] !== 1'bx ) && ( D3_UNIDADE_prev[0] !== D3_UNIDADE_expected_prev[0] )
		&& ((D3_UNIDADE_expected_prev[0] !== last_D3_UNIDADE_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[0] = D3_UNIDADE_expected_prev[0];
	end
	if (
		( D3_UNIDADE_expected_prev[1] !== 1'bx ) && ( D3_UNIDADE_prev[1] !== D3_UNIDADE_expected_prev[1] )
		&& ((D3_UNIDADE_expected_prev[1] !== last_D3_UNIDADE_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[1] = D3_UNIDADE_expected_prev[1];
	end
	if (
		( D3_UNIDADE_expected_prev[2] !== 1'bx ) && ( D3_UNIDADE_prev[2] !== D3_UNIDADE_expected_prev[2] )
		&& ((D3_UNIDADE_expected_prev[2] !== last_D3_UNIDADE_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[2] = D3_UNIDADE_expected_prev[2];
	end
	if (
		( D3_UNIDADE_expected_prev[3] !== 1'bx ) && ( D3_UNIDADE_prev[3] !== D3_UNIDADE_expected_prev[3] )
		&& ((D3_UNIDADE_expected_prev[3] !== last_D3_UNIDADE_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[3] = D3_UNIDADE_expected_prev[3];
	end
	if (
		( D3_UNIDADE_expected_prev[4] !== 1'bx ) && ( D3_UNIDADE_prev[4] !== D3_UNIDADE_expected_prev[4] )
		&& ((D3_UNIDADE_expected_prev[4] !== last_D3_UNIDADE_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[4] = D3_UNIDADE_expected_prev[4];
	end
	if (
		( D3_UNIDADE_expected_prev[5] !== 1'bx ) && ( D3_UNIDADE_prev[5] !== D3_UNIDADE_expected_prev[5] )
		&& ((D3_UNIDADE_expected_prev[5] !== last_D3_UNIDADE_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[5] = D3_UNIDADE_expected_prev[5];
	end
	if (
		( D3_UNIDADE_expected_prev[6] !== 1'bx ) && ( D3_UNIDADE_prev[6] !== D3_UNIDADE_expected_prev[6] )
		&& ((D3_UNIDADE_expected_prev[6] !== last_D3_UNIDADE_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[6] = D3_UNIDADE_expected_prev[6];
	end
	if (
		( instrucao_expected_prev[0] !== 1'bx ) && ( instrucao_prev[0] !== instrucao_expected_prev[0] )
		&& ((instrucao_expected_prev[0] !== last_instrucao_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[0] = instrucao_expected_prev[0];
	end
	if (
		( instrucao_expected_prev[1] !== 1'bx ) && ( instrucao_prev[1] !== instrucao_expected_prev[1] )
		&& ((instrucao_expected_prev[1] !== last_instrucao_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[1] = instrucao_expected_prev[1];
	end
	if (
		( instrucao_expected_prev[2] !== 1'bx ) && ( instrucao_prev[2] !== instrucao_expected_prev[2] )
		&& ((instrucao_expected_prev[2] !== last_instrucao_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[2] = instrucao_expected_prev[2];
	end
	if (
		( instrucao_expected_prev[3] !== 1'bx ) && ( instrucao_prev[3] !== instrucao_expected_prev[3] )
		&& ((instrucao_expected_prev[3] !== last_instrucao_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[3] = instrucao_expected_prev[3];
	end
	if (
		( instrucao_expected_prev[4] !== 1'bx ) && ( instrucao_prev[4] !== instrucao_expected_prev[4] )
		&& ((instrucao_expected_prev[4] !== last_instrucao_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[4] = instrucao_expected_prev[4];
	end
	if (
		( instrucao_expected_prev[5] !== 1'bx ) && ( instrucao_prev[5] !== instrucao_expected_prev[5] )
		&& ((instrucao_expected_prev[5] !== last_instrucao_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[5] = instrucao_expected_prev[5];
	end
	if (
		( instrucao_expected_prev[6] !== 1'bx ) && ( instrucao_prev[6] !== instrucao_expected_prev[6] )
		&& ((instrucao_expected_prev[6] !== last_instrucao_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[6] = instrucao_expected_prev[6];
	end
	if (
		( instrucao_expected_prev[7] !== 1'bx ) && ( instrucao_prev[7] !== instrucao_expected_prev[7] )
		&& ((instrucao_expected_prev[7] !== last_instrucao_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[7] = instrucao_expected_prev[7];
	end
	if (
		( instrucao_expected_prev[8] !== 1'bx ) && ( instrucao_prev[8] !== instrucao_expected_prev[8] )
		&& ((instrucao_expected_prev[8] !== last_instrucao_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[8] = instrucao_expected_prev[8];
	end
	if (
		( instrucao_expected_prev[9] !== 1'bx ) && ( instrucao_prev[9] !== instrucao_expected_prev[9] )
		&& ((instrucao_expected_prev[9] !== last_instrucao_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[9] = instrucao_expected_prev[9];
	end
	if (
		( instrucao_expected_prev[10] !== 1'bx ) && ( instrucao_prev[10] !== instrucao_expected_prev[10] )
		&& ((instrucao_expected_prev[10] !== last_instrucao_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[10] = instrucao_expected_prev[10];
	end
	if (
		( instrucao_expected_prev[11] !== 1'bx ) && ( instrucao_prev[11] !== instrucao_expected_prev[11] )
		&& ((instrucao_expected_prev[11] !== last_instrucao_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[11] = instrucao_expected_prev[11];
	end
	if (
		( instrucao_expected_prev[12] !== 1'bx ) && ( instrucao_prev[12] !== instrucao_expected_prev[12] )
		&& ((instrucao_expected_prev[12] !== last_instrucao_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[12] = instrucao_expected_prev[12];
	end
	if (
		( instrucao_expected_prev[13] !== 1'bx ) && ( instrucao_prev[13] !== instrucao_expected_prev[13] )
		&& ((instrucao_expected_prev[13] !== last_instrucao_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[13] = instrucao_expected_prev[13];
	end
	if (
		( instrucao_expected_prev[14] !== 1'bx ) && ( instrucao_prev[14] !== instrucao_expected_prev[14] )
		&& ((instrucao_expected_prev[14] !== last_instrucao_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[14] = instrucao_expected_prev[14];
	end
	if (
		( instrucao_expected_prev[15] !== 1'bx ) && ( instrucao_prev[15] !== instrucao_expected_prev[15] )
		&& ((instrucao_expected_prev[15] !== last_instrucao_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[15] = instrucao_expected_prev[15];
	end
	if (
		( instrucao_expected_prev[16] !== 1'bx ) && ( instrucao_prev[16] !== instrucao_expected_prev[16] )
		&& ((instrucao_expected_prev[16] !== last_instrucao_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[16] = instrucao_expected_prev[16];
	end
	if (
		( instrucao_expected_prev[17] !== 1'bx ) && ( instrucao_prev[17] !== instrucao_expected_prev[17] )
		&& ((instrucao_expected_prev[17] !== last_instrucao_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[17] = instrucao_expected_prev[17];
	end
	if (
		( instrucao_expected_prev[18] !== 1'bx ) && ( instrucao_prev[18] !== instrucao_expected_prev[18] )
		&& ((instrucao_expected_prev[18] !== last_instrucao_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[18] = instrucao_expected_prev[18];
	end
	if (
		( instrucao_expected_prev[19] !== 1'bx ) && ( instrucao_prev[19] !== instrucao_expected_prev[19] )
		&& ((instrucao_expected_prev[19] !== last_instrucao_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[19] = instrucao_expected_prev[19];
	end
	if (
		( instrucao_expected_prev[20] !== 1'bx ) && ( instrucao_prev[20] !== instrucao_expected_prev[20] )
		&& ((instrucao_expected_prev[20] !== last_instrucao_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[20] = instrucao_expected_prev[20];
	end
	if (
		( instrucao_expected_prev[21] !== 1'bx ) && ( instrucao_prev[21] !== instrucao_expected_prev[21] )
		&& ((instrucao_expected_prev[21] !== last_instrucao_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[21] = instrucao_expected_prev[21];
	end
	if (
		( instrucao_expected_prev[22] !== 1'bx ) && ( instrucao_prev[22] !== instrucao_expected_prev[22] )
		&& ((instrucao_expected_prev[22] !== last_instrucao_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[22] = instrucao_expected_prev[22];
	end
	if (
		( instrucao_expected_prev[23] !== 1'bx ) && ( instrucao_prev[23] !== instrucao_expected_prev[23] )
		&& ((instrucao_expected_prev[23] !== last_instrucao_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[23] = instrucao_expected_prev[23];
	end
	if (
		( instrucao_expected_prev[24] !== 1'bx ) && ( instrucao_prev[24] !== instrucao_expected_prev[24] )
		&& ((instrucao_expected_prev[24] !== last_instrucao_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[24] = instrucao_expected_prev[24];
	end
	if (
		( instrucao_expected_prev[25] !== 1'bx ) && ( instrucao_prev[25] !== instrucao_expected_prev[25] )
		&& ((instrucao_expected_prev[25] !== last_instrucao_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[25] = instrucao_expected_prev[25];
	end
	if (
		( instrucao_expected_prev[26] !== 1'bx ) && ( instrucao_prev[26] !== instrucao_expected_prev[26] )
		&& ((instrucao_expected_prev[26] !== last_instrucao_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[26] = instrucao_expected_prev[26];
	end
	if (
		( instrucao_expected_prev[27] !== 1'bx ) && ( instrucao_prev[27] !== instrucao_expected_prev[27] )
		&& ((instrucao_expected_prev[27] !== last_instrucao_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[27] = instrucao_expected_prev[27];
	end
	if (
		( instrucao_expected_prev[28] !== 1'bx ) && ( instrucao_prev[28] !== instrucao_expected_prev[28] )
		&& ((instrucao_expected_prev[28] !== last_instrucao_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[28] = instrucao_expected_prev[28];
	end
	if (
		( instrucao_expected_prev[29] !== 1'bx ) && ( instrucao_prev[29] !== instrucao_expected_prev[29] )
		&& ((instrucao_expected_prev[29] !== last_instrucao_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[29] = instrucao_expected_prev[29];
	end
	if (
		( instrucao_expected_prev[30] !== 1'bx ) && ( instrucao_prev[30] !== instrucao_expected_prev[30] )
		&& ((instrucao_expected_prev[30] !== last_instrucao_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[30] = instrucao_expected_prev[30];
	end
	if (
		( instrucao_expected_prev[31] !== 1'bx ) && ( instrucao_prev[31] !== instrucao_expected_prev[31] )
		&& ((instrucao_expected_prev[31] !== last_instrucao_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_instrucao_exp[31] = instrucao_expected_prev[31];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[0] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[0] !== leds_SLIDE_SWITCHES_expected_prev[0] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[0] !== last_leds_SLIDE_SWITCHES_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[0] = leds_SLIDE_SWITCHES_expected_prev[0];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[1] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[1] !== leds_SLIDE_SWITCHES_expected_prev[1] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[1] !== last_leds_SLIDE_SWITCHES_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[1] = leds_SLIDE_SWITCHES_expected_prev[1];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[2] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[2] !== leds_SLIDE_SWITCHES_expected_prev[2] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[2] !== last_leds_SLIDE_SWITCHES_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[2] = leds_SLIDE_SWITCHES_expected_prev[2];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[3] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[3] !== leds_SLIDE_SWITCHES_expected_prev[3] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[3] !== last_leds_SLIDE_SWITCHES_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[3] = leds_SLIDE_SWITCHES_expected_prev[3];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[4] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[4] !== leds_SLIDE_SWITCHES_expected_prev[4] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[4] !== last_leds_SLIDE_SWITCHES_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[4] = leds_SLIDE_SWITCHES_expected_prev[4];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[5] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[5] !== leds_SLIDE_SWITCHES_expected_prev[5] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[5] !== last_leds_SLIDE_SWITCHES_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[5] = leds_SLIDE_SWITCHES_expected_prev[5];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[6] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[6] !== leds_SLIDE_SWITCHES_expected_prev[6] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[6] !== last_leds_SLIDE_SWITCHES_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[6] = leds_SLIDE_SWITCHES_expected_prev[6];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[7] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[7] !== leds_SLIDE_SWITCHES_expected_prev[7] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[7] !== last_leds_SLIDE_SWITCHES_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[7] = leds_SLIDE_SWITCHES_expected_prev[7];
	end
	if (
		( ula_res_expected_prev[0] !== 1'bx ) && ( ula_res_prev[0] !== ula_res_expected_prev[0] )
		&& ((ula_res_expected_prev[0] !== last_ula_res_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[0] = ula_res_expected_prev[0];
	end
	if (
		( ula_res_expected_prev[1] !== 1'bx ) && ( ula_res_prev[1] !== ula_res_expected_prev[1] )
		&& ((ula_res_expected_prev[1] !== last_ula_res_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[1] = ula_res_expected_prev[1];
	end
	if (
		( ula_res_expected_prev[2] !== 1'bx ) && ( ula_res_prev[2] !== ula_res_expected_prev[2] )
		&& ((ula_res_expected_prev[2] !== last_ula_res_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[2] = ula_res_expected_prev[2];
	end
	if (
		( ula_res_expected_prev[3] !== 1'bx ) && ( ula_res_prev[3] !== ula_res_expected_prev[3] )
		&& ((ula_res_expected_prev[3] !== last_ula_res_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[3] = ula_res_expected_prev[3];
	end
	if (
		( ula_res_expected_prev[4] !== 1'bx ) && ( ula_res_prev[4] !== ula_res_expected_prev[4] )
		&& ((ula_res_expected_prev[4] !== last_ula_res_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[4] = ula_res_expected_prev[4];
	end
	if (
		( ula_res_expected_prev[5] !== 1'bx ) && ( ula_res_prev[5] !== ula_res_expected_prev[5] )
		&& ((ula_res_expected_prev[5] !== last_ula_res_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[5] = ula_res_expected_prev[5];
	end
	if (
		( ula_res_expected_prev[6] !== 1'bx ) && ( ula_res_prev[6] !== ula_res_expected_prev[6] )
		&& ((ula_res_expected_prev[6] !== last_ula_res_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[6] = ula_res_expected_prev[6];
	end
	if (
		( ula_res_expected_prev[7] !== 1'bx ) && ( ula_res_prev[7] !== ula_res_expected_prev[7] )
		&& ((ula_res_expected_prev[7] !== last_ula_res_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[7] = ula_res_expected_prev[7];
	end
	if (
		( ula_res_expected_prev[8] !== 1'bx ) && ( ula_res_prev[8] !== ula_res_expected_prev[8] )
		&& ((ula_res_expected_prev[8] !== last_ula_res_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[8] = ula_res_expected_prev[8];
	end
	if (
		( ula_res_expected_prev[9] !== 1'bx ) && ( ula_res_prev[9] !== ula_res_expected_prev[9] )
		&& ((ula_res_expected_prev[9] !== last_ula_res_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[9] = ula_res_expected_prev[9];
	end
	if (
		( ula_res_expected_prev[10] !== 1'bx ) && ( ula_res_prev[10] !== ula_res_expected_prev[10] )
		&& ((ula_res_expected_prev[10] !== last_ula_res_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[10] = ula_res_expected_prev[10];
	end
	if (
		( ula_res_expected_prev[11] !== 1'bx ) && ( ula_res_prev[11] !== ula_res_expected_prev[11] )
		&& ((ula_res_expected_prev[11] !== last_ula_res_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[11] = ula_res_expected_prev[11];
	end
	if (
		( ula_res_expected_prev[12] !== 1'bx ) && ( ula_res_prev[12] !== ula_res_expected_prev[12] )
		&& ((ula_res_expected_prev[12] !== last_ula_res_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[12] = ula_res_expected_prev[12];
	end
	if (
		( ula_res_expected_prev[13] !== 1'bx ) && ( ula_res_prev[13] !== ula_res_expected_prev[13] )
		&& ((ula_res_expected_prev[13] !== last_ula_res_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[13] = ula_res_expected_prev[13];
	end
	if (
		( ula_res_expected_prev[14] !== 1'bx ) && ( ula_res_prev[14] !== ula_res_expected_prev[14] )
		&& ((ula_res_expected_prev[14] !== last_ula_res_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[14] = ula_res_expected_prev[14];
	end
	if (
		( ula_res_expected_prev[15] !== 1'bx ) && ( ula_res_prev[15] !== ula_res_expected_prev[15] )
		&& ((ula_res_expected_prev[15] !== last_ula_res_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[15] = ula_res_expected_prev[15];
	end
	if (
		( ula_res_expected_prev[16] !== 1'bx ) && ( ula_res_prev[16] !== ula_res_expected_prev[16] )
		&& ((ula_res_expected_prev[16] !== last_ula_res_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[16] = ula_res_expected_prev[16];
	end
	if (
		( ula_res_expected_prev[17] !== 1'bx ) && ( ula_res_prev[17] !== ula_res_expected_prev[17] )
		&& ((ula_res_expected_prev[17] !== last_ula_res_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[17] = ula_res_expected_prev[17];
	end
	if (
		( ula_res_expected_prev[18] !== 1'bx ) && ( ula_res_prev[18] !== ula_res_expected_prev[18] )
		&& ((ula_res_expected_prev[18] !== last_ula_res_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[18] = ula_res_expected_prev[18];
	end
	if (
		( ula_res_expected_prev[19] !== 1'bx ) && ( ula_res_prev[19] !== ula_res_expected_prev[19] )
		&& ((ula_res_expected_prev[19] !== last_ula_res_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[19] = ula_res_expected_prev[19];
	end
	if (
		( ula_res_expected_prev[20] !== 1'bx ) && ( ula_res_prev[20] !== ula_res_expected_prev[20] )
		&& ((ula_res_expected_prev[20] !== last_ula_res_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[20] = ula_res_expected_prev[20];
	end
	if (
		( ula_res_expected_prev[21] !== 1'bx ) && ( ula_res_prev[21] !== ula_res_expected_prev[21] )
		&& ((ula_res_expected_prev[21] !== last_ula_res_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[21] = ula_res_expected_prev[21];
	end
	if (
		( ula_res_expected_prev[22] !== 1'bx ) && ( ula_res_prev[22] !== ula_res_expected_prev[22] )
		&& ((ula_res_expected_prev[22] !== last_ula_res_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[22] = ula_res_expected_prev[22];
	end
	if (
		( ula_res_expected_prev[23] !== 1'bx ) && ( ula_res_prev[23] !== ula_res_expected_prev[23] )
		&& ((ula_res_expected_prev[23] !== last_ula_res_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[23] = ula_res_expected_prev[23];
	end
	if (
		( ula_res_expected_prev[24] !== 1'bx ) && ( ula_res_prev[24] !== ula_res_expected_prev[24] )
		&& ((ula_res_expected_prev[24] !== last_ula_res_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[24] = ula_res_expected_prev[24];
	end
	if (
		( ula_res_expected_prev[25] !== 1'bx ) && ( ula_res_prev[25] !== ula_res_expected_prev[25] )
		&& ((ula_res_expected_prev[25] !== last_ula_res_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[25] = ula_res_expected_prev[25];
	end
	if (
		( ula_res_expected_prev[26] !== 1'bx ) && ( ula_res_prev[26] !== ula_res_expected_prev[26] )
		&& ((ula_res_expected_prev[26] !== last_ula_res_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[26] = ula_res_expected_prev[26];
	end
	if (
		( ula_res_expected_prev[27] !== 1'bx ) && ( ula_res_prev[27] !== ula_res_expected_prev[27] )
		&& ((ula_res_expected_prev[27] !== last_ula_res_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[27] = ula_res_expected_prev[27];
	end
	if (
		( ula_res_expected_prev[28] !== 1'bx ) && ( ula_res_prev[28] !== ula_res_expected_prev[28] )
		&& ((ula_res_expected_prev[28] !== last_ula_res_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[28] = ula_res_expected_prev[28];
	end
	if (
		( ula_res_expected_prev[29] !== 1'bx ) && ( ula_res_prev[29] !== ula_res_expected_prev[29] )
		&& ((ula_res_expected_prev[29] !== last_ula_res_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[29] = ula_res_expected_prev[29];
	end
	if (
		( ula_res_expected_prev[30] !== 1'bx ) && ( ula_res_prev[30] !== ula_res_expected_prev[30] )
		&& ((ula_res_expected_prev[30] !== last_ula_res_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[30] = ula_res_expected_prev[30];
	end
	if (
		( ula_res_expected_prev[31] !== 1'bx ) && ( ula_res_prev[31] !== ula_res_expected_prev[31] )
		&& ((ula_res_expected_prev[31] !== last_ula_res_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_res[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_res_expected_prev);
		$display ("     Real value = %b", ula_res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ula_res_exp[31] = ula_res_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module iZero_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg IN_BUTTON;
reg reset;
reg [7:0] SLIDE_SWITCHES;
// wires                                               
wire [6:0] D1_DEZENA;
wire D1_SINAL;
wire [6:0] D1_UNIDADE;
wire [6:0] D2_DEZENA;
wire D2_SINAL;
wire [6:0] D2_UNIDADE;
wire [6:0] D3_CENTENA;
wire [6:0] D3_DEZENA;
wire [6:0] D3_MILHAR;
wire D3_SINAL;
wire [6:0] D3_UNIDADE;
wire [31:0] instrucao;
wire [7:0] leds_SLIDE_SWITCHES;
wire [31:0] ula_res;

wire sampler;                             

// assign statements (if any)                          
iZero i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.D1_DEZENA(D1_DEZENA),
	.D1_SINAL(D1_SINAL),
	.D1_UNIDADE(D1_UNIDADE),
	.D2_DEZENA(D2_DEZENA),
	.D2_SINAL(D2_SINAL),
	.D2_UNIDADE(D2_UNIDADE),
	.D3_CENTENA(D3_CENTENA),
	.D3_DEZENA(D3_DEZENA),
	.D3_MILHAR(D3_MILHAR),
	.D3_SINAL(D3_SINAL),
	.D3_UNIDADE(D3_UNIDADE),
	.IN_BUTTON(IN_BUTTON),
	.instrucao(instrucao),
	.leds_SLIDE_SWITCHES(leds_SLIDE_SWITCHES),
	.reset(reset),
	.SLIDE_SWITCHES(SLIDE_SWITCHES),
	.ula_res(ula_res)
);

// clock
initial
begin
	clock = 1'b1;
	# 100000;
	repeat(4)
	begin
		clock = 1'b0;
		clock = #100000 1'b1;
		# 100000;
	end
	clock = 1'b0;
end 

// IN_BUTTON
initial
begin
	IN_BUTTON = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// SLIDE_SWITCHES[ 7 ]
initial
begin
	SLIDE_SWITCHES[7] = 1'b0;
end 
// SLIDE_SWITCHES[ 6 ]
initial
begin
	SLIDE_SWITCHES[6] = 1'b0;
end 
// SLIDE_SWITCHES[ 5 ]
initial
begin
	SLIDE_SWITCHES[5] = 1'b0;
end 
// SLIDE_SWITCHES[ 4 ]
initial
begin
	SLIDE_SWITCHES[4] = 1'b0;
end 
// SLIDE_SWITCHES[ 3 ]
initial
begin
	SLIDE_SWITCHES[3] = 1'b0;
end 
// SLIDE_SWITCHES[ 2 ]
initial
begin
	SLIDE_SWITCHES[2] = 1'b0;
end 
// SLIDE_SWITCHES[ 1 ]
initial
begin
	SLIDE_SWITCHES[1] = 1'b0;
end 
// SLIDE_SWITCHES[ 0 ]
initial
begin
	SLIDE_SWITCHES[0] = 1'b0;
end 

iZero_vlg_sample_tst tb_sample (
	.clock(clock),
	.IN_BUTTON(IN_BUTTON),
	.reset(reset),
	.SLIDE_SWITCHES(SLIDE_SWITCHES),
	.sampler_tx(sampler)
);

iZero_vlg_check_tst tb_out(
	.D1_DEZENA(D1_DEZENA),
	.D1_SINAL(D1_SINAL),
	.D1_UNIDADE(D1_UNIDADE),
	.D2_DEZENA(D2_DEZENA),
	.D2_SINAL(D2_SINAL),
	.D2_UNIDADE(D2_UNIDADE),
	.D3_CENTENA(D3_CENTENA),
	.D3_DEZENA(D3_DEZENA),
	.D3_MILHAR(D3_MILHAR),
	.D3_SINAL(D3_SINAL),
	.D3_UNIDADE(D3_UNIDADE),
	.instrucao(instrucao),
	.leds_SLIDE_SWITCHES(leds_SLIDE_SWITCHES),
	.ula_res(ula_res),
	.sampler_rx(sampler)
);
endmodule

