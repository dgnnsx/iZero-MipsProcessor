// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/14/2017 00:55:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    iZero
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module iZero_vlg_sample_tst(
	clock,
	IN_BUTTON,
	reset,
	SLIDE_SWITCHES,
	sampler_tx
);
input  clock;
input  IN_BUTTON;
input  reset;
input [7:0] SLIDE_SWITCHES;
output sampler_tx;

reg sample;
time current_time;
always @(clock or IN_BUTTON or reset or SLIDE_SWITCHES)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module iZero_vlg_check_tst (
	A,
	aluOp,
	B,
	D1_DEZENA,
	D1_SINAL,
	D1_UNIDADE,
	D2_DEZENA,
	D2_SINAL,
	D2_UNIDADE,
	D3_CENTENA,
	D3_DEZENA,
	D3_MILHAR,
	D3_SINAL,
	D3_UNIDADE,
	leds_SLIDE_SWITCHES,
	pcc,
	RES,
	sampler_rx
);
input [31:0] A;
input [4:0] aluOp;
input [31:0] B;
input [6:0] D1_DEZENA;
input  D1_SINAL;
input [6:0] D1_UNIDADE;
input [6:0] D2_DEZENA;
input  D2_SINAL;
input [6:0] D2_UNIDADE;
input [6:0] D3_CENTENA;
input [6:0] D3_DEZENA;
input [6:0] D3_MILHAR;
input  D3_SINAL;
input [6:0] D3_UNIDADE;
input [7:0] leds_SLIDE_SWITCHES;
input [25:0] pcc;
input [31:0] RES;
input sampler_rx;

reg [31:0] A_expected;
reg [4:0] aluOp_expected;
reg [31:0] B_expected;
reg [6:0] D1_DEZENA_expected;
reg  D1_SINAL_expected;
reg [6:0] D1_UNIDADE_expected;
reg [6:0] D2_DEZENA_expected;
reg  D2_SINAL_expected;
reg [6:0] D2_UNIDADE_expected;
reg [6:0] D3_CENTENA_expected;
reg [6:0] D3_DEZENA_expected;
reg [6:0] D3_MILHAR_expected;
reg  D3_SINAL_expected;
reg [6:0] D3_UNIDADE_expected;
reg [7:0] leds_SLIDE_SWITCHES_expected;
reg [25:0] pcc_expected;
reg [31:0] RES_expected;

reg [31:0] A_prev;
reg [4:0] aluOp_prev;
reg [31:0] B_prev;
reg [6:0] D1_DEZENA_prev;
reg  D1_SINAL_prev;
reg [6:0] D1_UNIDADE_prev;
reg [6:0] D2_DEZENA_prev;
reg  D2_SINAL_prev;
reg [6:0] D2_UNIDADE_prev;
reg [6:0] D3_CENTENA_prev;
reg [6:0] D3_DEZENA_prev;
reg [6:0] D3_MILHAR_prev;
reg  D3_SINAL_prev;
reg [6:0] D3_UNIDADE_prev;
reg [7:0] leds_SLIDE_SWITCHES_prev;
reg [25:0] pcc_prev;
reg [31:0] RES_prev;

reg [31:0] A_expected_prev;
reg [4:0] aluOp_expected_prev;
reg [31:0] B_expected_prev;
reg [6:0] D1_DEZENA_expected_prev;
reg  D1_SINAL_expected_prev;
reg [6:0] D1_UNIDADE_expected_prev;
reg [6:0] D2_DEZENA_expected_prev;
reg  D2_SINAL_expected_prev;
reg [6:0] D2_UNIDADE_expected_prev;
reg [6:0] D3_CENTENA_expected_prev;
reg [6:0] D3_DEZENA_expected_prev;
reg [6:0] D3_MILHAR_expected_prev;
reg  D3_SINAL_expected_prev;
reg [6:0] D3_UNIDADE_expected_prev;
reg [7:0] leds_SLIDE_SWITCHES_expected_prev;
reg [25:0] pcc_expected_prev;
reg [31:0] RES_expected_prev;

reg [31:0] last_A_exp;
reg [4:0] last_aluOp_exp;
reg [31:0] last_B_exp;
reg [6:0] last_D1_DEZENA_exp;
reg  last_D1_SINAL_exp;
reg [6:0] last_D1_UNIDADE_exp;
reg [6:0] last_D2_DEZENA_exp;
reg  last_D2_SINAL_exp;
reg [6:0] last_D2_UNIDADE_exp;
reg [6:0] last_D3_CENTENA_exp;
reg [6:0] last_D3_DEZENA_exp;
reg [6:0] last_D3_MILHAR_exp;
reg  last_D3_SINAL_exp;
reg [6:0] last_D3_UNIDADE_exp;
reg [7:0] last_leds_SLIDE_SWITCHES_exp;
reg [25:0] last_pcc_exp;
reg [31:0] last_RES_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	aluOp_prev = aluOp;
	B_prev = B;
	D1_DEZENA_prev = D1_DEZENA;
	D1_SINAL_prev = D1_SINAL;
	D1_UNIDADE_prev = D1_UNIDADE;
	D2_DEZENA_prev = D2_DEZENA;
	D2_SINAL_prev = D2_SINAL;
	D2_UNIDADE_prev = D2_UNIDADE;
	D3_CENTENA_prev = D3_CENTENA;
	D3_DEZENA_prev = D3_DEZENA;
	D3_MILHAR_prev = D3_MILHAR;
	D3_SINAL_prev = D3_SINAL;
	D3_UNIDADE_prev = D3_UNIDADE;
	leds_SLIDE_SWITCHES_prev = leds_SLIDE_SWITCHES;
	pcc_prev = pcc;
	RES_prev = RES;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	aluOp_expected_prev = aluOp_expected;
	B_expected_prev = B_expected;
	D1_DEZENA_expected_prev = D1_DEZENA_expected;
	D1_SINAL_expected_prev = D1_SINAL_expected;
	D1_UNIDADE_expected_prev = D1_UNIDADE_expected;
	D2_DEZENA_expected_prev = D2_DEZENA_expected;
	D2_SINAL_expected_prev = D2_SINAL_expected;
	D2_UNIDADE_expected_prev = D2_UNIDADE_expected;
	D3_CENTENA_expected_prev = D3_CENTENA_expected;
	D3_DEZENA_expected_prev = D3_DEZENA_expected;
	D3_MILHAR_expected_prev = D3_MILHAR_expected;
	D3_SINAL_expected_prev = D3_SINAL_expected;
	D3_UNIDADE_expected_prev = D3_UNIDADE_expected;
	leds_SLIDE_SWITCHES_expected_prev = leds_SLIDE_SWITCHES_expected;
	pcc_expected_prev = pcc_expected;
	RES_expected_prev = RES_expected;
end


// expected A[ 31 ]
initial
begin
	A_expected[31] = 1'bX;
end 
// expected A[ 30 ]
initial
begin
	A_expected[30] = 1'bX;
end 
// expected A[ 29 ]
initial
begin
	A_expected[29] = 1'bX;
end 
// expected A[ 28 ]
initial
begin
	A_expected[28] = 1'bX;
end 
// expected A[ 27 ]
initial
begin
	A_expected[27] = 1'bX;
end 
// expected A[ 26 ]
initial
begin
	A_expected[26] = 1'bX;
end 
// expected A[ 25 ]
initial
begin
	A_expected[25] = 1'bX;
end 
// expected A[ 24 ]
initial
begin
	A_expected[24] = 1'bX;
end 
// expected A[ 23 ]
initial
begin
	A_expected[23] = 1'bX;
end 
// expected A[ 22 ]
initial
begin
	A_expected[22] = 1'bX;
end 
// expected A[ 21 ]
initial
begin
	A_expected[21] = 1'bX;
end 
// expected A[ 20 ]
initial
begin
	A_expected[20] = 1'bX;
end 
// expected A[ 19 ]
initial
begin
	A_expected[19] = 1'bX;
end 
// expected A[ 18 ]
initial
begin
	A_expected[18] = 1'bX;
end 
// expected A[ 17 ]
initial
begin
	A_expected[17] = 1'bX;
end 
// expected A[ 16 ]
initial
begin
	A_expected[16] = 1'bX;
end 
// expected A[ 15 ]
initial
begin
	A_expected[15] = 1'bX;
end 
// expected A[ 14 ]
initial
begin
	A_expected[14] = 1'bX;
end 
// expected A[ 13 ]
initial
begin
	A_expected[13] = 1'bX;
end 
// expected A[ 12 ]
initial
begin
	A_expected[12] = 1'bX;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'bX;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'bX;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'bX;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 31 ]
initial
begin
	B_expected[31] = 1'bX;
end 
// expected B[ 30 ]
initial
begin
	B_expected[30] = 1'bX;
end 
// expected B[ 29 ]
initial
begin
	B_expected[29] = 1'bX;
end 
// expected B[ 28 ]
initial
begin
	B_expected[28] = 1'bX;
end 
// expected B[ 27 ]
initial
begin
	B_expected[27] = 1'bX;
end 
// expected B[ 26 ]
initial
begin
	B_expected[26] = 1'bX;
end 
// expected B[ 25 ]
initial
begin
	B_expected[25] = 1'bX;
end 
// expected B[ 24 ]
initial
begin
	B_expected[24] = 1'bX;
end 
// expected B[ 23 ]
initial
begin
	B_expected[23] = 1'bX;
end 
// expected B[ 22 ]
initial
begin
	B_expected[22] = 1'bX;
end 
// expected B[ 21 ]
initial
begin
	B_expected[21] = 1'bX;
end 
// expected B[ 20 ]
initial
begin
	B_expected[20] = 1'bX;
end 
// expected B[ 19 ]
initial
begin
	B_expected[19] = 1'bX;
end 
// expected B[ 18 ]
initial
begin
	B_expected[18] = 1'bX;
end 
// expected B[ 17 ]
initial
begin
	B_expected[17] = 1'bX;
end 
// expected B[ 16 ]
initial
begin
	B_expected[16] = 1'bX;
end 
// expected B[ 15 ]
initial
begin
	B_expected[15] = 1'bX;
end 
// expected B[ 14 ]
initial
begin
	B_expected[14] = 1'bX;
end 
// expected B[ 13 ]
initial
begin
	B_expected[13] = 1'bX;
end 
// expected B[ 12 ]
initial
begin
	B_expected[12] = 1'bX;
end 
// expected B[ 11 ]
initial
begin
	B_expected[11] = 1'bX;
end 
// expected B[ 10 ]
initial
begin
	B_expected[10] = 1'bX;
end 
// expected B[ 9 ]
initial
begin
	B_expected[9] = 1'bX;
end 
// expected B[ 8 ]
initial
begin
	B_expected[8] = 1'bX;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected RES[ 31 ]
initial
begin
	RES_expected[31] = 1'bX;
end 
// expected RES[ 30 ]
initial
begin
	RES_expected[30] = 1'bX;
end 
// expected RES[ 29 ]
initial
begin
	RES_expected[29] = 1'bX;
end 
// expected RES[ 28 ]
initial
begin
	RES_expected[28] = 1'bX;
end 
// expected RES[ 27 ]
initial
begin
	RES_expected[27] = 1'bX;
end 
// expected RES[ 26 ]
initial
begin
	RES_expected[26] = 1'bX;
end 
// expected RES[ 25 ]
initial
begin
	RES_expected[25] = 1'bX;
end 
// expected RES[ 24 ]
initial
begin
	RES_expected[24] = 1'bX;
end 
// expected RES[ 23 ]
initial
begin
	RES_expected[23] = 1'bX;
end 
// expected RES[ 22 ]
initial
begin
	RES_expected[22] = 1'bX;
end 
// expected RES[ 21 ]
initial
begin
	RES_expected[21] = 1'bX;
end 
// expected RES[ 20 ]
initial
begin
	RES_expected[20] = 1'bX;
end 
// expected RES[ 19 ]
initial
begin
	RES_expected[19] = 1'bX;
end 
// expected RES[ 18 ]
initial
begin
	RES_expected[18] = 1'bX;
end 
// expected RES[ 17 ]
initial
begin
	RES_expected[17] = 1'bX;
end 
// expected RES[ 16 ]
initial
begin
	RES_expected[16] = 1'bX;
end 
// expected RES[ 15 ]
initial
begin
	RES_expected[15] = 1'bX;
end 
// expected RES[ 14 ]
initial
begin
	RES_expected[14] = 1'bX;
end 
// expected RES[ 13 ]
initial
begin
	RES_expected[13] = 1'bX;
end 
// expected RES[ 12 ]
initial
begin
	RES_expected[12] = 1'bX;
end 
// expected RES[ 11 ]
initial
begin
	RES_expected[11] = 1'bX;
end 
// expected RES[ 10 ]
initial
begin
	RES_expected[10] = 1'bX;
end 
// expected RES[ 9 ]
initial
begin
	RES_expected[9] = 1'bX;
end 
// expected RES[ 8 ]
initial
begin
	RES_expected[8] = 1'bX;
end 
// expected RES[ 7 ]
initial
begin
	RES_expected[7] = 1'bX;
end 
// expected RES[ 6 ]
initial
begin
	RES_expected[6] = 1'bX;
end 
// expected RES[ 5 ]
initial
begin
	RES_expected[5] = 1'bX;
end 
// expected RES[ 4 ]
initial
begin
	RES_expected[4] = 1'bX;
end 
// expected RES[ 3 ]
initial
begin
	RES_expected[3] = 1'bX;
end 
// expected RES[ 2 ]
initial
begin
	RES_expected[2] = 1'bX;
end 
// expected RES[ 1 ]
initial
begin
	RES_expected[1] = 1'bX;
end 
// expected RES[ 0 ]
initial
begin
	RES_expected[0] = 1'bX;
end 
// expected aluOp[ 4 ]
initial
begin
	aluOp_expected[4] = 1'bX;
end 
// expected aluOp[ 3 ]
initial
begin
	aluOp_expected[3] = 1'bX;
end 
// expected aluOp[ 2 ]
initial
begin
	aluOp_expected[2] = 1'bX;
end 
// expected aluOp[ 1 ]
initial
begin
	aluOp_expected[1] = 1'bX;
end 
// expected aluOp[ 0 ]
initial
begin
	aluOp_expected[0] = 1'bX;
end 
// expected pcc[ 25 ]
initial
begin
	pcc_expected[25] = 1'bX;
end 
// expected pcc[ 24 ]
initial
begin
	pcc_expected[24] = 1'bX;
end 
// expected pcc[ 23 ]
initial
begin
	pcc_expected[23] = 1'bX;
end 
// expected pcc[ 22 ]
initial
begin
	pcc_expected[22] = 1'bX;
end 
// expected pcc[ 21 ]
initial
begin
	pcc_expected[21] = 1'bX;
end 
// expected pcc[ 20 ]
initial
begin
	pcc_expected[20] = 1'bX;
end 
// expected pcc[ 19 ]
initial
begin
	pcc_expected[19] = 1'bX;
end 
// expected pcc[ 18 ]
initial
begin
	pcc_expected[18] = 1'bX;
end 
// expected pcc[ 17 ]
initial
begin
	pcc_expected[17] = 1'bX;
end 
// expected pcc[ 16 ]
initial
begin
	pcc_expected[16] = 1'bX;
end 
// expected pcc[ 15 ]
initial
begin
	pcc_expected[15] = 1'bX;
end 
// expected pcc[ 14 ]
initial
begin
	pcc_expected[14] = 1'bX;
end 
// expected pcc[ 13 ]
initial
begin
	pcc_expected[13] = 1'bX;
end 
// expected pcc[ 12 ]
initial
begin
	pcc_expected[12] = 1'bX;
end 
// expected pcc[ 11 ]
initial
begin
	pcc_expected[11] = 1'bX;
end 
// expected pcc[ 10 ]
initial
begin
	pcc_expected[10] = 1'bX;
end 
// expected pcc[ 9 ]
initial
begin
	pcc_expected[9] = 1'bX;
end 
// expected pcc[ 8 ]
initial
begin
	pcc_expected[8] = 1'bX;
end 
// expected pcc[ 7 ]
initial
begin
	pcc_expected[7] = 1'bX;
end 
// expected pcc[ 6 ]
initial
begin
	pcc_expected[6] = 1'bX;
end 
// expected pcc[ 5 ]
initial
begin
	pcc_expected[5] = 1'bX;
end 
// expected pcc[ 4 ]
initial
begin
	pcc_expected[4] = 1'bX;
end 
// expected pcc[ 3 ]
initial
begin
	pcc_expected[3] = 1'bX;
end 
// expected pcc[ 2 ]
initial
begin
	pcc_expected[2] = 1'bX;
end 
// expected pcc[ 1 ]
initial
begin
	pcc_expected[1] = 1'bX;
end 
// expected pcc[ 0 ]
initial
begin
	pcc_expected[0] = 1'bX;
end 
// expected D1_DEZENA[ 6 ]
initial
begin
	D1_DEZENA_expected[6] = 1'bX;
end 
// expected D1_DEZENA[ 5 ]
initial
begin
	D1_DEZENA_expected[5] = 1'bX;
end 
// expected D1_DEZENA[ 4 ]
initial
begin
	D1_DEZENA_expected[4] = 1'bX;
end 
// expected D1_DEZENA[ 3 ]
initial
begin
	D1_DEZENA_expected[3] = 1'bX;
end 
// expected D1_DEZENA[ 2 ]
initial
begin
	D1_DEZENA_expected[2] = 1'bX;
end 
// expected D1_DEZENA[ 1 ]
initial
begin
	D1_DEZENA_expected[1] = 1'bX;
end 
// expected D1_DEZENA[ 0 ]
initial
begin
	D1_DEZENA_expected[0] = 1'bX;
end 

// expected D1_SINAL
initial
begin
	D1_SINAL_expected = 1'bX;
end 
// expected D1_UNIDADE[ 6 ]
initial
begin
	D1_UNIDADE_expected[6] = 1'bX;
end 
// expected D1_UNIDADE[ 5 ]
initial
begin
	D1_UNIDADE_expected[5] = 1'bX;
end 
// expected D1_UNIDADE[ 4 ]
initial
begin
	D1_UNIDADE_expected[4] = 1'bX;
end 
// expected D1_UNIDADE[ 3 ]
initial
begin
	D1_UNIDADE_expected[3] = 1'bX;
end 
// expected D1_UNIDADE[ 2 ]
initial
begin
	D1_UNIDADE_expected[2] = 1'bX;
end 
// expected D1_UNIDADE[ 1 ]
initial
begin
	D1_UNIDADE_expected[1] = 1'bX;
end 
// expected D1_UNIDADE[ 0 ]
initial
begin
	D1_UNIDADE_expected[0] = 1'bX;
end 
// expected D2_DEZENA[ 6 ]
initial
begin
	D2_DEZENA_expected[6] = 1'bX;
end 
// expected D2_DEZENA[ 5 ]
initial
begin
	D2_DEZENA_expected[5] = 1'bX;
end 
// expected D2_DEZENA[ 4 ]
initial
begin
	D2_DEZENA_expected[4] = 1'bX;
end 
// expected D2_DEZENA[ 3 ]
initial
begin
	D2_DEZENA_expected[3] = 1'bX;
end 
// expected D2_DEZENA[ 2 ]
initial
begin
	D2_DEZENA_expected[2] = 1'bX;
end 
// expected D2_DEZENA[ 1 ]
initial
begin
	D2_DEZENA_expected[1] = 1'bX;
end 
// expected D2_DEZENA[ 0 ]
initial
begin
	D2_DEZENA_expected[0] = 1'bX;
end 

// expected D2_SINAL
initial
begin
	D2_SINAL_expected = 1'bX;
end 
// expected D2_UNIDADE[ 6 ]
initial
begin
	D2_UNIDADE_expected[6] = 1'bX;
end 
// expected D2_UNIDADE[ 5 ]
initial
begin
	D2_UNIDADE_expected[5] = 1'bX;
end 
// expected D2_UNIDADE[ 4 ]
initial
begin
	D2_UNIDADE_expected[4] = 1'bX;
end 
// expected D2_UNIDADE[ 3 ]
initial
begin
	D2_UNIDADE_expected[3] = 1'bX;
end 
// expected D2_UNIDADE[ 2 ]
initial
begin
	D2_UNIDADE_expected[2] = 1'bX;
end 
// expected D2_UNIDADE[ 1 ]
initial
begin
	D2_UNIDADE_expected[1] = 1'bX;
end 
// expected D2_UNIDADE[ 0 ]
initial
begin
	D2_UNIDADE_expected[0] = 1'bX;
end 
// expected D3_CENTENA[ 6 ]
initial
begin
	D3_CENTENA_expected[6] = 1'bX;
end 
// expected D3_CENTENA[ 5 ]
initial
begin
	D3_CENTENA_expected[5] = 1'bX;
end 
// expected D3_CENTENA[ 4 ]
initial
begin
	D3_CENTENA_expected[4] = 1'bX;
end 
// expected D3_CENTENA[ 3 ]
initial
begin
	D3_CENTENA_expected[3] = 1'bX;
end 
// expected D3_CENTENA[ 2 ]
initial
begin
	D3_CENTENA_expected[2] = 1'bX;
end 
// expected D3_CENTENA[ 1 ]
initial
begin
	D3_CENTENA_expected[1] = 1'bX;
end 
// expected D3_CENTENA[ 0 ]
initial
begin
	D3_CENTENA_expected[0] = 1'bX;
end 
// expected D3_DEZENA[ 6 ]
initial
begin
	D3_DEZENA_expected[6] = 1'bX;
end 
// expected D3_DEZENA[ 5 ]
initial
begin
	D3_DEZENA_expected[5] = 1'bX;
end 
// expected D3_DEZENA[ 4 ]
initial
begin
	D3_DEZENA_expected[4] = 1'bX;
end 
// expected D3_DEZENA[ 3 ]
initial
begin
	D3_DEZENA_expected[3] = 1'bX;
end 
// expected D3_DEZENA[ 2 ]
initial
begin
	D3_DEZENA_expected[2] = 1'bX;
end 
// expected D3_DEZENA[ 1 ]
initial
begin
	D3_DEZENA_expected[1] = 1'bX;
end 
// expected D3_DEZENA[ 0 ]
initial
begin
	D3_DEZENA_expected[0] = 1'bX;
end 
// expected D3_MILHAR[ 6 ]
initial
begin
	D3_MILHAR_expected[6] = 1'bX;
end 
// expected D3_MILHAR[ 5 ]
initial
begin
	D3_MILHAR_expected[5] = 1'bX;
end 
// expected D3_MILHAR[ 4 ]
initial
begin
	D3_MILHAR_expected[4] = 1'bX;
end 
// expected D3_MILHAR[ 3 ]
initial
begin
	D3_MILHAR_expected[3] = 1'bX;
end 
// expected D3_MILHAR[ 2 ]
initial
begin
	D3_MILHAR_expected[2] = 1'bX;
end 
// expected D3_MILHAR[ 1 ]
initial
begin
	D3_MILHAR_expected[1] = 1'bX;
end 
// expected D3_MILHAR[ 0 ]
initial
begin
	D3_MILHAR_expected[0] = 1'bX;
end 

// expected D3_SINAL
initial
begin
	D3_SINAL_expected = 1'bX;
end 
// expected D3_UNIDADE[ 6 ]
initial
begin
	D3_UNIDADE_expected[6] = 1'bX;
end 
// expected D3_UNIDADE[ 5 ]
initial
begin
	D3_UNIDADE_expected[5] = 1'bX;
end 
// expected D3_UNIDADE[ 4 ]
initial
begin
	D3_UNIDADE_expected[4] = 1'bX;
end 
// expected D3_UNIDADE[ 3 ]
initial
begin
	D3_UNIDADE_expected[3] = 1'bX;
end 
// expected D3_UNIDADE[ 2 ]
initial
begin
	D3_UNIDADE_expected[2] = 1'bX;
end 
// expected D3_UNIDADE[ 1 ]
initial
begin
	D3_UNIDADE_expected[1] = 1'bX;
end 
// expected D3_UNIDADE[ 0 ]
initial
begin
	D3_UNIDADE_expected[0] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 7 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[7] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 6 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[6] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 5 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[5] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 4 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[4] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 3 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[3] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 2 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[2] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 1 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[1] = 1'bX;
end 
// expected leds_SLIDE_SWITCHES[ 0 ]
initial
begin
	leds_SLIDE_SWITCHES_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or aluOp_expected or aluOp or B_expected or B or D1_DEZENA_expected or D1_DEZENA or D1_SINAL_expected or D1_SINAL or D1_UNIDADE_expected or D1_UNIDADE or D2_DEZENA_expected or D2_DEZENA or D2_SINAL_expected or D2_SINAL or D2_UNIDADE_expected or D2_UNIDADE or D3_CENTENA_expected or D3_CENTENA or D3_DEZENA_expected or D3_DEZENA or D3_MILHAR_expected or D3_MILHAR or D3_SINAL_expected or D3_SINAL or D3_UNIDADE_expected or D3_UNIDADE or leds_SLIDE_SWITCHES_expected or leds_SLIDE_SWITCHES or pcc_expected or pcc or RES_expected or RES)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected aluOp = %b | expected B = %b | expected D1_DEZENA = %b | expected D1_SINAL = %b | expected D1_UNIDADE = %b | expected D2_DEZENA = %b | expected D2_SINAL = %b | expected D2_UNIDADE = %b | expected D3_CENTENA = %b | expected D3_DEZENA = %b | expected D3_MILHAR = %b | expected D3_SINAL = %b | expected D3_UNIDADE = %b | expected leds_SLIDE_SWITCHES = %b | expected pcc = %b | expected RES = %b | ",A_expected_prev,aluOp_expected_prev,B_expected_prev,D1_DEZENA_expected_prev,D1_SINAL_expected_prev,D1_UNIDADE_expected_prev,D2_DEZENA_expected_prev,D2_SINAL_expected_prev,D2_UNIDADE_expected_prev,D3_CENTENA_expected_prev,D3_DEZENA_expected_prev,D3_MILHAR_expected_prev,D3_SINAL_expected_prev,D3_UNIDADE_expected_prev,leds_SLIDE_SWITCHES_expected_prev,pcc_expected_prev,RES_expected_prev);
	$display("| real A = %b | real aluOp = %b | real B = %b | real D1_DEZENA = %b | real D1_SINAL = %b | real D1_UNIDADE = %b | real D2_DEZENA = %b | real D2_SINAL = %b | real D2_UNIDADE = %b | real D3_CENTENA = %b | real D3_DEZENA = %b | real D3_MILHAR = %b | real D3_SINAL = %b | real D3_UNIDADE = %b | real leds_SLIDE_SWITCHES = %b | real pcc = %b | real RES = %b | ",A_prev,aluOp_prev,B_prev,D1_DEZENA_prev,D1_SINAL_prev,D1_UNIDADE_prev,D2_DEZENA_prev,D2_SINAL_prev,D2_UNIDADE_prev,D3_CENTENA_prev,D3_DEZENA_prev,D3_MILHAR_prev,D3_SINAL_prev,D3_UNIDADE_prev,leds_SLIDE_SWITCHES_prev,pcc_prev,RES_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( A_expected_prev[12] !== 1'bx ) && ( A_prev[12] !== A_expected_prev[12] )
		&& ((A_expected_prev[12] !== last_A_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[12] = A_expected_prev[12];
	end
	if (
		( A_expected_prev[13] !== 1'bx ) && ( A_prev[13] !== A_expected_prev[13] )
		&& ((A_expected_prev[13] !== last_A_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[13] = A_expected_prev[13];
	end
	if (
		( A_expected_prev[14] !== 1'bx ) && ( A_prev[14] !== A_expected_prev[14] )
		&& ((A_expected_prev[14] !== last_A_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[14] = A_expected_prev[14];
	end
	if (
		( A_expected_prev[15] !== 1'bx ) && ( A_prev[15] !== A_expected_prev[15] )
		&& ((A_expected_prev[15] !== last_A_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[15] = A_expected_prev[15];
	end
	if (
		( A_expected_prev[16] !== 1'bx ) && ( A_prev[16] !== A_expected_prev[16] )
		&& ((A_expected_prev[16] !== last_A_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[16] = A_expected_prev[16];
	end
	if (
		( A_expected_prev[17] !== 1'bx ) && ( A_prev[17] !== A_expected_prev[17] )
		&& ((A_expected_prev[17] !== last_A_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[17] = A_expected_prev[17];
	end
	if (
		( A_expected_prev[18] !== 1'bx ) && ( A_prev[18] !== A_expected_prev[18] )
		&& ((A_expected_prev[18] !== last_A_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[18] = A_expected_prev[18];
	end
	if (
		( A_expected_prev[19] !== 1'bx ) && ( A_prev[19] !== A_expected_prev[19] )
		&& ((A_expected_prev[19] !== last_A_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[19] = A_expected_prev[19];
	end
	if (
		( A_expected_prev[20] !== 1'bx ) && ( A_prev[20] !== A_expected_prev[20] )
		&& ((A_expected_prev[20] !== last_A_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[20] = A_expected_prev[20];
	end
	if (
		( A_expected_prev[21] !== 1'bx ) && ( A_prev[21] !== A_expected_prev[21] )
		&& ((A_expected_prev[21] !== last_A_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[21] = A_expected_prev[21];
	end
	if (
		( A_expected_prev[22] !== 1'bx ) && ( A_prev[22] !== A_expected_prev[22] )
		&& ((A_expected_prev[22] !== last_A_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[22] = A_expected_prev[22];
	end
	if (
		( A_expected_prev[23] !== 1'bx ) && ( A_prev[23] !== A_expected_prev[23] )
		&& ((A_expected_prev[23] !== last_A_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[23] = A_expected_prev[23];
	end
	if (
		( A_expected_prev[24] !== 1'bx ) && ( A_prev[24] !== A_expected_prev[24] )
		&& ((A_expected_prev[24] !== last_A_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[24] = A_expected_prev[24];
	end
	if (
		( A_expected_prev[25] !== 1'bx ) && ( A_prev[25] !== A_expected_prev[25] )
		&& ((A_expected_prev[25] !== last_A_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[25] = A_expected_prev[25];
	end
	if (
		( A_expected_prev[26] !== 1'bx ) && ( A_prev[26] !== A_expected_prev[26] )
		&& ((A_expected_prev[26] !== last_A_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[26] = A_expected_prev[26];
	end
	if (
		( A_expected_prev[27] !== 1'bx ) && ( A_prev[27] !== A_expected_prev[27] )
		&& ((A_expected_prev[27] !== last_A_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[27] = A_expected_prev[27];
	end
	if (
		( A_expected_prev[28] !== 1'bx ) && ( A_prev[28] !== A_expected_prev[28] )
		&& ((A_expected_prev[28] !== last_A_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[28] = A_expected_prev[28];
	end
	if (
		( A_expected_prev[29] !== 1'bx ) && ( A_prev[29] !== A_expected_prev[29] )
		&& ((A_expected_prev[29] !== last_A_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[29] = A_expected_prev[29];
	end
	if (
		( A_expected_prev[30] !== 1'bx ) && ( A_prev[30] !== A_expected_prev[30] )
		&& ((A_expected_prev[30] !== last_A_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[30] = A_expected_prev[30];
	end
	if (
		( A_expected_prev[31] !== 1'bx ) && ( A_prev[31] !== A_expected_prev[31] )
		&& ((A_expected_prev[31] !== last_A_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[31] = A_expected_prev[31];
	end
	if (
		( aluOp_expected_prev[0] !== 1'bx ) && ( aluOp_prev[0] !== aluOp_expected_prev[0] )
		&& ((aluOp_expected_prev[0] !== last_aluOp_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluOp_exp[0] = aluOp_expected_prev[0];
	end
	if (
		( aluOp_expected_prev[1] !== 1'bx ) && ( aluOp_prev[1] !== aluOp_expected_prev[1] )
		&& ((aluOp_expected_prev[1] !== last_aluOp_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluOp_exp[1] = aluOp_expected_prev[1];
	end
	if (
		( aluOp_expected_prev[2] !== 1'bx ) && ( aluOp_prev[2] !== aluOp_expected_prev[2] )
		&& ((aluOp_expected_prev[2] !== last_aluOp_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluOp_exp[2] = aluOp_expected_prev[2];
	end
	if (
		( aluOp_expected_prev[3] !== 1'bx ) && ( aluOp_prev[3] !== aluOp_expected_prev[3] )
		&& ((aluOp_expected_prev[3] !== last_aluOp_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluOp_exp[3] = aluOp_expected_prev[3];
	end
	if (
		( aluOp_expected_prev[4] !== 1'bx ) && ( aluOp_prev[4] !== aluOp_expected_prev[4] )
		&& ((aluOp_expected_prev[4] !== last_aluOp_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluOp_exp[4] = aluOp_expected_prev[4];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( B_expected_prev[8] !== 1'bx ) && ( B_prev[8] !== B_expected_prev[8] )
		&& ((B_expected_prev[8] !== last_B_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[8] = B_expected_prev[8];
	end
	if (
		( B_expected_prev[9] !== 1'bx ) && ( B_prev[9] !== B_expected_prev[9] )
		&& ((B_expected_prev[9] !== last_B_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[9] = B_expected_prev[9];
	end
	if (
		( B_expected_prev[10] !== 1'bx ) && ( B_prev[10] !== B_expected_prev[10] )
		&& ((B_expected_prev[10] !== last_B_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[10] = B_expected_prev[10];
	end
	if (
		( B_expected_prev[11] !== 1'bx ) && ( B_prev[11] !== B_expected_prev[11] )
		&& ((B_expected_prev[11] !== last_B_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[11] = B_expected_prev[11];
	end
	if (
		( B_expected_prev[12] !== 1'bx ) && ( B_prev[12] !== B_expected_prev[12] )
		&& ((B_expected_prev[12] !== last_B_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[12] = B_expected_prev[12];
	end
	if (
		( B_expected_prev[13] !== 1'bx ) && ( B_prev[13] !== B_expected_prev[13] )
		&& ((B_expected_prev[13] !== last_B_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[13] = B_expected_prev[13];
	end
	if (
		( B_expected_prev[14] !== 1'bx ) && ( B_prev[14] !== B_expected_prev[14] )
		&& ((B_expected_prev[14] !== last_B_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[14] = B_expected_prev[14];
	end
	if (
		( B_expected_prev[15] !== 1'bx ) && ( B_prev[15] !== B_expected_prev[15] )
		&& ((B_expected_prev[15] !== last_B_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[15] = B_expected_prev[15];
	end
	if (
		( B_expected_prev[16] !== 1'bx ) && ( B_prev[16] !== B_expected_prev[16] )
		&& ((B_expected_prev[16] !== last_B_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[16] = B_expected_prev[16];
	end
	if (
		( B_expected_prev[17] !== 1'bx ) && ( B_prev[17] !== B_expected_prev[17] )
		&& ((B_expected_prev[17] !== last_B_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[17] = B_expected_prev[17];
	end
	if (
		( B_expected_prev[18] !== 1'bx ) && ( B_prev[18] !== B_expected_prev[18] )
		&& ((B_expected_prev[18] !== last_B_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[18] = B_expected_prev[18];
	end
	if (
		( B_expected_prev[19] !== 1'bx ) && ( B_prev[19] !== B_expected_prev[19] )
		&& ((B_expected_prev[19] !== last_B_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[19] = B_expected_prev[19];
	end
	if (
		( B_expected_prev[20] !== 1'bx ) && ( B_prev[20] !== B_expected_prev[20] )
		&& ((B_expected_prev[20] !== last_B_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[20] = B_expected_prev[20];
	end
	if (
		( B_expected_prev[21] !== 1'bx ) && ( B_prev[21] !== B_expected_prev[21] )
		&& ((B_expected_prev[21] !== last_B_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[21] = B_expected_prev[21];
	end
	if (
		( B_expected_prev[22] !== 1'bx ) && ( B_prev[22] !== B_expected_prev[22] )
		&& ((B_expected_prev[22] !== last_B_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[22] = B_expected_prev[22];
	end
	if (
		( B_expected_prev[23] !== 1'bx ) && ( B_prev[23] !== B_expected_prev[23] )
		&& ((B_expected_prev[23] !== last_B_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[23] = B_expected_prev[23];
	end
	if (
		( B_expected_prev[24] !== 1'bx ) && ( B_prev[24] !== B_expected_prev[24] )
		&& ((B_expected_prev[24] !== last_B_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[24] = B_expected_prev[24];
	end
	if (
		( B_expected_prev[25] !== 1'bx ) && ( B_prev[25] !== B_expected_prev[25] )
		&& ((B_expected_prev[25] !== last_B_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[25] = B_expected_prev[25];
	end
	if (
		( B_expected_prev[26] !== 1'bx ) && ( B_prev[26] !== B_expected_prev[26] )
		&& ((B_expected_prev[26] !== last_B_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[26] = B_expected_prev[26];
	end
	if (
		( B_expected_prev[27] !== 1'bx ) && ( B_prev[27] !== B_expected_prev[27] )
		&& ((B_expected_prev[27] !== last_B_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[27] = B_expected_prev[27];
	end
	if (
		( B_expected_prev[28] !== 1'bx ) && ( B_prev[28] !== B_expected_prev[28] )
		&& ((B_expected_prev[28] !== last_B_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[28] = B_expected_prev[28];
	end
	if (
		( B_expected_prev[29] !== 1'bx ) && ( B_prev[29] !== B_expected_prev[29] )
		&& ((B_expected_prev[29] !== last_B_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[29] = B_expected_prev[29];
	end
	if (
		( B_expected_prev[30] !== 1'bx ) && ( B_prev[30] !== B_expected_prev[30] )
		&& ((B_expected_prev[30] !== last_B_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[30] = B_expected_prev[30];
	end
	if (
		( B_expected_prev[31] !== 1'bx ) && ( B_prev[31] !== B_expected_prev[31] )
		&& ((B_expected_prev[31] !== last_B_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_exp[31] = B_expected_prev[31];
	end
	if (
		( D1_DEZENA_expected_prev[0] !== 1'bx ) && ( D1_DEZENA_prev[0] !== D1_DEZENA_expected_prev[0] )
		&& ((D1_DEZENA_expected_prev[0] !== last_D1_DEZENA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[0] = D1_DEZENA_expected_prev[0];
	end
	if (
		( D1_DEZENA_expected_prev[1] !== 1'bx ) && ( D1_DEZENA_prev[1] !== D1_DEZENA_expected_prev[1] )
		&& ((D1_DEZENA_expected_prev[1] !== last_D1_DEZENA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[1] = D1_DEZENA_expected_prev[1];
	end
	if (
		( D1_DEZENA_expected_prev[2] !== 1'bx ) && ( D1_DEZENA_prev[2] !== D1_DEZENA_expected_prev[2] )
		&& ((D1_DEZENA_expected_prev[2] !== last_D1_DEZENA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[2] = D1_DEZENA_expected_prev[2];
	end
	if (
		( D1_DEZENA_expected_prev[3] !== 1'bx ) && ( D1_DEZENA_prev[3] !== D1_DEZENA_expected_prev[3] )
		&& ((D1_DEZENA_expected_prev[3] !== last_D1_DEZENA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[3] = D1_DEZENA_expected_prev[3];
	end
	if (
		( D1_DEZENA_expected_prev[4] !== 1'bx ) && ( D1_DEZENA_prev[4] !== D1_DEZENA_expected_prev[4] )
		&& ((D1_DEZENA_expected_prev[4] !== last_D1_DEZENA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[4] = D1_DEZENA_expected_prev[4];
	end
	if (
		( D1_DEZENA_expected_prev[5] !== 1'bx ) && ( D1_DEZENA_prev[5] !== D1_DEZENA_expected_prev[5] )
		&& ((D1_DEZENA_expected_prev[5] !== last_D1_DEZENA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[5] = D1_DEZENA_expected_prev[5];
	end
	if (
		( D1_DEZENA_expected_prev[6] !== 1'bx ) && ( D1_DEZENA_prev[6] !== D1_DEZENA_expected_prev[6] )
		&& ((D1_DEZENA_expected_prev[6] !== last_D1_DEZENA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D1_DEZENA_exp[6] = D1_DEZENA_expected_prev[6];
	end
	if (
		( D1_SINAL_expected_prev !== 1'bx ) && ( D1_SINAL_prev !== D1_SINAL_expected_prev )
		&& ((D1_SINAL_expected_prev !== last_D1_SINAL_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_SINAL_expected_prev);
		$display ("     Real value = %b", D1_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D1_SINAL_exp = D1_SINAL_expected_prev;
	end
	if (
		( D1_UNIDADE_expected_prev[0] !== 1'bx ) && ( D1_UNIDADE_prev[0] !== D1_UNIDADE_expected_prev[0] )
		&& ((D1_UNIDADE_expected_prev[0] !== last_D1_UNIDADE_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[0] = D1_UNIDADE_expected_prev[0];
	end
	if (
		( D1_UNIDADE_expected_prev[1] !== 1'bx ) && ( D1_UNIDADE_prev[1] !== D1_UNIDADE_expected_prev[1] )
		&& ((D1_UNIDADE_expected_prev[1] !== last_D1_UNIDADE_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[1] = D1_UNIDADE_expected_prev[1];
	end
	if (
		( D1_UNIDADE_expected_prev[2] !== 1'bx ) && ( D1_UNIDADE_prev[2] !== D1_UNIDADE_expected_prev[2] )
		&& ((D1_UNIDADE_expected_prev[2] !== last_D1_UNIDADE_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[2] = D1_UNIDADE_expected_prev[2];
	end
	if (
		( D1_UNIDADE_expected_prev[3] !== 1'bx ) && ( D1_UNIDADE_prev[3] !== D1_UNIDADE_expected_prev[3] )
		&& ((D1_UNIDADE_expected_prev[3] !== last_D1_UNIDADE_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[3] = D1_UNIDADE_expected_prev[3];
	end
	if (
		( D1_UNIDADE_expected_prev[4] !== 1'bx ) && ( D1_UNIDADE_prev[4] !== D1_UNIDADE_expected_prev[4] )
		&& ((D1_UNIDADE_expected_prev[4] !== last_D1_UNIDADE_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[4] = D1_UNIDADE_expected_prev[4];
	end
	if (
		( D1_UNIDADE_expected_prev[5] !== 1'bx ) && ( D1_UNIDADE_prev[5] !== D1_UNIDADE_expected_prev[5] )
		&& ((D1_UNIDADE_expected_prev[5] !== last_D1_UNIDADE_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[5] = D1_UNIDADE_expected_prev[5];
	end
	if (
		( D1_UNIDADE_expected_prev[6] !== 1'bx ) && ( D1_UNIDADE_prev[6] !== D1_UNIDADE_expected_prev[6] )
		&& ((D1_UNIDADE_expected_prev[6] !== last_D1_UNIDADE_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_UNIDADE_exp[6] = D1_UNIDADE_expected_prev[6];
	end
	if (
		( D2_DEZENA_expected_prev[0] !== 1'bx ) && ( D2_DEZENA_prev[0] !== D2_DEZENA_expected_prev[0] )
		&& ((D2_DEZENA_expected_prev[0] !== last_D2_DEZENA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[0] = D2_DEZENA_expected_prev[0];
	end
	if (
		( D2_DEZENA_expected_prev[1] !== 1'bx ) && ( D2_DEZENA_prev[1] !== D2_DEZENA_expected_prev[1] )
		&& ((D2_DEZENA_expected_prev[1] !== last_D2_DEZENA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[1] = D2_DEZENA_expected_prev[1];
	end
	if (
		( D2_DEZENA_expected_prev[2] !== 1'bx ) && ( D2_DEZENA_prev[2] !== D2_DEZENA_expected_prev[2] )
		&& ((D2_DEZENA_expected_prev[2] !== last_D2_DEZENA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[2] = D2_DEZENA_expected_prev[2];
	end
	if (
		( D2_DEZENA_expected_prev[3] !== 1'bx ) && ( D2_DEZENA_prev[3] !== D2_DEZENA_expected_prev[3] )
		&& ((D2_DEZENA_expected_prev[3] !== last_D2_DEZENA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[3] = D2_DEZENA_expected_prev[3];
	end
	if (
		( D2_DEZENA_expected_prev[4] !== 1'bx ) && ( D2_DEZENA_prev[4] !== D2_DEZENA_expected_prev[4] )
		&& ((D2_DEZENA_expected_prev[4] !== last_D2_DEZENA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[4] = D2_DEZENA_expected_prev[4];
	end
	if (
		( D2_DEZENA_expected_prev[5] !== 1'bx ) && ( D2_DEZENA_prev[5] !== D2_DEZENA_expected_prev[5] )
		&& ((D2_DEZENA_expected_prev[5] !== last_D2_DEZENA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[5] = D2_DEZENA_expected_prev[5];
	end
	if (
		( D2_DEZENA_expected_prev[6] !== 1'bx ) && ( D2_DEZENA_prev[6] !== D2_DEZENA_expected_prev[6] )
		&& ((D2_DEZENA_expected_prev[6] !== last_D2_DEZENA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_DEZENA_exp[6] = D2_DEZENA_expected_prev[6];
	end
	if (
		( D2_SINAL_expected_prev !== 1'bx ) && ( D2_SINAL_prev !== D2_SINAL_expected_prev )
		&& ((D2_SINAL_expected_prev !== last_D2_SINAL_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_SINAL_expected_prev);
		$display ("     Real value = %b", D2_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D2_SINAL_exp = D2_SINAL_expected_prev;
	end
	if (
		( D2_UNIDADE_expected_prev[0] !== 1'bx ) && ( D2_UNIDADE_prev[0] !== D2_UNIDADE_expected_prev[0] )
		&& ((D2_UNIDADE_expected_prev[0] !== last_D2_UNIDADE_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[0] = D2_UNIDADE_expected_prev[0];
	end
	if (
		( D2_UNIDADE_expected_prev[1] !== 1'bx ) && ( D2_UNIDADE_prev[1] !== D2_UNIDADE_expected_prev[1] )
		&& ((D2_UNIDADE_expected_prev[1] !== last_D2_UNIDADE_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[1] = D2_UNIDADE_expected_prev[1];
	end
	if (
		( D2_UNIDADE_expected_prev[2] !== 1'bx ) && ( D2_UNIDADE_prev[2] !== D2_UNIDADE_expected_prev[2] )
		&& ((D2_UNIDADE_expected_prev[2] !== last_D2_UNIDADE_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[2] = D2_UNIDADE_expected_prev[2];
	end
	if (
		( D2_UNIDADE_expected_prev[3] !== 1'bx ) && ( D2_UNIDADE_prev[3] !== D2_UNIDADE_expected_prev[3] )
		&& ((D2_UNIDADE_expected_prev[3] !== last_D2_UNIDADE_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[3] = D2_UNIDADE_expected_prev[3];
	end
	if (
		( D2_UNIDADE_expected_prev[4] !== 1'bx ) && ( D2_UNIDADE_prev[4] !== D2_UNIDADE_expected_prev[4] )
		&& ((D2_UNIDADE_expected_prev[4] !== last_D2_UNIDADE_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[4] = D2_UNIDADE_expected_prev[4];
	end
	if (
		( D2_UNIDADE_expected_prev[5] !== 1'bx ) && ( D2_UNIDADE_prev[5] !== D2_UNIDADE_expected_prev[5] )
		&& ((D2_UNIDADE_expected_prev[5] !== last_D2_UNIDADE_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[5] = D2_UNIDADE_expected_prev[5];
	end
	if (
		( D2_UNIDADE_expected_prev[6] !== 1'bx ) && ( D2_UNIDADE_prev[6] !== D2_UNIDADE_expected_prev[6] )
		&& ((D2_UNIDADE_expected_prev[6] !== last_D2_UNIDADE_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D2_UNIDADE_exp[6] = D2_UNIDADE_expected_prev[6];
	end
	if (
		( D3_CENTENA_expected_prev[0] !== 1'bx ) && ( D3_CENTENA_prev[0] !== D3_CENTENA_expected_prev[0] )
		&& ((D3_CENTENA_expected_prev[0] !== last_D3_CENTENA_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[0] = D3_CENTENA_expected_prev[0];
	end
	if (
		( D3_CENTENA_expected_prev[1] !== 1'bx ) && ( D3_CENTENA_prev[1] !== D3_CENTENA_expected_prev[1] )
		&& ((D3_CENTENA_expected_prev[1] !== last_D3_CENTENA_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[1] = D3_CENTENA_expected_prev[1];
	end
	if (
		( D3_CENTENA_expected_prev[2] !== 1'bx ) && ( D3_CENTENA_prev[2] !== D3_CENTENA_expected_prev[2] )
		&& ((D3_CENTENA_expected_prev[2] !== last_D3_CENTENA_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[2] = D3_CENTENA_expected_prev[2];
	end
	if (
		( D3_CENTENA_expected_prev[3] !== 1'bx ) && ( D3_CENTENA_prev[3] !== D3_CENTENA_expected_prev[3] )
		&& ((D3_CENTENA_expected_prev[3] !== last_D3_CENTENA_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[3] = D3_CENTENA_expected_prev[3];
	end
	if (
		( D3_CENTENA_expected_prev[4] !== 1'bx ) && ( D3_CENTENA_prev[4] !== D3_CENTENA_expected_prev[4] )
		&& ((D3_CENTENA_expected_prev[4] !== last_D3_CENTENA_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[4] = D3_CENTENA_expected_prev[4];
	end
	if (
		( D3_CENTENA_expected_prev[5] !== 1'bx ) && ( D3_CENTENA_prev[5] !== D3_CENTENA_expected_prev[5] )
		&& ((D3_CENTENA_expected_prev[5] !== last_D3_CENTENA_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[5] = D3_CENTENA_expected_prev[5];
	end
	if (
		( D3_CENTENA_expected_prev[6] !== 1'bx ) && ( D3_CENTENA_prev[6] !== D3_CENTENA_expected_prev[6] )
		&& ((D3_CENTENA_expected_prev[6] !== last_D3_CENTENA_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_CENTENA_exp[6] = D3_CENTENA_expected_prev[6];
	end
	if (
		( D3_DEZENA_expected_prev[0] !== 1'bx ) && ( D3_DEZENA_prev[0] !== D3_DEZENA_expected_prev[0] )
		&& ((D3_DEZENA_expected_prev[0] !== last_D3_DEZENA_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[0] = D3_DEZENA_expected_prev[0];
	end
	if (
		( D3_DEZENA_expected_prev[1] !== 1'bx ) && ( D3_DEZENA_prev[1] !== D3_DEZENA_expected_prev[1] )
		&& ((D3_DEZENA_expected_prev[1] !== last_D3_DEZENA_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[1] = D3_DEZENA_expected_prev[1];
	end
	if (
		( D3_DEZENA_expected_prev[2] !== 1'bx ) && ( D3_DEZENA_prev[2] !== D3_DEZENA_expected_prev[2] )
		&& ((D3_DEZENA_expected_prev[2] !== last_D3_DEZENA_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[2] = D3_DEZENA_expected_prev[2];
	end
	if (
		( D3_DEZENA_expected_prev[3] !== 1'bx ) && ( D3_DEZENA_prev[3] !== D3_DEZENA_expected_prev[3] )
		&& ((D3_DEZENA_expected_prev[3] !== last_D3_DEZENA_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[3] = D3_DEZENA_expected_prev[3];
	end
	if (
		( D3_DEZENA_expected_prev[4] !== 1'bx ) && ( D3_DEZENA_prev[4] !== D3_DEZENA_expected_prev[4] )
		&& ((D3_DEZENA_expected_prev[4] !== last_D3_DEZENA_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[4] = D3_DEZENA_expected_prev[4];
	end
	if (
		( D3_DEZENA_expected_prev[5] !== 1'bx ) && ( D3_DEZENA_prev[5] !== D3_DEZENA_expected_prev[5] )
		&& ((D3_DEZENA_expected_prev[5] !== last_D3_DEZENA_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[5] = D3_DEZENA_expected_prev[5];
	end
	if (
		( D3_DEZENA_expected_prev[6] !== 1'bx ) && ( D3_DEZENA_prev[6] !== D3_DEZENA_expected_prev[6] )
		&& ((D3_DEZENA_expected_prev[6] !== last_D3_DEZENA_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_DEZENA_exp[6] = D3_DEZENA_expected_prev[6];
	end
	if (
		( D3_MILHAR_expected_prev[0] !== 1'bx ) && ( D3_MILHAR_prev[0] !== D3_MILHAR_expected_prev[0] )
		&& ((D3_MILHAR_expected_prev[0] !== last_D3_MILHAR_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[0] = D3_MILHAR_expected_prev[0];
	end
	if (
		( D3_MILHAR_expected_prev[1] !== 1'bx ) && ( D3_MILHAR_prev[1] !== D3_MILHAR_expected_prev[1] )
		&& ((D3_MILHAR_expected_prev[1] !== last_D3_MILHAR_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[1] = D3_MILHAR_expected_prev[1];
	end
	if (
		( D3_MILHAR_expected_prev[2] !== 1'bx ) && ( D3_MILHAR_prev[2] !== D3_MILHAR_expected_prev[2] )
		&& ((D3_MILHAR_expected_prev[2] !== last_D3_MILHAR_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[2] = D3_MILHAR_expected_prev[2];
	end
	if (
		( D3_MILHAR_expected_prev[3] !== 1'bx ) && ( D3_MILHAR_prev[3] !== D3_MILHAR_expected_prev[3] )
		&& ((D3_MILHAR_expected_prev[3] !== last_D3_MILHAR_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[3] = D3_MILHAR_expected_prev[3];
	end
	if (
		( D3_MILHAR_expected_prev[4] !== 1'bx ) && ( D3_MILHAR_prev[4] !== D3_MILHAR_expected_prev[4] )
		&& ((D3_MILHAR_expected_prev[4] !== last_D3_MILHAR_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[4] = D3_MILHAR_expected_prev[4];
	end
	if (
		( D3_MILHAR_expected_prev[5] !== 1'bx ) && ( D3_MILHAR_prev[5] !== D3_MILHAR_expected_prev[5] )
		&& ((D3_MILHAR_expected_prev[5] !== last_D3_MILHAR_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[5] = D3_MILHAR_expected_prev[5];
	end
	if (
		( D3_MILHAR_expected_prev[6] !== 1'bx ) && ( D3_MILHAR_prev[6] !== D3_MILHAR_expected_prev[6] )
		&& ((D3_MILHAR_expected_prev[6] !== last_D3_MILHAR_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D3_MILHAR_exp[6] = D3_MILHAR_expected_prev[6];
	end
	if (
		( D3_SINAL_expected_prev !== 1'bx ) && ( D3_SINAL_prev !== D3_SINAL_expected_prev )
		&& ((D3_SINAL_expected_prev !== last_D3_SINAL_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_SINAL_expected_prev);
		$display ("     Real value = %b", D3_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D3_SINAL_exp = D3_SINAL_expected_prev;
	end
	if (
		( D3_UNIDADE_expected_prev[0] !== 1'bx ) && ( D3_UNIDADE_prev[0] !== D3_UNIDADE_expected_prev[0] )
		&& ((D3_UNIDADE_expected_prev[0] !== last_D3_UNIDADE_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[0] = D3_UNIDADE_expected_prev[0];
	end
	if (
		( D3_UNIDADE_expected_prev[1] !== 1'bx ) && ( D3_UNIDADE_prev[1] !== D3_UNIDADE_expected_prev[1] )
		&& ((D3_UNIDADE_expected_prev[1] !== last_D3_UNIDADE_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[1] = D3_UNIDADE_expected_prev[1];
	end
	if (
		( D3_UNIDADE_expected_prev[2] !== 1'bx ) && ( D3_UNIDADE_prev[2] !== D3_UNIDADE_expected_prev[2] )
		&& ((D3_UNIDADE_expected_prev[2] !== last_D3_UNIDADE_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[2] = D3_UNIDADE_expected_prev[2];
	end
	if (
		( D3_UNIDADE_expected_prev[3] !== 1'bx ) && ( D3_UNIDADE_prev[3] !== D3_UNIDADE_expected_prev[3] )
		&& ((D3_UNIDADE_expected_prev[3] !== last_D3_UNIDADE_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[3] = D3_UNIDADE_expected_prev[3];
	end
	if (
		( D3_UNIDADE_expected_prev[4] !== 1'bx ) && ( D3_UNIDADE_prev[4] !== D3_UNIDADE_expected_prev[4] )
		&& ((D3_UNIDADE_expected_prev[4] !== last_D3_UNIDADE_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[4] = D3_UNIDADE_expected_prev[4];
	end
	if (
		( D3_UNIDADE_expected_prev[5] !== 1'bx ) && ( D3_UNIDADE_prev[5] !== D3_UNIDADE_expected_prev[5] )
		&& ((D3_UNIDADE_expected_prev[5] !== last_D3_UNIDADE_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[5] = D3_UNIDADE_expected_prev[5];
	end
	if (
		( D3_UNIDADE_expected_prev[6] !== 1'bx ) && ( D3_UNIDADE_prev[6] !== D3_UNIDADE_expected_prev[6] )
		&& ((D3_UNIDADE_expected_prev[6] !== last_D3_UNIDADE_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D3_UNIDADE_exp[6] = D3_UNIDADE_expected_prev[6];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[0] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[0] !== leds_SLIDE_SWITCHES_expected_prev[0] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[0] !== last_leds_SLIDE_SWITCHES_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[0] = leds_SLIDE_SWITCHES_expected_prev[0];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[1] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[1] !== leds_SLIDE_SWITCHES_expected_prev[1] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[1] !== last_leds_SLIDE_SWITCHES_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[1] = leds_SLIDE_SWITCHES_expected_prev[1];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[2] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[2] !== leds_SLIDE_SWITCHES_expected_prev[2] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[2] !== last_leds_SLIDE_SWITCHES_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[2] = leds_SLIDE_SWITCHES_expected_prev[2];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[3] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[3] !== leds_SLIDE_SWITCHES_expected_prev[3] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[3] !== last_leds_SLIDE_SWITCHES_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[3] = leds_SLIDE_SWITCHES_expected_prev[3];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[4] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[4] !== leds_SLIDE_SWITCHES_expected_prev[4] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[4] !== last_leds_SLIDE_SWITCHES_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[4] = leds_SLIDE_SWITCHES_expected_prev[4];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[5] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[5] !== leds_SLIDE_SWITCHES_expected_prev[5] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[5] !== last_leds_SLIDE_SWITCHES_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[5] = leds_SLIDE_SWITCHES_expected_prev[5];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[6] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[6] !== leds_SLIDE_SWITCHES_expected_prev[6] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[6] !== last_leds_SLIDE_SWITCHES_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[6] = leds_SLIDE_SWITCHES_expected_prev[6];
	end
	if (
		( leds_SLIDE_SWITCHES_expected_prev[7] !== 1'bx ) && ( leds_SLIDE_SWITCHES_prev[7] !== leds_SLIDE_SWITCHES_expected_prev[7] )
		&& ((leds_SLIDE_SWITCHES_expected_prev[7] !== last_leds_SLIDE_SWITCHES_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds_SLIDE_SWITCHES[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_SLIDE_SWITCHES_expected_prev);
		$display ("     Real value = %b", leds_SLIDE_SWITCHES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leds_SLIDE_SWITCHES_exp[7] = leds_SLIDE_SWITCHES_expected_prev[7];
	end
	if (
		( pcc_expected_prev[0] !== 1'bx ) && ( pcc_prev[0] !== pcc_expected_prev[0] )
		&& ((pcc_expected_prev[0] !== last_pcc_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[0] = pcc_expected_prev[0];
	end
	if (
		( pcc_expected_prev[1] !== 1'bx ) && ( pcc_prev[1] !== pcc_expected_prev[1] )
		&& ((pcc_expected_prev[1] !== last_pcc_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[1] = pcc_expected_prev[1];
	end
	if (
		( pcc_expected_prev[2] !== 1'bx ) && ( pcc_prev[2] !== pcc_expected_prev[2] )
		&& ((pcc_expected_prev[2] !== last_pcc_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[2] = pcc_expected_prev[2];
	end
	if (
		( pcc_expected_prev[3] !== 1'bx ) && ( pcc_prev[3] !== pcc_expected_prev[3] )
		&& ((pcc_expected_prev[3] !== last_pcc_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[3] = pcc_expected_prev[3];
	end
	if (
		( pcc_expected_prev[4] !== 1'bx ) && ( pcc_prev[4] !== pcc_expected_prev[4] )
		&& ((pcc_expected_prev[4] !== last_pcc_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[4] = pcc_expected_prev[4];
	end
	if (
		( pcc_expected_prev[5] !== 1'bx ) && ( pcc_prev[5] !== pcc_expected_prev[5] )
		&& ((pcc_expected_prev[5] !== last_pcc_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[5] = pcc_expected_prev[5];
	end
	if (
		( pcc_expected_prev[6] !== 1'bx ) && ( pcc_prev[6] !== pcc_expected_prev[6] )
		&& ((pcc_expected_prev[6] !== last_pcc_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[6] = pcc_expected_prev[6];
	end
	if (
		( pcc_expected_prev[7] !== 1'bx ) && ( pcc_prev[7] !== pcc_expected_prev[7] )
		&& ((pcc_expected_prev[7] !== last_pcc_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[7] = pcc_expected_prev[7];
	end
	if (
		( pcc_expected_prev[8] !== 1'bx ) && ( pcc_prev[8] !== pcc_expected_prev[8] )
		&& ((pcc_expected_prev[8] !== last_pcc_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[8] = pcc_expected_prev[8];
	end
	if (
		( pcc_expected_prev[9] !== 1'bx ) && ( pcc_prev[9] !== pcc_expected_prev[9] )
		&& ((pcc_expected_prev[9] !== last_pcc_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[9] = pcc_expected_prev[9];
	end
	if (
		( pcc_expected_prev[10] !== 1'bx ) && ( pcc_prev[10] !== pcc_expected_prev[10] )
		&& ((pcc_expected_prev[10] !== last_pcc_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[10] = pcc_expected_prev[10];
	end
	if (
		( pcc_expected_prev[11] !== 1'bx ) && ( pcc_prev[11] !== pcc_expected_prev[11] )
		&& ((pcc_expected_prev[11] !== last_pcc_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[11] = pcc_expected_prev[11];
	end
	if (
		( pcc_expected_prev[12] !== 1'bx ) && ( pcc_prev[12] !== pcc_expected_prev[12] )
		&& ((pcc_expected_prev[12] !== last_pcc_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[12] = pcc_expected_prev[12];
	end
	if (
		( pcc_expected_prev[13] !== 1'bx ) && ( pcc_prev[13] !== pcc_expected_prev[13] )
		&& ((pcc_expected_prev[13] !== last_pcc_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[13] = pcc_expected_prev[13];
	end
	if (
		( pcc_expected_prev[14] !== 1'bx ) && ( pcc_prev[14] !== pcc_expected_prev[14] )
		&& ((pcc_expected_prev[14] !== last_pcc_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[14] = pcc_expected_prev[14];
	end
	if (
		( pcc_expected_prev[15] !== 1'bx ) && ( pcc_prev[15] !== pcc_expected_prev[15] )
		&& ((pcc_expected_prev[15] !== last_pcc_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[15] = pcc_expected_prev[15];
	end
	if (
		( pcc_expected_prev[16] !== 1'bx ) && ( pcc_prev[16] !== pcc_expected_prev[16] )
		&& ((pcc_expected_prev[16] !== last_pcc_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[16] = pcc_expected_prev[16];
	end
	if (
		( pcc_expected_prev[17] !== 1'bx ) && ( pcc_prev[17] !== pcc_expected_prev[17] )
		&& ((pcc_expected_prev[17] !== last_pcc_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[17] = pcc_expected_prev[17];
	end
	if (
		( pcc_expected_prev[18] !== 1'bx ) && ( pcc_prev[18] !== pcc_expected_prev[18] )
		&& ((pcc_expected_prev[18] !== last_pcc_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[18] = pcc_expected_prev[18];
	end
	if (
		( pcc_expected_prev[19] !== 1'bx ) && ( pcc_prev[19] !== pcc_expected_prev[19] )
		&& ((pcc_expected_prev[19] !== last_pcc_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[19] = pcc_expected_prev[19];
	end
	if (
		( pcc_expected_prev[20] !== 1'bx ) && ( pcc_prev[20] !== pcc_expected_prev[20] )
		&& ((pcc_expected_prev[20] !== last_pcc_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[20] = pcc_expected_prev[20];
	end
	if (
		( pcc_expected_prev[21] !== 1'bx ) && ( pcc_prev[21] !== pcc_expected_prev[21] )
		&& ((pcc_expected_prev[21] !== last_pcc_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[21] = pcc_expected_prev[21];
	end
	if (
		( pcc_expected_prev[22] !== 1'bx ) && ( pcc_prev[22] !== pcc_expected_prev[22] )
		&& ((pcc_expected_prev[22] !== last_pcc_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[22] = pcc_expected_prev[22];
	end
	if (
		( pcc_expected_prev[23] !== 1'bx ) && ( pcc_prev[23] !== pcc_expected_prev[23] )
		&& ((pcc_expected_prev[23] !== last_pcc_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[23] = pcc_expected_prev[23];
	end
	if (
		( pcc_expected_prev[24] !== 1'bx ) && ( pcc_prev[24] !== pcc_expected_prev[24] )
		&& ((pcc_expected_prev[24] !== last_pcc_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[24] = pcc_expected_prev[24];
	end
	if (
		( pcc_expected_prev[25] !== 1'bx ) && ( pcc_prev[25] !== pcc_expected_prev[25] )
		&& ((pcc_expected_prev[25] !== last_pcc_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcc_expected_prev);
		$display ("     Real value = %b", pcc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pcc_exp[25] = pcc_expected_prev[25];
	end
	if (
		( RES_expected_prev[0] !== 1'bx ) && ( RES_prev[0] !== RES_expected_prev[0] )
		&& ((RES_expected_prev[0] !== last_RES_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[0] = RES_expected_prev[0];
	end
	if (
		( RES_expected_prev[1] !== 1'bx ) && ( RES_prev[1] !== RES_expected_prev[1] )
		&& ((RES_expected_prev[1] !== last_RES_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[1] = RES_expected_prev[1];
	end
	if (
		( RES_expected_prev[2] !== 1'bx ) && ( RES_prev[2] !== RES_expected_prev[2] )
		&& ((RES_expected_prev[2] !== last_RES_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[2] = RES_expected_prev[2];
	end
	if (
		( RES_expected_prev[3] !== 1'bx ) && ( RES_prev[3] !== RES_expected_prev[3] )
		&& ((RES_expected_prev[3] !== last_RES_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[3] = RES_expected_prev[3];
	end
	if (
		( RES_expected_prev[4] !== 1'bx ) && ( RES_prev[4] !== RES_expected_prev[4] )
		&& ((RES_expected_prev[4] !== last_RES_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[4] = RES_expected_prev[4];
	end
	if (
		( RES_expected_prev[5] !== 1'bx ) && ( RES_prev[5] !== RES_expected_prev[5] )
		&& ((RES_expected_prev[5] !== last_RES_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[5] = RES_expected_prev[5];
	end
	if (
		( RES_expected_prev[6] !== 1'bx ) && ( RES_prev[6] !== RES_expected_prev[6] )
		&& ((RES_expected_prev[6] !== last_RES_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[6] = RES_expected_prev[6];
	end
	if (
		( RES_expected_prev[7] !== 1'bx ) && ( RES_prev[7] !== RES_expected_prev[7] )
		&& ((RES_expected_prev[7] !== last_RES_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[7] = RES_expected_prev[7];
	end
	if (
		( RES_expected_prev[8] !== 1'bx ) && ( RES_prev[8] !== RES_expected_prev[8] )
		&& ((RES_expected_prev[8] !== last_RES_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[8] = RES_expected_prev[8];
	end
	if (
		( RES_expected_prev[9] !== 1'bx ) && ( RES_prev[9] !== RES_expected_prev[9] )
		&& ((RES_expected_prev[9] !== last_RES_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[9] = RES_expected_prev[9];
	end
	if (
		( RES_expected_prev[10] !== 1'bx ) && ( RES_prev[10] !== RES_expected_prev[10] )
		&& ((RES_expected_prev[10] !== last_RES_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[10] = RES_expected_prev[10];
	end
	if (
		( RES_expected_prev[11] !== 1'bx ) && ( RES_prev[11] !== RES_expected_prev[11] )
		&& ((RES_expected_prev[11] !== last_RES_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[11] = RES_expected_prev[11];
	end
	if (
		( RES_expected_prev[12] !== 1'bx ) && ( RES_prev[12] !== RES_expected_prev[12] )
		&& ((RES_expected_prev[12] !== last_RES_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[12] = RES_expected_prev[12];
	end
	if (
		( RES_expected_prev[13] !== 1'bx ) && ( RES_prev[13] !== RES_expected_prev[13] )
		&& ((RES_expected_prev[13] !== last_RES_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[13] = RES_expected_prev[13];
	end
	if (
		( RES_expected_prev[14] !== 1'bx ) && ( RES_prev[14] !== RES_expected_prev[14] )
		&& ((RES_expected_prev[14] !== last_RES_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[14] = RES_expected_prev[14];
	end
	if (
		( RES_expected_prev[15] !== 1'bx ) && ( RES_prev[15] !== RES_expected_prev[15] )
		&& ((RES_expected_prev[15] !== last_RES_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[15] = RES_expected_prev[15];
	end
	if (
		( RES_expected_prev[16] !== 1'bx ) && ( RES_prev[16] !== RES_expected_prev[16] )
		&& ((RES_expected_prev[16] !== last_RES_exp[16]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[16] = RES_expected_prev[16];
	end
	if (
		( RES_expected_prev[17] !== 1'bx ) && ( RES_prev[17] !== RES_expected_prev[17] )
		&& ((RES_expected_prev[17] !== last_RES_exp[17]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[17] = RES_expected_prev[17];
	end
	if (
		( RES_expected_prev[18] !== 1'bx ) && ( RES_prev[18] !== RES_expected_prev[18] )
		&& ((RES_expected_prev[18] !== last_RES_exp[18]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[18] = RES_expected_prev[18];
	end
	if (
		( RES_expected_prev[19] !== 1'bx ) && ( RES_prev[19] !== RES_expected_prev[19] )
		&& ((RES_expected_prev[19] !== last_RES_exp[19]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[19] = RES_expected_prev[19];
	end
	if (
		( RES_expected_prev[20] !== 1'bx ) && ( RES_prev[20] !== RES_expected_prev[20] )
		&& ((RES_expected_prev[20] !== last_RES_exp[20]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[20] = RES_expected_prev[20];
	end
	if (
		( RES_expected_prev[21] !== 1'bx ) && ( RES_prev[21] !== RES_expected_prev[21] )
		&& ((RES_expected_prev[21] !== last_RES_exp[21]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[21] = RES_expected_prev[21];
	end
	if (
		( RES_expected_prev[22] !== 1'bx ) && ( RES_prev[22] !== RES_expected_prev[22] )
		&& ((RES_expected_prev[22] !== last_RES_exp[22]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[22] = RES_expected_prev[22];
	end
	if (
		( RES_expected_prev[23] !== 1'bx ) && ( RES_prev[23] !== RES_expected_prev[23] )
		&& ((RES_expected_prev[23] !== last_RES_exp[23]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[23] = RES_expected_prev[23];
	end
	if (
		( RES_expected_prev[24] !== 1'bx ) && ( RES_prev[24] !== RES_expected_prev[24] )
		&& ((RES_expected_prev[24] !== last_RES_exp[24]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[24] = RES_expected_prev[24];
	end
	if (
		( RES_expected_prev[25] !== 1'bx ) && ( RES_prev[25] !== RES_expected_prev[25] )
		&& ((RES_expected_prev[25] !== last_RES_exp[25]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[25] = RES_expected_prev[25];
	end
	if (
		( RES_expected_prev[26] !== 1'bx ) && ( RES_prev[26] !== RES_expected_prev[26] )
		&& ((RES_expected_prev[26] !== last_RES_exp[26]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[26] = RES_expected_prev[26];
	end
	if (
		( RES_expected_prev[27] !== 1'bx ) && ( RES_prev[27] !== RES_expected_prev[27] )
		&& ((RES_expected_prev[27] !== last_RES_exp[27]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[27] = RES_expected_prev[27];
	end
	if (
		( RES_expected_prev[28] !== 1'bx ) && ( RES_prev[28] !== RES_expected_prev[28] )
		&& ((RES_expected_prev[28] !== last_RES_exp[28]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[28] = RES_expected_prev[28];
	end
	if (
		( RES_expected_prev[29] !== 1'bx ) && ( RES_prev[29] !== RES_expected_prev[29] )
		&& ((RES_expected_prev[29] !== last_RES_exp[29]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[29] = RES_expected_prev[29];
	end
	if (
		( RES_expected_prev[30] !== 1'bx ) && ( RES_prev[30] !== RES_expected_prev[30] )
		&& ((RES_expected_prev[30] !== last_RES_exp[30]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[30] = RES_expected_prev[30];
	end
	if (
		( RES_expected_prev[31] !== 1'bx ) && ( RES_prev[31] !== RES_expected_prev[31] )
		&& ((RES_expected_prev[31] !== last_RES_exp[31]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RES[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RES_expected_prev);
		$display ("     Real value = %b", RES_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RES_exp[31] = RES_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module iZero_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg IN_BUTTON;
reg reset;
reg [7:0] SLIDE_SWITCHES;
// wires                                               
wire [31:0] A;
wire [4:0] aluOp;
wire [31:0] B;
wire [6:0] D1_DEZENA;
wire D1_SINAL;
wire [6:0] D1_UNIDADE;
wire [6:0] D2_DEZENA;
wire D2_SINAL;
wire [6:0] D2_UNIDADE;
wire [6:0] D3_CENTENA;
wire [6:0] D3_DEZENA;
wire [6:0] D3_MILHAR;
wire D3_SINAL;
wire [6:0] D3_UNIDADE;
wire [7:0] leds_SLIDE_SWITCHES;
wire [25:0] pcc;
wire [31:0] RES;

wire sampler;                             

// assign statements (if any)                          
iZero i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.aluOp(aluOp),
	.B(B),
	.clock(clock),
	.D1_DEZENA(D1_DEZENA),
	.D1_SINAL(D1_SINAL),
	.D1_UNIDADE(D1_UNIDADE),
	.D2_DEZENA(D2_DEZENA),
	.D2_SINAL(D2_SINAL),
	.D2_UNIDADE(D2_UNIDADE),
	.D3_CENTENA(D3_CENTENA),
	.D3_DEZENA(D3_DEZENA),
	.D3_MILHAR(D3_MILHAR),
	.D3_SINAL(D3_SINAL),
	.D3_UNIDADE(D3_UNIDADE),
	.IN_BUTTON(IN_BUTTON),
	.leds_SLIDE_SWITCHES(leds_SLIDE_SWITCHES),
	.pcc(pcc),
	.RES(RES),
	.reset(reset),
	.SLIDE_SWITCHES(SLIDE_SWITCHES)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// IN_BUTTON
initial
begin
	IN_BUTTON = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// SLIDE_SWITCHES[ 7 ]
initial
begin
	SLIDE_SWITCHES[7] = 1'b0;
end 
// SLIDE_SWITCHES[ 6 ]
initial
begin
	SLIDE_SWITCHES[6] = 1'b0;
end 
// SLIDE_SWITCHES[ 5 ]
initial
begin
	SLIDE_SWITCHES[5] = 1'b0;
end 
// SLIDE_SWITCHES[ 4 ]
initial
begin
	SLIDE_SWITCHES[4] = 1'b0;
end 
// SLIDE_SWITCHES[ 3 ]
initial
begin
	SLIDE_SWITCHES[3] = 1'b0;
end 
// SLIDE_SWITCHES[ 2 ]
initial
begin
	SLIDE_SWITCHES[2] = 1'b0;
end 
// SLIDE_SWITCHES[ 1 ]
initial
begin
	SLIDE_SWITCHES[1] = 1'b0;
end 
// SLIDE_SWITCHES[ 0 ]
initial
begin
	SLIDE_SWITCHES[0] = 1'b0;
end 

iZero_vlg_sample_tst tb_sample (
	.clock(clock),
	.IN_BUTTON(IN_BUTTON),
	.reset(reset),
	.SLIDE_SWITCHES(SLIDE_SWITCHES),
	.sampler_tx(sampler)
);

iZero_vlg_check_tst tb_out(
	.A(A),
	.aluOp(aluOp),
	.B(B),
	.D1_DEZENA(D1_DEZENA),
	.D1_SINAL(D1_SINAL),
	.D1_UNIDADE(D1_UNIDADE),
	.D2_DEZENA(D2_DEZENA),
	.D2_SINAL(D2_SINAL),
	.D2_UNIDADE(D2_UNIDADE),
	.D3_CENTENA(D3_CENTENA),
	.D3_DEZENA(D3_DEZENA),
	.D3_MILHAR(D3_MILHAR),
	.D3_SINAL(D3_SINAL),
	.D3_UNIDADE(D3_UNIDADE),
	.leds_SLIDE_SWITCHES(leds_SLIDE_SWITCHES),
	.pcc(pcc),
	.RES(RES),
	.sampler_rx(sampler)
);
endmodule

