// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2016 13:46:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    iZero
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module iZero_vlg_sample_tst(
	clock,
	halt,
	IN_BUTTON,
	reset,
	SLIDE_SWITCHES,
	sampler_tx
);
input  clock;
input  halt;
input  IN_BUTTON;
input  reset;
input [7:0] SLIDE_SWITCHES;
output sampler_tx;

reg sample;
time current_time;
always @(clock or halt or IN_BUTTON or reset or SLIDE_SWITCHES)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module iZero_vlg_check_tst (
	D1_DEZENA,
	D1_SINAL,
	D1_UNIDADE,
	D2_DEZENA,
	D2_SINAL,
	D2_UNIDADE,
	D3_CENTENA,
	D3_DEZENA,
	D3_MILHAR,
	D3_SINAL,
	D3_UNIDADE,
	DADOS_ESCRITOS,
	instrucao,
	leituraRS,
	leituraRT,
	PC,
	sampler_rx
);
input [6:0] D1_DEZENA;
input  D1_SINAL;
input [6:0] D1_UNIDADE;
input [6:0] D2_DEZENA;
input  D2_SINAL;
input [6:0] D2_UNIDADE;
input [6:0] D3_CENTENA;
input [6:0] D3_DEZENA;
input [6:0] D3_MILHAR;
input  D3_SINAL;
input [6:0] D3_UNIDADE;
input [31:0] DADOS_ESCRITOS;
input [31:0] instrucao;
input [31:0] leituraRS;
input [31:0] leituraRT;
input [25:0] PC;
input sampler_rx;

reg [6:0] D1_DEZENA_expected;
reg  D1_SINAL_expected;
reg [6:0] D1_UNIDADE_expected;
reg [6:0] D2_DEZENA_expected;
reg  D2_SINAL_expected;
reg [6:0] D2_UNIDADE_expected;
reg [6:0] D3_CENTENA_expected;
reg [6:0] D3_DEZENA_expected;
reg [6:0] D3_MILHAR_expected;
reg  D3_SINAL_expected;
reg [6:0] D3_UNIDADE_expected;
reg [31:0] DADOS_ESCRITOS_expected;
reg [31:0] instrucao_expected;
reg [31:0] leituraRS_expected;
reg [31:0] leituraRT_expected;
reg [25:0] PC_expected;

reg [6:0] D1_DEZENA_prev;
reg  D1_SINAL_prev;
reg [6:0] D1_UNIDADE_prev;
reg [6:0] D2_DEZENA_prev;
reg  D2_SINAL_prev;
reg [6:0] D2_UNIDADE_prev;
reg [6:0] D3_CENTENA_prev;
reg [6:0] D3_DEZENA_prev;
reg [6:0] D3_MILHAR_prev;
reg  D3_SINAL_prev;
reg [6:0] D3_UNIDADE_prev;
reg [31:0] DADOS_ESCRITOS_prev;
reg [31:0] instrucao_prev;
reg [31:0] leituraRS_prev;
reg [31:0] leituraRT_prev;
reg [25:0] PC_prev;

reg [6:0] D1_DEZENA_expected_prev;
reg  D1_SINAL_expected_prev;
reg [6:0] D1_UNIDADE_expected_prev;
reg [6:0] D2_DEZENA_expected_prev;
reg  D2_SINAL_expected_prev;
reg [6:0] D2_UNIDADE_expected_prev;
reg [6:0] D3_CENTENA_expected_prev;
reg [6:0] D3_DEZENA_expected_prev;
reg [6:0] D3_MILHAR_expected_prev;
reg  D3_SINAL_expected_prev;
reg [6:0] D3_UNIDADE_expected_prev;
reg [31:0] DADOS_ESCRITOS_expected_prev;
reg [31:0] instrucao_expected_prev;
reg [31:0] leituraRS_expected_prev;
reg [31:0] leituraRT_expected_prev;
reg [25:0] PC_expected_prev;

reg [6:0] last_D1_DEZENA_exp;
reg  last_D1_SINAL_exp;
reg [6:0] last_D1_UNIDADE_exp;
reg [6:0] last_D2_DEZENA_exp;
reg  last_D2_SINAL_exp;
reg [6:0] last_D2_UNIDADE_exp;
reg [6:0] last_D3_CENTENA_exp;
reg [6:0] last_D3_DEZENA_exp;
reg [6:0] last_D3_MILHAR_exp;
reg  last_D3_SINAL_exp;
reg [6:0] last_D3_UNIDADE_exp;
reg [31:0] last_DADOS_ESCRITOS_exp;
reg [31:0] last_instrucao_exp;
reg [31:0] last_leituraRS_exp;
reg [31:0] last_leituraRT_exp;
reg [25:0] last_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	D1_DEZENA_prev = D1_DEZENA;
	D1_SINAL_prev = D1_SINAL;
	D1_UNIDADE_prev = D1_UNIDADE;
	D2_DEZENA_prev = D2_DEZENA;
	D2_SINAL_prev = D2_SINAL;
	D2_UNIDADE_prev = D2_UNIDADE;
	D3_CENTENA_prev = D3_CENTENA;
	D3_DEZENA_prev = D3_DEZENA;
	D3_MILHAR_prev = D3_MILHAR;
	D3_SINAL_prev = D3_SINAL;
	D3_UNIDADE_prev = D3_UNIDADE;
	DADOS_ESCRITOS_prev = DADOS_ESCRITOS;
	instrucao_prev = instrucao;
	leituraRS_prev = leituraRS;
	leituraRT_prev = leituraRT;
	PC_prev = PC;
end

// update expected /o prevs

always @(trigger)
begin
	D1_DEZENA_expected_prev = D1_DEZENA_expected;
	D1_SINAL_expected_prev = D1_SINAL_expected;
	D1_UNIDADE_expected_prev = D1_UNIDADE_expected;
	D2_DEZENA_expected_prev = D2_DEZENA_expected;
	D2_SINAL_expected_prev = D2_SINAL_expected;
	D2_UNIDADE_expected_prev = D2_UNIDADE_expected;
	D3_CENTENA_expected_prev = D3_CENTENA_expected;
	D3_DEZENA_expected_prev = D3_DEZENA_expected;
	D3_MILHAR_expected_prev = D3_MILHAR_expected;
	D3_SINAL_expected_prev = D3_SINAL_expected;
	D3_UNIDADE_expected_prev = D3_UNIDADE_expected;
	DADOS_ESCRITOS_expected_prev = DADOS_ESCRITOS_expected;
	instrucao_expected_prev = instrucao_expected;
	leituraRS_expected_prev = leituraRS_expected;
	leituraRT_expected_prev = leituraRT_expected;
	PC_expected_prev = PC_expected;
end



// expected D1_SINAL
initial
begin
	D1_SINAL_expected = 1'bX;
end 
// expected D1_DEZENA[ 6 ]
initial
begin
	D1_DEZENA_expected[6] = 1'bX;
end 
// expected D1_DEZENA[ 5 ]
initial
begin
	D1_DEZENA_expected[5] = 1'bX;
end 
// expected D1_DEZENA[ 4 ]
initial
begin
	D1_DEZENA_expected[4] = 1'bX;
end 
// expected D1_DEZENA[ 3 ]
initial
begin
	D1_DEZENA_expected[3] = 1'bX;
end 
// expected D1_DEZENA[ 2 ]
initial
begin
	D1_DEZENA_expected[2] = 1'bX;
end 
// expected D1_DEZENA[ 1 ]
initial
begin
	D1_DEZENA_expected[1] = 1'bX;
end 
// expected D1_DEZENA[ 0 ]
initial
begin
	D1_DEZENA_expected[0] = 1'bX;
end 
// expected D1_UNIDADE[ 6 ]
initial
begin
	D1_UNIDADE_expected[6] = 1'bX;
end 
// expected D1_UNIDADE[ 5 ]
initial
begin
	D1_UNIDADE_expected[5] = 1'bX;
end 
// expected D1_UNIDADE[ 4 ]
initial
begin
	D1_UNIDADE_expected[4] = 1'bX;
end 
// expected D1_UNIDADE[ 3 ]
initial
begin
	D1_UNIDADE_expected[3] = 1'bX;
end 
// expected D1_UNIDADE[ 2 ]
initial
begin
	D1_UNIDADE_expected[2] = 1'bX;
end 
// expected D1_UNIDADE[ 1 ]
initial
begin
	D1_UNIDADE_expected[1] = 1'bX;
end 
// expected D1_UNIDADE[ 0 ]
initial
begin
	D1_UNIDADE_expected[0] = 1'bX;
end 

// expected D2_SINAL
initial
begin
	D2_SINAL_expected = 1'bX;
end 
// expected D2_DEZENA[ 6 ]
initial
begin
	D2_DEZENA_expected[6] = 1'bX;
end 
// expected D2_DEZENA[ 5 ]
initial
begin
	D2_DEZENA_expected[5] = 1'bX;
end 
// expected D2_DEZENA[ 4 ]
initial
begin
	D2_DEZENA_expected[4] = 1'bX;
end 
// expected D2_DEZENA[ 3 ]
initial
begin
	D2_DEZENA_expected[3] = 1'bX;
end 
// expected D2_DEZENA[ 2 ]
initial
begin
	D2_DEZENA_expected[2] = 1'bX;
end 
// expected D2_DEZENA[ 1 ]
initial
begin
	D2_DEZENA_expected[1] = 1'bX;
end 
// expected D2_DEZENA[ 0 ]
initial
begin
	D2_DEZENA_expected[0] = 1'bX;
end 
// expected D2_UNIDADE[ 6 ]
initial
begin
	D2_UNIDADE_expected[6] = 1'bX;
end 
// expected D2_UNIDADE[ 5 ]
initial
begin
	D2_UNIDADE_expected[5] = 1'bX;
end 
// expected D2_UNIDADE[ 4 ]
initial
begin
	D2_UNIDADE_expected[4] = 1'bX;
end 
// expected D2_UNIDADE[ 3 ]
initial
begin
	D2_UNIDADE_expected[3] = 1'bX;
end 
// expected D2_UNIDADE[ 2 ]
initial
begin
	D2_UNIDADE_expected[2] = 1'bX;
end 
// expected D2_UNIDADE[ 1 ]
initial
begin
	D2_UNIDADE_expected[1] = 1'bX;
end 
// expected D2_UNIDADE[ 0 ]
initial
begin
	D2_UNIDADE_expected[0] = 1'bX;
end 

// expected D3_SINAL
initial
begin
	D3_SINAL_expected = 1'bX;
end 
// expected D3_MILHAR[ 6 ]
initial
begin
	D3_MILHAR_expected[6] = 1'bX;
end 
// expected D3_MILHAR[ 5 ]
initial
begin
	D3_MILHAR_expected[5] = 1'bX;
end 
// expected D3_MILHAR[ 4 ]
initial
begin
	D3_MILHAR_expected[4] = 1'bX;
end 
// expected D3_MILHAR[ 3 ]
initial
begin
	D3_MILHAR_expected[3] = 1'bX;
end 
// expected D3_MILHAR[ 2 ]
initial
begin
	D3_MILHAR_expected[2] = 1'bX;
end 
// expected D3_MILHAR[ 1 ]
initial
begin
	D3_MILHAR_expected[1] = 1'bX;
end 
// expected D3_MILHAR[ 0 ]
initial
begin
	D3_MILHAR_expected[0] = 1'bX;
end 
// expected D3_CENTENA[ 6 ]
initial
begin
	D3_CENTENA_expected[6] = 1'bX;
end 
// expected D3_CENTENA[ 5 ]
initial
begin
	D3_CENTENA_expected[5] = 1'bX;
end 
// expected D3_CENTENA[ 4 ]
initial
begin
	D3_CENTENA_expected[4] = 1'bX;
end 
// expected D3_CENTENA[ 3 ]
initial
begin
	D3_CENTENA_expected[3] = 1'bX;
end 
// expected D3_CENTENA[ 2 ]
initial
begin
	D3_CENTENA_expected[2] = 1'bX;
end 
// expected D3_CENTENA[ 1 ]
initial
begin
	D3_CENTENA_expected[1] = 1'bX;
end 
// expected D3_CENTENA[ 0 ]
initial
begin
	D3_CENTENA_expected[0] = 1'bX;
end 
// expected D3_DEZENA[ 6 ]
initial
begin
	D3_DEZENA_expected[6] = 1'bX;
end 
// expected D3_DEZENA[ 5 ]
initial
begin
	D3_DEZENA_expected[5] = 1'bX;
end 
// expected D3_DEZENA[ 4 ]
initial
begin
	D3_DEZENA_expected[4] = 1'bX;
end 
// expected D3_DEZENA[ 3 ]
initial
begin
	D3_DEZENA_expected[3] = 1'bX;
end 
// expected D3_DEZENA[ 2 ]
initial
begin
	D3_DEZENA_expected[2] = 1'bX;
end 
// expected D3_DEZENA[ 1 ]
initial
begin
	D3_DEZENA_expected[1] = 1'bX;
end 
// expected D3_DEZENA[ 0 ]
initial
begin
	D3_DEZENA_expected[0] = 1'bX;
end 
// expected D3_UNIDADE[ 6 ]
initial
begin
	D3_UNIDADE_expected[6] = 1'bX;
end 
// expected D3_UNIDADE[ 5 ]
initial
begin
	D3_UNIDADE_expected[5] = 1'bX;
end 
// expected D3_UNIDADE[ 4 ]
initial
begin
	D3_UNIDADE_expected[4] = 1'bX;
end 
// expected D3_UNIDADE[ 3 ]
initial
begin
	D3_UNIDADE_expected[3] = 1'bX;
end 
// expected D3_UNIDADE[ 2 ]
initial
begin
	D3_UNIDADE_expected[2] = 1'bX;
end 
// expected D3_UNIDADE[ 1 ]
initial
begin
	D3_UNIDADE_expected[1] = 1'bX;
end 
// expected D3_UNIDADE[ 0 ]
initial
begin
	D3_UNIDADE_expected[0] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 31 ]
initial
begin
	DADOS_ESCRITOS_expected[31] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 30 ]
initial
begin
	DADOS_ESCRITOS_expected[30] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 29 ]
initial
begin
	DADOS_ESCRITOS_expected[29] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 28 ]
initial
begin
	DADOS_ESCRITOS_expected[28] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 27 ]
initial
begin
	DADOS_ESCRITOS_expected[27] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 26 ]
initial
begin
	DADOS_ESCRITOS_expected[26] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 25 ]
initial
begin
	DADOS_ESCRITOS_expected[25] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 24 ]
initial
begin
	DADOS_ESCRITOS_expected[24] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 23 ]
initial
begin
	DADOS_ESCRITOS_expected[23] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 22 ]
initial
begin
	DADOS_ESCRITOS_expected[22] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 21 ]
initial
begin
	DADOS_ESCRITOS_expected[21] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 20 ]
initial
begin
	DADOS_ESCRITOS_expected[20] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 19 ]
initial
begin
	DADOS_ESCRITOS_expected[19] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 18 ]
initial
begin
	DADOS_ESCRITOS_expected[18] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 17 ]
initial
begin
	DADOS_ESCRITOS_expected[17] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 16 ]
initial
begin
	DADOS_ESCRITOS_expected[16] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 15 ]
initial
begin
	DADOS_ESCRITOS_expected[15] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 14 ]
initial
begin
	DADOS_ESCRITOS_expected[14] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 13 ]
initial
begin
	DADOS_ESCRITOS_expected[13] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 12 ]
initial
begin
	DADOS_ESCRITOS_expected[12] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 11 ]
initial
begin
	DADOS_ESCRITOS_expected[11] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 10 ]
initial
begin
	DADOS_ESCRITOS_expected[10] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 9 ]
initial
begin
	DADOS_ESCRITOS_expected[9] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 8 ]
initial
begin
	DADOS_ESCRITOS_expected[8] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 7 ]
initial
begin
	DADOS_ESCRITOS_expected[7] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 6 ]
initial
begin
	DADOS_ESCRITOS_expected[6] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 5 ]
initial
begin
	DADOS_ESCRITOS_expected[5] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 4 ]
initial
begin
	DADOS_ESCRITOS_expected[4] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 3 ]
initial
begin
	DADOS_ESCRITOS_expected[3] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 2 ]
initial
begin
	DADOS_ESCRITOS_expected[2] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 1 ]
initial
begin
	DADOS_ESCRITOS_expected[1] = 1'bX;
end 
// expected DADOS_ESCRITOS[ 0 ]
initial
begin
	DADOS_ESCRITOS_expected[0] = 1'bX;
end 
// expected instrucao[ 31 ]
initial
begin
	instrucao_expected[31] = 1'bX;
end 
// expected instrucao[ 30 ]
initial
begin
	instrucao_expected[30] = 1'bX;
end 
// expected instrucao[ 29 ]
initial
begin
	instrucao_expected[29] = 1'bX;
end 
// expected instrucao[ 28 ]
initial
begin
	instrucao_expected[28] = 1'bX;
end 
// expected instrucao[ 27 ]
initial
begin
	instrucao_expected[27] = 1'bX;
end 
// expected instrucao[ 26 ]
initial
begin
	instrucao_expected[26] = 1'bX;
end 
// expected instrucao[ 25 ]
initial
begin
	instrucao_expected[25] = 1'bX;
end 
// expected instrucao[ 24 ]
initial
begin
	instrucao_expected[24] = 1'bX;
end 
// expected instrucao[ 23 ]
initial
begin
	instrucao_expected[23] = 1'bX;
end 
// expected instrucao[ 22 ]
initial
begin
	instrucao_expected[22] = 1'bX;
end 
// expected instrucao[ 21 ]
initial
begin
	instrucao_expected[21] = 1'bX;
end 
// expected instrucao[ 20 ]
initial
begin
	instrucao_expected[20] = 1'bX;
end 
// expected instrucao[ 19 ]
initial
begin
	instrucao_expected[19] = 1'bX;
end 
// expected instrucao[ 18 ]
initial
begin
	instrucao_expected[18] = 1'bX;
end 
// expected instrucao[ 17 ]
initial
begin
	instrucao_expected[17] = 1'bX;
end 
// expected instrucao[ 16 ]
initial
begin
	instrucao_expected[16] = 1'bX;
end 
// expected instrucao[ 15 ]
initial
begin
	instrucao_expected[15] = 1'bX;
end 
// expected instrucao[ 14 ]
initial
begin
	instrucao_expected[14] = 1'bX;
end 
// expected instrucao[ 13 ]
initial
begin
	instrucao_expected[13] = 1'bX;
end 
// expected instrucao[ 12 ]
initial
begin
	instrucao_expected[12] = 1'bX;
end 
// expected instrucao[ 11 ]
initial
begin
	instrucao_expected[11] = 1'bX;
end 
// expected instrucao[ 10 ]
initial
begin
	instrucao_expected[10] = 1'bX;
end 
// expected instrucao[ 9 ]
initial
begin
	instrucao_expected[9] = 1'bX;
end 
// expected instrucao[ 8 ]
initial
begin
	instrucao_expected[8] = 1'bX;
end 
// expected instrucao[ 7 ]
initial
begin
	instrucao_expected[7] = 1'bX;
end 
// expected instrucao[ 6 ]
initial
begin
	instrucao_expected[6] = 1'bX;
end 
// expected instrucao[ 5 ]
initial
begin
	instrucao_expected[5] = 1'bX;
end 
// expected instrucao[ 4 ]
initial
begin
	instrucao_expected[4] = 1'bX;
end 
// expected instrucao[ 3 ]
initial
begin
	instrucao_expected[3] = 1'bX;
end 
// expected instrucao[ 2 ]
initial
begin
	instrucao_expected[2] = 1'bX;
end 
// expected instrucao[ 1 ]
initial
begin
	instrucao_expected[1] = 1'bX;
end 
// expected instrucao[ 0 ]
initial
begin
	instrucao_expected[0] = 1'bX;
end 
// expected leituraRS[ 31 ]
initial
begin
	leituraRS_expected[31] = 1'bX;
end 
// expected leituraRS[ 30 ]
initial
begin
	leituraRS_expected[30] = 1'bX;
end 
// expected leituraRS[ 29 ]
initial
begin
	leituraRS_expected[29] = 1'bX;
end 
// expected leituraRS[ 28 ]
initial
begin
	leituraRS_expected[28] = 1'bX;
end 
// expected leituraRS[ 27 ]
initial
begin
	leituraRS_expected[27] = 1'bX;
end 
// expected leituraRS[ 26 ]
initial
begin
	leituraRS_expected[26] = 1'bX;
end 
// expected leituraRS[ 25 ]
initial
begin
	leituraRS_expected[25] = 1'bX;
end 
// expected leituraRS[ 24 ]
initial
begin
	leituraRS_expected[24] = 1'bX;
end 
// expected leituraRS[ 23 ]
initial
begin
	leituraRS_expected[23] = 1'bX;
end 
// expected leituraRS[ 22 ]
initial
begin
	leituraRS_expected[22] = 1'bX;
end 
// expected leituraRS[ 21 ]
initial
begin
	leituraRS_expected[21] = 1'bX;
end 
// expected leituraRS[ 20 ]
initial
begin
	leituraRS_expected[20] = 1'bX;
end 
// expected leituraRS[ 19 ]
initial
begin
	leituraRS_expected[19] = 1'bX;
end 
// expected leituraRS[ 18 ]
initial
begin
	leituraRS_expected[18] = 1'bX;
end 
// expected leituraRS[ 17 ]
initial
begin
	leituraRS_expected[17] = 1'bX;
end 
// expected leituraRS[ 16 ]
initial
begin
	leituraRS_expected[16] = 1'bX;
end 
// expected leituraRS[ 15 ]
initial
begin
	leituraRS_expected[15] = 1'bX;
end 
// expected leituraRS[ 14 ]
initial
begin
	leituraRS_expected[14] = 1'bX;
end 
// expected leituraRS[ 13 ]
initial
begin
	leituraRS_expected[13] = 1'bX;
end 
// expected leituraRS[ 12 ]
initial
begin
	leituraRS_expected[12] = 1'bX;
end 
// expected leituraRS[ 11 ]
initial
begin
	leituraRS_expected[11] = 1'bX;
end 
// expected leituraRS[ 10 ]
initial
begin
	leituraRS_expected[10] = 1'bX;
end 
// expected leituraRS[ 9 ]
initial
begin
	leituraRS_expected[9] = 1'bX;
end 
// expected leituraRS[ 8 ]
initial
begin
	leituraRS_expected[8] = 1'bX;
end 
// expected leituraRS[ 7 ]
initial
begin
	leituraRS_expected[7] = 1'bX;
end 
// expected leituraRS[ 6 ]
initial
begin
	leituraRS_expected[6] = 1'bX;
end 
// expected leituraRS[ 5 ]
initial
begin
	leituraRS_expected[5] = 1'bX;
end 
// expected leituraRS[ 4 ]
initial
begin
	leituraRS_expected[4] = 1'bX;
end 
// expected leituraRS[ 3 ]
initial
begin
	leituraRS_expected[3] = 1'bX;
end 
// expected leituraRS[ 2 ]
initial
begin
	leituraRS_expected[2] = 1'bX;
end 
// expected leituraRS[ 1 ]
initial
begin
	leituraRS_expected[1] = 1'bX;
end 
// expected leituraRS[ 0 ]
initial
begin
	leituraRS_expected[0] = 1'bX;
end 
// expected leituraRT[ 31 ]
initial
begin
	leituraRT_expected[31] = 1'bX;
end 
// expected leituraRT[ 30 ]
initial
begin
	leituraRT_expected[30] = 1'bX;
end 
// expected leituraRT[ 29 ]
initial
begin
	leituraRT_expected[29] = 1'bX;
end 
// expected leituraRT[ 28 ]
initial
begin
	leituraRT_expected[28] = 1'bX;
end 
// expected leituraRT[ 27 ]
initial
begin
	leituraRT_expected[27] = 1'bX;
end 
// expected leituraRT[ 26 ]
initial
begin
	leituraRT_expected[26] = 1'bX;
end 
// expected leituraRT[ 25 ]
initial
begin
	leituraRT_expected[25] = 1'bX;
end 
// expected leituraRT[ 24 ]
initial
begin
	leituraRT_expected[24] = 1'bX;
end 
// expected leituraRT[ 23 ]
initial
begin
	leituraRT_expected[23] = 1'bX;
end 
// expected leituraRT[ 22 ]
initial
begin
	leituraRT_expected[22] = 1'bX;
end 
// expected leituraRT[ 21 ]
initial
begin
	leituraRT_expected[21] = 1'bX;
end 
// expected leituraRT[ 20 ]
initial
begin
	leituraRT_expected[20] = 1'bX;
end 
// expected leituraRT[ 19 ]
initial
begin
	leituraRT_expected[19] = 1'bX;
end 
// expected leituraRT[ 18 ]
initial
begin
	leituraRT_expected[18] = 1'bX;
end 
// expected leituraRT[ 17 ]
initial
begin
	leituraRT_expected[17] = 1'bX;
end 
// expected leituraRT[ 16 ]
initial
begin
	leituraRT_expected[16] = 1'bX;
end 
// expected leituraRT[ 15 ]
initial
begin
	leituraRT_expected[15] = 1'bX;
end 
// expected leituraRT[ 14 ]
initial
begin
	leituraRT_expected[14] = 1'bX;
end 
// expected leituraRT[ 13 ]
initial
begin
	leituraRT_expected[13] = 1'bX;
end 
// expected leituraRT[ 12 ]
initial
begin
	leituraRT_expected[12] = 1'bX;
end 
// expected leituraRT[ 11 ]
initial
begin
	leituraRT_expected[11] = 1'bX;
end 
// expected leituraRT[ 10 ]
initial
begin
	leituraRT_expected[10] = 1'bX;
end 
// expected leituraRT[ 9 ]
initial
begin
	leituraRT_expected[9] = 1'bX;
end 
// expected leituraRT[ 8 ]
initial
begin
	leituraRT_expected[8] = 1'bX;
end 
// expected leituraRT[ 7 ]
initial
begin
	leituraRT_expected[7] = 1'bX;
end 
// expected leituraRT[ 6 ]
initial
begin
	leituraRT_expected[6] = 1'bX;
end 
// expected leituraRT[ 5 ]
initial
begin
	leituraRT_expected[5] = 1'bX;
end 
// expected leituraRT[ 4 ]
initial
begin
	leituraRT_expected[4] = 1'bX;
end 
// expected leituraRT[ 3 ]
initial
begin
	leituraRT_expected[3] = 1'bX;
end 
// expected leituraRT[ 2 ]
initial
begin
	leituraRT_expected[2] = 1'bX;
end 
// expected leituraRT[ 1 ]
initial
begin
	leituraRT_expected[1] = 1'bX;
end 
// expected leituraRT[ 0 ]
initial
begin
	leituraRT_expected[0] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// generate trigger
always @(D1_DEZENA_expected or D1_DEZENA or D1_SINAL_expected or D1_SINAL or D1_UNIDADE_expected or D1_UNIDADE or D2_DEZENA_expected or D2_DEZENA or D2_SINAL_expected or D2_SINAL or D2_UNIDADE_expected or D2_UNIDADE or D3_CENTENA_expected or D3_CENTENA or D3_DEZENA_expected or D3_DEZENA or D3_MILHAR_expected or D3_MILHAR or D3_SINAL_expected or D3_SINAL or D3_UNIDADE_expected or D3_UNIDADE or DADOS_ESCRITOS_expected or DADOS_ESCRITOS or instrucao_expected or instrucao or leituraRS_expected or leituraRS or leituraRT_expected or leituraRT or PC_expected or PC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D1_DEZENA = %b | expected D1_SINAL = %b | expected D1_UNIDADE = %b | expected D2_DEZENA = %b | expected D2_SINAL = %b | expected D2_UNIDADE = %b | expected D3_CENTENA = %b | expected D3_DEZENA = %b | expected D3_MILHAR = %b | expected D3_SINAL = %b | expected D3_UNIDADE = %b | expected DADOS_ESCRITOS = %b | expected instrucao = %b | expected leituraRS = %b | expected leituraRT = %b | expected PC = %b | ",D1_DEZENA_expected_prev,D1_SINAL_expected_prev,D1_UNIDADE_expected_prev,D2_DEZENA_expected_prev,D2_SINAL_expected_prev,D2_UNIDADE_expected_prev,D3_CENTENA_expected_prev,D3_DEZENA_expected_prev,D3_MILHAR_expected_prev,D3_SINAL_expected_prev,D3_UNIDADE_expected_prev,DADOS_ESCRITOS_expected_prev,instrucao_expected_prev,leituraRS_expected_prev,leituraRT_expected_prev,PC_expected_prev);
	$display("| real D1_DEZENA = %b | real D1_SINAL = %b | real D1_UNIDADE = %b | real D2_DEZENA = %b | real D2_SINAL = %b | real D2_UNIDADE = %b | real D3_CENTENA = %b | real D3_DEZENA = %b | real D3_MILHAR = %b | real D3_SINAL = %b | real D3_UNIDADE = %b | real DADOS_ESCRITOS = %b | real instrucao = %b | real leituraRS = %b | real leituraRT = %b | real PC = %b | ",D1_DEZENA_prev,D1_SINAL_prev,D1_UNIDADE_prev,D2_DEZENA_prev,D2_SINAL_prev,D2_UNIDADE_prev,D3_CENTENA_prev,D3_DEZENA_prev,D3_MILHAR_prev,D3_SINAL_prev,D3_UNIDADE_prev,DADOS_ESCRITOS_prev,instrucao_prev,leituraRS_prev,leituraRT_prev,PC_prev);
`endif
	if (
		( D1_DEZENA_expected_prev[0] !== 1'bx ) && ( D1_DEZENA_prev[0] !== D1_DEZENA_expected_prev[0] )
		&& ((D1_DEZENA_expected_prev[0] !== last_D1_DEZENA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[0] = D1_DEZENA_expected_prev[0];
	end
	if (
		( D1_DEZENA_expected_prev[1] !== 1'bx ) && ( D1_DEZENA_prev[1] !== D1_DEZENA_expected_prev[1] )
		&& ((D1_DEZENA_expected_prev[1] !== last_D1_DEZENA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[1] = D1_DEZENA_expected_prev[1];
	end
	if (
		( D1_DEZENA_expected_prev[2] !== 1'bx ) && ( D1_DEZENA_prev[2] !== D1_DEZENA_expected_prev[2] )
		&& ((D1_DEZENA_expected_prev[2] !== last_D1_DEZENA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[2] = D1_DEZENA_expected_prev[2];
	end
	if (
		( D1_DEZENA_expected_prev[3] !== 1'bx ) && ( D1_DEZENA_prev[3] !== D1_DEZENA_expected_prev[3] )
		&& ((D1_DEZENA_expected_prev[3] !== last_D1_DEZENA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[3] = D1_DEZENA_expected_prev[3];
	end
	if (
		( D1_DEZENA_expected_prev[4] !== 1'bx ) && ( D1_DEZENA_prev[4] !== D1_DEZENA_expected_prev[4] )
		&& ((D1_DEZENA_expected_prev[4] !== last_D1_DEZENA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[4] = D1_DEZENA_expected_prev[4];
	end
	if (
		( D1_DEZENA_expected_prev[5] !== 1'bx ) && ( D1_DEZENA_prev[5] !== D1_DEZENA_expected_prev[5] )
		&& ((D1_DEZENA_expected_prev[5] !== last_D1_DEZENA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[5] = D1_DEZENA_expected_prev[5];
	end
	if (
		( D1_DEZENA_expected_prev[6] !== 1'bx ) && ( D1_DEZENA_prev[6] !== D1_DEZENA_expected_prev[6] )
		&& ((D1_DEZENA_expected_prev[6] !== last_D1_DEZENA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_DEZENA_expected_prev);
		$display ("     Real value = %b", D1_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_DEZENA_exp[6] = D1_DEZENA_expected_prev[6];
	end
	if (
		( D1_SINAL_expected_prev !== 1'bx ) && ( D1_SINAL_prev !== D1_SINAL_expected_prev )
		&& ((D1_SINAL_expected_prev !== last_D1_SINAL_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_SINAL_expected_prev);
		$display ("     Real value = %b", D1_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D1_SINAL_exp = D1_SINAL_expected_prev;
	end
	if (
		( D1_UNIDADE_expected_prev[0] !== 1'bx ) && ( D1_UNIDADE_prev[0] !== D1_UNIDADE_expected_prev[0] )
		&& ((D1_UNIDADE_expected_prev[0] !== last_D1_UNIDADE_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[0] = D1_UNIDADE_expected_prev[0];
	end
	if (
		( D1_UNIDADE_expected_prev[1] !== 1'bx ) && ( D1_UNIDADE_prev[1] !== D1_UNIDADE_expected_prev[1] )
		&& ((D1_UNIDADE_expected_prev[1] !== last_D1_UNIDADE_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[1] = D1_UNIDADE_expected_prev[1];
	end
	if (
		( D1_UNIDADE_expected_prev[2] !== 1'bx ) && ( D1_UNIDADE_prev[2] !== D1_UNIDADE_expected_prev[2] )
		&& ((D1_UNIDADE_expected_prev[2] !== last_D1_UNIDADE_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[2] = D1_UNIDADE_expected_prev[2];
	end
	if (
		( D1_UNIDADE_expected_prev[3] !== 1'bx ) && ( D1_UNIDADE_prev[3] !== D1_UNIDADE_expected_prev[3] )
		&& ((D1_UNIDADE_expected_prev[3] !== last_D1_UNIDADE_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[3] = D1_UNIDADE_expected_prev[3];
	end
	if (
		( D1_UNIDADE_expected_prev[4] !== 1'bx ) && ( D1_UNIDADE_prev[4] !== D1_UNIDADE_expected_prev[4] )
		&& ((D1_UNIDADE_expected_prev[4] !== last_D1_UNIDADE_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[4] = D1_UNIDADE_expected_prev[4];
	end
	if (
		( D1_UNIDADE_expected_prev[5] !== 1'bx ) && ( D1_UNIDADE_prev[5] !== D1_UNIDADE_expected_prev[5] )
		&& ((D1_UNIDADE_expected_prev[5] !== last_D1_UNIDADE_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[5] = D1_UNIDADE_expected_prev[5];
	end
	if (
		( D1_UNIDADE_expected_prev[6] !== 1'bx ) && ( D1_UNIDADE_prev[6] !== D1_UNIDADE_expected_prev[6] )
		&& ((D1_UNIDADE_expected_prev[6] !== last_D1_UNIDADE_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_UNIDADE_expected_prev);
		$display ("     Real value = %b", D1_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D1_UNIDADE_exp[6] = D1_UNIDADE_expected_prev[6];
	end
	if (
		( D2_DEZENA_expected_prev[0] !== 1'bx ) && ( D2_DEZENA_prev[0] !== D2_DEZENA_expected_prev[0] )
		&& ((D2_DEZENA_expected_prev[0] !== last_D2_DEZENA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[0] = D2_DEZENA_expected_prev[0];
	end
	if (
		( D2_DEZENA_expected_prev[1] !== 1'bx ) && ( D2_DEZENA_prev[1] !== D2_DEZENA_expected_prev[1] )
		&& ((D2_DEZENA_expected_prev[1] !== last_D2_DEZENA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[1] = D2_DEZENA_expected_prev[1];
	end
	if (
		( D2_DEZENA_expected_prev[2] !== 1'bx ) && ( D2_DEZENA_prev[2] !== D2_DEZENA_expected_prev[2] )
		&& ((D2_DEZENA_expected_prev[2] !== last_D2_DEZENA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[2] = D2_DEZENA_expected_prev[2];
	end
	if (
		( D2_DEZENA_expected_prev[3] !== 1'bx ) && ( D2_DEZENA_prev[3] !== D2_DEZENA_expected_prev[3] )
		&& ((D2_DEZENA_expected_prev[3] !== last_D2_DEZENA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[3] = D2_DEZENA_expected_prev[3];
	end
	if (
		( D2_DEZENA_expected_prev[4] !== 1'bx ) && ( D2_DEZENA_prev[4] !== D2_DEZENA_expected_prev[4] )
		&& ((D2_DEZENA_expected_prev[4] !== last_D2_DEZENA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[4] = D2_DEZENA_expected_prev[4];
	end
	if (
		( D2_DEZENA_expected_prev[5] !== 1'bx ) && ( D2_DEZENA_prev[5] !== D2_DEZENA_expected_prev[5] )
		&& ((D2_DEZENA_expected_prev[5] !== last_D2_DEZENA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[5] = D2_DEZENA_expected_prev[5];
	end
	if (
		( D2_DEZENA_expected_prev[6] !== 1'bx ) && ( D2_DEZENA_prev[6] !== D2_DEZENA_expected_prev[6] )
		&& ((D2_DEZENA_expected_prev[6] !== last_D2_DEZENA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_DEZENA_expected_prev);
		$display ("     Real value = %b", D2_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D2_DEZENA_exp[6] = D2_DEZENA_expected_prev[6];
	end
	if (
		( D2_SINAL_expected_prev !== 1'bx ) && ( D2_SINAL_prev !== D2_SINAL_expected_prev )
		&& ((D2_SINAL_expected_prev !== last_D2_SINAL_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_SINAL_expected_prev);
		$display ("     Real value = %b", D2_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D2_SINAL_exp = D2_SINAL_expected_prev;
	end
	if (
		( D2_UNIDADE_expected_prev[0] !== 1'bx ) && ( D2_UNIDADE_prev[0] !== D2_UNIDADE_expected_prev[0] )
		&& ((D2_UNIDADE_expected_prev[0] !== last_D2_UNIDADE_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[0] = D2_UNIDADE_expected_prev[0];
	end
	if (
		( D2_UNIDADE_expected_prev[1] !== 1'bx ) && ( D2_UNIDADE_prev[1] !== D2_UNIDADE_expected_prev[1] )
		&& ((D2_UNIDADE_expected_prev[1] !== last_D2_UNIDADE_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[1] = D2_UNIDADE_expected_prev[1];
	end
	if (
		( D2_UNIDADE_expected_prev[2] !== 1'bx ) && ( D2_UNIDADE_prev[2] !== D2_UNIDADE_expected_prev[2] )
		&& ((D2_UNIDADE_expected_prev[2] !== last_D2_UNIDADE_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[2] = D2_UNIDADE_expected_prev[2];
	end
	if (
		( D2_UNIDADE_expected_prev[3] !== 1'bx ) && ( D2_UNIDADE_prev[3] !== D2_UNIDADE_expected_prev[3] )
		&& ((D2_UNIDADE_expected_prev[3] !== last_D2_UNIDADE_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[3] = D2_UNIDADE_expected_prev[3];
	end
	if (
		( D2_UNIDADE_expected_prev[4] !== 1'bx ) && ( D2_UNIDADE_prev[4] !== D2_UNIDADE_expected_prev[4] )
		&& ((D2_UNIDADE_expected_prev[4] !== last_D2_UNIDADE_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[4] = D2_UNIDADE_expected_prev[4];
	end
	if (
		( D2_UNIDADE_expected_prev[5] !== 1'bx ) && ( D2_UNIDADE_prev[5] !== D2_UNIDADE_expected_prev[5] )
		&& ((D2_UNIDADE_expected_prev[5] !== last_D2_UNIDADE_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[5] = D2_UNIDADE_expected_prev[5];
	end
	if (
		( D2_UNIDADE_expected_prev[6] !== 1'bx ) && ( D2_UNIDADE_prev[6] !== D2_UNIDADE_expected_prev[6] )
		&& ((D2_UNIDADE_expected_prev[6] !== last_D2_UNIDADE_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_UNIDADE_expected_prev);
		$display ("     Real value = %b", D2_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D2_UNIDADE_exp[6] = D2_UNIDADE_expected_prev[6];
	end
	if (
		( D3_CENTENA_expected_prev[0] !== 1'bx ) && ( D3_CENTENA_prev[0] !== D3_CENTENA_expected_prev[0] )
		&& ((D3_CENTENA_expected_prev[0] !== last_D3_CENTENA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[0] = D3_CENTENA_expected_prev[0];
	end
	if (
		( D3_CENTENA_expected_prev[1] !== 1'bx ) && ( D3_CENTENA_prev[1] !== D3_CENTENA_expected_prev[1] )
		&& ((D3_CENTENA_expected_prev[1] !== last_D3_CENTENA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[1] = D3_CENTENA_expected_prev[1];
	end
	if (
		( D3_CENTENA_expected_prev[2] !== 1'bx ) && ( D3_CENTENA_prev[2] !== D3_CENTENA_expected_prev[2] )
		&& ((D3_CENTENA_expected_prev[2] !== last_D3_CENTENA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[2] = D3_CENTENA_expected_prev[2];
	end
	if (
		( D3_CENTENA_expected_prev[3] !== 1'bx ) && ( D3_CENTENA_prev[3] !== D3_CENTENA_expected_prev[3] )
		&& ((D3_CENTENA_expected_prev[3] !== last_D3_CENTENA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[3] = D3_CENTENA_expected_prev[3];
	end
	if (
		( D3_CENTENA_expected_prev[4] !== 1'bx ) && ( D3_CENTENA_prev[4] !== D3_CENTENA_expected_prev[4] )
		&& ((D3_CENTENA_expected_prev[4] !== last_D3_CENTENA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[4] = D3_CENTENA_expected_prev[4];
	end
	if (
		( D3_CENTENA_expected_prev[5] !== 1'bx ) && ( D3_CENTENA_prev[5] !== D3_CENTENA_expected_prev[5] )
		&& ((D3_CENTENA_expected_prev[5] !== last_D3_CENTENA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[5] = D3_CENTENA_expected_prev[5];
	end
	if (
		( D3_CENTENA_expected_prev[6] !== 1'bx ) && ( D3_CENTENA_prev[6] !== D3_CENTENA_expected_prev[6] )
		&& ((D3_CENTENA_expected_prev[6] !== last_D3_CENTENA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_CENTENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_CENTENA_expected_prev);
		$display ("     Real value = %b", D3_CENTENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D3_CENTENA_exp[6] = D3_CENTENA_expected_prev[6];
	end
	if (
		( D3_DEZENA_expected_prev[0] !== 1'bx ) && ( D3_DEZENA_prev[0] !== D3_DEZENA_expected_prev[0] )
		&& ((D3_DEZENA_expected_prev[0] !== last_D3_DEZENA_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[0] = D3_DEZENA_expected_prev[0];
	end
	if (
		( D3_DEZENA_expected_prev[1] !== 1'bx ) && ( D3_DEZENA_prev[1] !== D3_DEZENA_expected_prev[1] )
		&& ((D3_DEZENA_expected_prev[1] !== last_D3_DEZENA_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[1] = D3_DEZENA_expected_prev[1];
	end
	if (
		( D3_DEZENA_expected_prev[2] !== 1'bx ) && ( D3_DEZENA_prev[2] !== D3_DEZENA_expected_prev[2] )
		&& ((D3_DEZENA_expected_prev[2] !== last_D3_DEZENA_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[2] = D3_DEZENA_expected_prev[2];
	end
	if (
		( D3_DEZENA_expected_prev[3] !== 1'bx ) && ( D3_DEZENA_prev[3] !== D3_DEZENA_expected_prev[3] )
		&& ((D3_DEZENA_expected_prev[3] !== last_D3_DEZENA_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[3] = D3_DEZENA_expected_prev[3];
	end
	if (
		( D3_DEZENA_expected_prev[4] !== 1'bx ) && ( D3_DEZENA_prev[4] !== D3_DEZENA_expected_prev[4] )
		&& ((D3_DEZENA_expected_prev[4] !== last_D3_DEZENA_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[4] = D3_DEZENA_expected_prev[4];
	end
	if (
		( D3_DEZENA_expected_prev[5] !== 1'bx ) && ( D3_DEZENA_prev[5] !== D3_DEZENA_expected_prev[5] )
		&& ((D3_DEZENA_expected_prev[5] !== last_D3_DEZENA_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[5] = D3_DEZENA_expected_prev[5];
	end
	if (
		( D3_DEZENA_expected_prev[6] !== 1'bx ) && ( D3_DEZENA_prev[6] !== D3_DEZENA_expected_prev[6] )
		&& ((D3_DEZENA_expected_prev[6] !== last_D3_DEZENA_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_DEZENA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_DEZENA_expected_prev);
		$display ("     Real value = %b", D3_DEZENA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_DEZENA_exp[6] = D3_DEZENA_expected_prev[6];
	end
	if (
		( D3_MILHAR_expected_prev[0] !== 1'bx ) && ( D3_MILHAR_prev[0] !== D3_MILHAR_expected_prev[0] )
		&& ((D3_MILHAR_expected_prev[0] !== last_D3_MILHAR_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[0] = D3_MILHAR_expected_prev[0];
	end
	if (
		( D3_MILHAR_expected_prev[1] !== 1'bx ) && ( D3_MILHAR_prev[1] !== D3_MILHAR_expected_prev[1] )
		&& ((D3_MILHAR_expected_prev[1] !== last_D3_MILHAR_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[1] = D3_MILHAR_expected_prev[1];
	end
	if (
		( D3_MILHAR_expected_prev[2] !== 1'bx ) && ( D3_MILHAR_prev[2] !== D3_MILHAR_expected_prev[2] )
		&& ((D3_MILHAR_expected_prev[2] !== last_D3_MILHAR_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[2] = D3_MILHAR_expected_prev[2];
	end
	if (
		( D3_MILHAR_expected_prev[3] !== 1'bx ) && ( D3_MILHAR_prev[3] !== D3_MILHAR_expected_prev[3] )
		&& ((D3_MILHAR_expected_prev[3] !== last_D3_MILHAR_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[3] = D3_MILHAR_expected_prev[3];
	end
	if (
		( D3_MILHAR_expected_prev[4] !== 1'bx ) && ( D3_MILHAR_prev[4] !== D3_MILHAR_expected_prev[4] )
		&& ((D3_MILHAR_expected_prev[4] !== last_D3_MILHAR_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[4] = D3_MILHAR_expected_prev[4];
	end
	if (
		( D3_MILHAR_expected_prev[5] !== 1'bx ) && ( D3_MILHAR_prev[5] !== D3_MILHAR_expected_prev[5] )
		&& ((D3_MILHAR_expected_prev[5] !== last_D3_MILHAR_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[5] = D3_MILHAR_expected_prev[5];
	end
	if (
		( D3_MILHAR_expected_prev[6] !== 1'bx ) && ( D3_MILHAR_prev[6] !== D3_MILHAR_expected_prev[6] )
		&& ((D3_MILHAR_expected_prev[6] !== last_D3_MILHAR_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_MILHAR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_MILHAR_expected_prev);
		$display ("     Real value = %b", D3_MILHAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D3_MILHAR_exp[6] = D3_MILHAR_expected_prev[6];
	end
	if (
		( D3_SINAL_expected_prev !== 1'bx ) && ( D3_SINAL_prev !== D3_SINAL_expected_prev )
		&& ((D3_SINAL_expected_prev !== last_D3_SINAL_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_SINAL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_SINAL_expected_prev);
		$display ("     Real value = %b", D3_SINAL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D3_SINAL_exp = D3_SINAL_expected_prev;
	end
	if (
		( D3_UNIDADE_expected_prev[0] !== 1'bx ) && ( D3_UNIDADE_prev[0] !== D3_UNIDADE_expected_prev[0] )
		&& ((D3_UNIDADE_expected_prev[0] !== last_D3_UNIDADE_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[0] = D3_UNIDADE_expected_prev[0];
	end
	if (
		( D3_UNIDADE_expected_prev[1] !== 1'bx ) && ( D3_UNIDADE_prev[1] !== D3_UNIDADE_expected_prev[1] )
		&& ((D3_UNIDADE_expected_prev[1] !== last_D3_UNIDADE_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[1] = D3_UNIDADE_expected_prev[1];
	end
	if (
		( D3_UNIDADE_expected_prev[2] !== 1'bx ) && ( D3_UNIDADE_prev[2] !== D3_UNIDADE_expected_prev[2] )
		&& ((D3_UNIDADE_expected_prev[2] !== last_D3_UNIDADE_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[2] = D3_UNIDADE_expected_prev[2];
	end
	if (
		( D3_UNIDADE_expected_prev[3] !== 1'bx ) && ( D3_UNIDADE_prev[3] !== D3_UNIDADE_expected_prev[3] )
		&& ((D3_UNIDADE_expected_prev[3] !== last_D3_UNIDADE_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[3] = D3_UNIDADE_expected_prev[3];
	end
	if (
		( D3_UNIDADE_expected_prev[4] !== 1'bx ) && ( D3_UNIDADE_prev[4] !== D3_UNIDADE_expected_prev[4] )
		&& ((D3_UNIDADE_expected_prev[4] !== last_D3_UNIDADE_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[4] = D3_UNIDADE_expected_prev[4];
	end
	if (
		( D3_UNIDADE_expected_prev[5] !== 1'bx ) && ( D3_UNIDADE_prev[5] !== D3_UNIDADE_expected_prev[5] )
		&& ((D3_UNIDADE_expected_prev[5] !== last_D3_UNIDADE_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[5] = D3_UNIDADE_expected_prev[5];
	end
	if (
		( D3_UNIDADE_expected_prev[6] !== 1'bx ) && ( D3_UNIDADE_prev[6] !== D3_UNIDADE_expected_prev[6] )
		&& ((D3_UNIDADE_expected_prev[6] !== last_D3_UNIDADE_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3_UNIDADE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_UNIDADE_expected_prev);
		$display ("     Real value = %b", D3_UNIDADE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D3_UNIDADE_exp[6] = D3_UNIDADE_expected_prev[6];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[0] !== 1'bx ) && ( DADOS_ESCRITOS_prev[0] !== DADOS_ESCRITOS_expected_prev[0] )
		&& ((DADOS_ESCRITOS_expected_prev[0] !== last_DADOS_ESCRITOS_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[0] = DADOS_ESCRITOS_expected_prev[0];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[1] !== 1'bx ) && ( DADOS_ESCRITOS_prev[1] !== DADOS_ESCRITOS_expected_prev[1] )
		&& ((DADOS_ESCRITOS_expected_prev[1] !== last_DADOS_ESCRITOS_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[1] = DADOS_ESCRITOS_expected_prev[1];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[2] !== 1'bx ) && ( DADOS_ESCRITOS_prev[2] !== DADOS_ESCRITOS_expected_prev[2] )
		&& ((DADOS_ESCRITOS_expected_prev[2] !== last_DADOS_ESCRITOS_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[2] = DADOS_ESCRITOS_expected_prev[2];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[3] !== 1'bx ) && ( DADOS_ESCRITOS_prev[3] !== DADOS_ESCRITOS_expected_prev[3] )
		&& ((DADOS_ESCRITOS_expected_prev[3] !== last_DADOS_ESCRITOS_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[3] = DADOS_ESCRITOS_expected_prev[3];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[4] !== 1'bx ) && ( DADOS_ESCRITOS_prev[4] !== DADOS_ESCRITOS_expected_prev[4] )
		&& ((DADOS_ESCRITOS_expected_prev[4] !== last_DADOS_ESCRITOS_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[4] = DADOS_ESCRITOS_expected_prev[4];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[5] !== 1'bx ) && ( DADOS_ESCRITOS_prev[5] !== DADOS_ESCRITOS_expected_prev[5] )
		&& ((DADOS_ESCRITOS_expected_prev[5] !== last_DADOS_ESCRITOS_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[5] = DADOS_ESCRITOS_expected_prev[5];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[6] !== 1'bx ) && ( DADOS_ESCRITOS_prev[6] !== DADOS_ESCRITOS_expected_prev[6] )
		&& ((DADOS_ESCRITOS_expected_prev[6] !== last_DADOS_ESCRITOS_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[6] = DADOS_ESCRITOS_expected_prev[6];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[7] !== 1'bx ) && ( DADOS_ESCRITOS_prev[7] !== DADOS_ESCRITOS_expected_prev[7] )
		&& ((DADOS_ESCRITOS_expected_prev[7] !== last_DADOS_ESCRITOS_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[7] = DADOS_ESCRITOS_expected_prev[7];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[8] !== 1'bx ) && ( DADOS_ESCRITOS_prev[8] !== DADOS_ESCRITOS_expected_prev[8] )
		&& ((DADOS_ESCRITOS_expected_prev[8] !== last_DADOS_ESCRITOS_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[8] = DADOS_ESCRITOS_expected_prev[8];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[9] !== 1'bx ) && ( DADOS_ESCRITOS_prev[9] !== DADOS_ESCRITOS_expected_prev[9] )
		&& ((DADOS_ESCRITOS_expected_prev[9] !== last_DADOS_ESCRITOS_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[9] = DADOS_ESCRITOS_expected_prev[9];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[10] !== 1'bx ) && ( DADOS_ESCRITOS_prev[10] !== DADOS_ESCRITOS_expected_prev[10] )
		&& ((DADOS_ESCRITOS_expected_prev[10] !== last_DADOS_ESCRITOS_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[10] = DADOS_ESCRITOS_expected_prev[10];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[11] !== 1'bx ) && ( DADOS_ESCRITOS_prev[11] !== DADOS_ESCRITOS_expected_prev[11] )
		&& ((DADOS_ESCRITOS_expected_prev[11] !== last_DADOS_ESCRITOS_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[11] = DADOS_ESCRITOS_expected_prev[11];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[12] !== 1'bx ) && ( DADOS_ESCRITOS_prev[12] !== DADOS_ESCRITOS_expected_prev[12] )
		&& ((DADOS_ESCRITOS_expected_prev[12] !== last_DADOS_ESCRITOS_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[12] = DADOS_ESCRITOS_expected_prev[12];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[13] !== 1'bx ) && ( DADOS_ESCRITOS_prev[13] !== DADOS_ESCRITOS_expected_prev[13] )
		&& ((DADOS_ESCRITOS_expected_prev[13] !== last_DADOS_ESCRITOS_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[13] = DADOS_ESCRITOS_expected_prev[13];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[14] !== 1'bx ) && ( DADOS_ESCRITOS_prev[14] !== DADOS_ESCRITOS_expected_prev[14] )
		&& ((DADOS_ESCRITOS_expected_prev[14] !== last_DADOS_ESCRITOS_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[14] = DADOS_ESCRITOS_expected_prev[14];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[15] !== 1'bx ) && ( DADOS_ESCRITOS_prev[15] !== DADOS_ESCRITOS_expected_prev[15] )
		&& ((DADOS_ESCRITOS_expected_prev[15] !== last_DADOS_ESCRITOS_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[15] = DADOS_ESCRITOS_expected_prev[15];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[16] !== 1'bx ) && ( DADOS_ESCRITOS_prev[16] !== DADOS_ESCRITOS_expected_prev[16] )
		&& ((DADOS_ESCRITOS_expected_prev[16] !== last_DADOS_ESCRITOS_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[16] = DADOS_ESCRITOS_expected_prev[16];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[17] !== 1'bx ) && ( DADOS_ESCRITOS_prev[17] !== DADOS_ESCRITOS_expected_prev[17] )
		&& ((DADOS_ESCRITOS_expected_prev[17] !== last_DADOS_ESCRITOS_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[17] = DADOS_ESCRITOS_expected_prev[17];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[18] !== 1'bx ) && ( DADOS_ESCRITOS_prev[18] !== DADOS_ESCRITOS_expected_prev[18] )
		&& ((DADOS_ESCRITOS_expected_prev[18] !== last_DADOS_ESCRITOS_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[18] = DADOS_ESCRITOS_expected_prev[18];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[19] !== 1'bx ) && ( DADOS_ESCRITOS_prev[19] !== DADOS_ESCRITOS_expected_prev[19] )
		&& ((DADOS_ESCRITOS_expected_prev[19] !== last_DADOS_ESCRITOS_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[19] = DADOS_ESCRITOS_expected_prev[19];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[20] !== 1'bx ) && ( DADOS_ESCRITOS_prev[20] !== DADOS_ESCRITOS_expected_prev[20] )
		&& ((DADOS_ESCRITOS_expected_prev[20] !== last_DADOS_ESCRITOS_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[20] = DADOS_ESCRITOS_expected_prev[20];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[21] !== 1'bx ) && ( DADOS_ESCRITOS_prev[21] !== DADOS_ESCRITOS_expected_prev[21] )
		&& ((DADOS_ESCRITOS_expected_prev[21] !== last_DADOS_ESCRITOS_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[21] = DADOS_ESCRITOS_expected_prev[21];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[22] !== 1'bx ) && ( DADOS_ESCRITOS_prev[22] !== DADOS_ESCRITOS_expected_prev[22] )
		&& ((DADOS_ESCRITOS_expected_prev[22] !== last_DADOS_ESCRITOS_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[22] = DADOS_ESCRITOS_expected_prev[22];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[23] !== 1'bx ) && ( DADOS_ESCRITOS_prev[23] !== DADOS_ESCRITOS_expected_prev[23] )
		&& ((DADOS_ESCRITOS_expected_prev[23] !== last_DADOS_ESCRITOS_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[23] = DADOS_ESCRITOS_expected_prev[23];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[24] !== 1'bx ) && ( DADOS_ESCRITOS_prev[24] !== DADOS_ESCRITOS_expected_prev[24] )
		&& ((DADOS_ESCRITOS_expected_prev[24] !== last_DADOS_ESCRITOS_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[24] = DADOS_ESCRITOS_expected_prev[24];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[25] !== 1'bx ) && ( DADOS_ESCRITOS_prev[25] !== DADOS_ESCRITOS_expected_prev[25] )
		&& ((DADOS_ESCRITOS_expected_prev[25] !== last_DADOS_ESCRITOS_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[25] = DADOS_ESCRITOS_expected_prev[25];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[26] !== 1'bx ) && ( DADOS_ESCRITOS_prev[26] !== DADOS_ESCRITOS_expected_prev[26] )
		&& ((DADOS_ESCRITOS_expected_prev[26] !== last_DADOS_ESCRITOS_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[26] = DADOS_ESCRITOS_expected_prev[26];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[27] !== 1'bx ) && ( DADOS_ESCRITOS_prev[27] !== DADOS_ESCRITOS_expected_prev[27] )
		&& ((DADOS_ESCRITOS_expected_prev[27] !== last_DADOS_ESCRITOS_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[27] = DADOS_ESCRITOS_expected_prev[27];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[28] !== 1'bx ) && ( DADOS_ESCRITOS_prev[28] !== DADOS_ESCRITOS_expected_prev[28] )
		&& ((DADOS_ESCRITOS_expected_prev[28] !== last_DADOS_ESCRITOS_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[28] = DADOS_ESCRITOS_expected_prev[28];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[29] !== 1'bx ) && ( DADOS_ESCRITOS_prev[29] !== DADOS_ESCRITOS_expected_prev[29] )
		&& ((DADOS_ESCRITOS_expected_prev[29] !== last_DADOS_ESCRITOS_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[29] = DADOS_ESCRITOS_expected_prev[29];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[30] !== 1'bx ) && ( DADOS_ESCRITOS_prev[30] !== DADOS_ESCRITOS_expected_prev[30] )
		&& ((DADOS_ESCRITOS_expected_prev[30] !== last_DADOS_ESCRITOS_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[30] = DADOS_ESCRITOS_expected_prev[30];
	end
	if (
		( DADOS_ESCRITOS_expected_prev[31] !== 1'bx ) && ( DADOS_ESCRITOS_prev[31] !== DADOS_ESCRITOS_expected_prev[31] )
		&& ((DADOS_ESCRITOS_expected_prev[31] !== last_DADOS_ESCRITOS_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DADOS_ESCRITOS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DADOS_ESCRITOS_expected_prev);
		$display ("     Real value = %b", DADOS_ESCRITOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DADOS_ESCRITOS_exp[31] = DADOS_ESCRITOS_expected_prev[31];
	end
	if (
		( instrucao_expected_prev[0] !== 1'bx ) && ( instrucao_prev[0] !== instrucao_expected_prev[0] )
		&& ((instrucao_expected_prev[0] !== last_instrucao_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[0] = instrucao_expected_prev[0];
	end
	if (
		( instrucao_expected_prev[1] !== 1'bx ) && ( instrucao_prev[1] !== instrucao_expected_prev[1] )
		&& ((instrucao_expected_prev[1] !== last_instrucao_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[1] = instrucao_expected_prev[1];
	end
	if (
		( instrucao_expected_prev[2] !== 1'bx ) && ( instrucao_prev[2] !== instrucao_expected_prev[2] )
		&& ((instrucao_expected_prev[2] !== last_instrucao_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[2] = instrucao_expected_prev[2];
	end
	if (
		( instrucao_expected_prev[3] !== 1'bx ) && ( instrucao_prev[3] !== instrucao_expected_prev[3] )
		&& ((instrucao_expected_prev[3] !== last_instrucao_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[3] = instrucao_expected_prev[3];
	end
	if (
		( instrucao_expected_prev[4] !== 1'bx ) && ( instrucao_prev[4] !== instrucao_expected_prev[4] )
		&& ((instrucao_expected_prev[4] !== last_instrucao_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[4] = instrucao_expected_prev[4];
	end
	if (
		( instrucao_expected_prev[5] !== 1'bx ) && ( instrucao_prev[5] !== instrucao_expected_prev[5] )
		&& ((instrucao_expected_prev[5] !== last_instrucao_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[5] = instrucao_expected_prev[5];
	end
	if (
		( instrucao_expected_prev[6] !== 1'bx ) && ( instrucao_prev[6] !== instrucao_expected_prev[6] )
		&& ((instrucao_expected_prev[6] !== last_instrucao_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[6] = instrucao_expected_prev[6];
	end
	if (
		( instrucao_expected_prev[7] !== 1'bx ) && ( instrucao_prev[7] !== instrucao_expected_prev[7] )
		&& ((instrucao_expected_prev[7] !== last_instrucao_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[7] = instrucao_expected_prev[7];
	end
	if (
		( instrucao_expected_prev[8] !== 1'bx ) && ( instrucao_prev[8] !== instrucao_expected_prev[8] )
		&& ((instrucao_expected_prev[8] !== last_instrucao_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[8] = instrucao_expected_prev[8];
	end
	if (
		( instrucao_expected_prev[9] !== 1'bx ) && ( instrucao_prev[9] !== instrucao_expected_prev[9] )
		&& ((instrucao_expected_prev[9] !== last_instrucao_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[9] = instrucao_expected_prev[9];
	end
	if (
		( instrucao_expected_prev[10] !== 1'bx ) && ( instrucao_prev[10] !== instrucao_expected_prev[10] )
		&& ((instrucao_expected_prev[10] !== last_instrucao_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[10] = instrucao_expected_prev[10];
	end
	if (
		( instrucao_expected_prev[11] !== 1'bx ) && ( instrucao_prev[11] !== instrucao_expected_prev[11] )
		&& ((instrucao_expected_prev[11] !== last_instrucao_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[11] = instrucao_expected_prev[11];
	end
	if (
		( instrucao_expected_prev[12] !== 1'bx ) && ( instrucao_prev[12] !== instrucao_expected_prev[12] )
		&& ((instrucao_expected_prev[12] !== last_instrucao_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[12] = instrucao_expected_prev[12];
	end
	if (
		( instrucao_expected_prev[13] !== 1'bx ) && ( instrucao_prev[13] !== instrucao_expected_prev[13] )
		&& ((instrucao_expected_prev[13] !== last_instrucao_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[13] = instrucao_expected_prev[13];
	end
	if (
		( instrucao_expected_prev[14] !== 1'bx ) && ( instrucao_prev[14] !== instrucao_expected_prev[14] )
		&& ((instrucao_expected_prev[14] !== last_instrucao_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[14] = instrucao_expected_prev[14];
	end
	if (
		( instrucao_expected_prev[15] !== 1'bx ) && ( instrucao_prev[15] !== instrucao_expected_prev[15] )
		&& ((instrucao_expected_prev[15] !== last_instrucao_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[15] = instrucao_expected_prev[15];
	end
	if (
		( instrucao_expected_prev[16] !== 1'bx ) && ( instrucao_prev[16] !== instrucao_expected_prev[16] )
		&& ((instrucao_expected_prev[16] !== last_instrucao_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[16] = instrucao_expected_prev[16];
	end
	if (
		( instrucao_expected_prev[17] !== 1'bx ) && ( instrucao_prev[17] !== instrucao_expected_prev[17] )
		&& ((instrucao_expected_prev[17] !== last_instrucao_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[17] = instrucao_expected_prev[17];
	end
	if (
		( instrucao_expected_prev[18] !== 1'bx ) && ( instrucao_prev[18] !== instrucao_expected_prev[18] )
		&& ((instrucao_expected_prev[18] !== last_instrucao_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[18] = instrucao_expected_prev[18];
	end
	if (
		( instrucao_expected_prev[19] !== 1'bx ) && ( instrucao_prev[19] !== instrucao_expected_prev[19] )
		&& ((instrucao_expected_prev[19] !== last_instrucao_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[19] = instrucao_expected_prev[19];
	end
	if (
		( instrucao_expected_prev[20] !== 1'bx ) && ( instrucao_prev[20] !== instrucao_expected_prev[20] )
		&& ((instrucao_expected_prev[20] !== last_instrucao_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[20] = instrucao_expected_prev[20];
	end
	if (
		( instrucao_expected_prev[21] !== 1'bx ) && ( instrucao_prev[21] !== instrucao_expected_prev[21] )
		&& ((instrucao_expected_prev[21] !== last_instrucao_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[21] = instrucao_expected_prev[21];
	end
	if (
		( instrucao_expected_prev[22] !== 1'bx ) && ( instrucao_prev[22] !== instrucao_expected_prev[22] )
		&& ((instrucao_expected_prev[22] !== last_instrucao_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[22] = instrucao_expected_prev[22];
	end
	if (
		( instrucao_expected_prev[23] !== 1'bx ) && ( instrucao_prev[23] !== instrucao_expected_prev[23] )
		&& ((instrucao_expected_prev[23] !== last_instrucao_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[23] = instrucao_expected_prev[23];
	end
	if (
		( instrucao_expected_prev[24] !== 1'bx ) && ( instrucao_prev[24] !== instrucao_expected_prev[24] )
		&& ((instrucao_expected_prev[24] !== last_instrucao_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[24] = instrucao_expected_prev[24];
	end
	if (
		( instrucao_expected_prev[25] !== 1'bx ) && ( instrucao_prev[25] !== instrucao_expected_prev[25] )
		&& ((instrucao_expected_prev[25] !== last_instrucao_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[25] = instrucao_expected_prev[25];
	end
	if (
		( instrucao_expected_prev[26] !== 1'bx ) && ( instrucao_prev[26] !== instrucao_expected_prev[26] )
		&& ((instrucao_expected_prev[26] !== last_instrucao_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[26] = instrucao_expected_prev[26];
	end
	if (
		( instrucao_expected_prev[27] !== 1'bx ) && ( instrucao_prev[27] !== instrucao_expected_prev[27] )
		&& ((instrucao_expected_prev[27] !== last_instrucao_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[27] = instrucao_expected_prev[27];
	end
	if (
		( instrucao_expected_prev[28] !== 1'bx ) && ( instrucao_prev[28] !== instrucao_expected_prev[28] )
		&& ((instrucao_expected_prev[28] !== last_instrucao_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[28] = instrucao_expected_prev[28];
	end
	if (
		( instrucao_expected_prev[29] !== 1'bx ) && ( instrucao_prev[29] !== instrucao_expected_prev[29] )
		&& ((instrucao_expected_prev[29] !== last_instrucao_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[29] = instrucao_expected_prev[29];
	end
	if (
		( instrucao_expected_prev[30] !== 1'bx ) && ( instrucao_prev[30] !== instrucao_expected_prev[30] )
		&& ((instrucao_expected_prev[30] !== last_instrucao_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[30] = instrucao_expected_prev[30];
	end
	if (
		( instrucao_expected_prev[31] !== 1'bx ) && ( instrucao_prev[31] !== instrucao_expected_prev[31] )
		&& ((instrucao_expected_prev[31] !== last_instrucao_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_instrucao_exp[31] = instrucao_expected_prev[31];
	end
	if (
		( leituraRS_expected_prev[0] !== 1'bx ) && ( leituraRS_prev[0] !== leituraRS_expected_prev[0] )
		&& ((leituraRS_expected_prev[0] !== last_leituraRS_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[0] = leituraRS_expected_prev[0];
	end
	if (
		( leituraRS_expected_prev[1] !== 1'bx ) && ( leituraRS_prev[1] !== leituraRS_expected_prev[1] )
		&& ((leituraRS_expected_prev[1] !== last_leituraRS_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[1] = leituraRS_expected_prev[1];
	end
	if (
		( leituraRS_expected_prev[2] !== 1'bx ) && ( leituraRS_prev[2] !== leituraRS_expected_prev[2] )
		&& ((leituraRS_expected_prev[2] !== last_leituraRS_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[2] = leituraRS_expected_prev[2];
	end
	if (
		( leituraRS_expected_prev[3] !== 1'bx ) && ( leituraRS_prev[3] !== leituraRS_expected_prev[3] )
		&& ((leituraRS_expected_prev[3] !== last_leituraRS_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[3] = leituraRS_expected_prev[3];
	end
	if (
		( leituraRS_expected_prev[4] !== 1'bx ) && ( leituraRS_prev[4] !== leituraRS_expected_prev[4] )
		&& ((leituraRS_expected_prev[4] !== last_leituraRS_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[4] = leituraRS_expected_prev[4];
	end
	if (
		( leituraRS_expected_prev[5] !== 1'bx ) && ( leituraRS_prev[5] !== leituraRS_expected_prev[5] )
		&& ((leituraRS_expected_prev[5] !== last_leituraRS_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[5] = leituraRS_expected_prev[5];
	end
	if (
		( leituraRS_expected_prev[6] !== 1'bx ) && ( leituraRS_prev[6] !== leituraRS_expected_prev[6] )
		&& ((leituraRS_expected_prev[6] !== last_leituraRS_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[6] = leituraRS_expected_prev[6];
	end
	if (
		( leituraRS_expected_prev[7] !== 1'bx ) && ( leituraRS_prev[7] !== leituraRS_expected_prev[7] )
		&& ((leituraRS_expected_prev[7] !== last_leituraRS_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[7] = leituraRS_expected_prev[7];
	end
	if (
		( leituraRS_expected_prev[8] !== 1'bx ) && ( leituraRS_prev[8] !== leituraRS_expected_prev[8] )
		&& ((leituraRS_expected_prev[8] !== last_leituraRS_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[8] = leituraRS_expected_prev[8];
	end
	if (
		( leituraRS_expected_prev[9] !== 1'bx ) && ( leituraRS_prev[9] !== leituraRS_expected_prev[9] )
		&& ((leituraRS_expected_prev[9] !== last_leituraRS_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[9] = leituraRS_expected_prev[9];
	end
	if (
		( leituraRS_expected_prev[10] !== 1'bx ) && ( leituraRS_prev[10] !== leituraRS_expected_prev[10] )
		&& ((leituraRS_expected_prev[10] !== last_leituraRS_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[10] = leituraRS_expected_prev[10];
	end
	if (
		( leituraRS_expected_prev[11] !== 1'bx ) && ( leituraRS_prev[11] !== leituraRS_expected_prev[11] )
		&& ((leituraRS_expected_prev[11] !== last_leituraRS_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[11] = leituraRS_expected_prev[11];
	end
	if (
		( leituraRS_expected_prev[12] !== 1'bx ) && ( leituraRS_prev[12] !== leituraRS_expected_prev[12] )
		&& ((leituraRS_expected_prev[12] !== last_leituraRS_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[12] = leituraRS_expected_prev[12];
	end
	if (
		( leituraRS_expected_prev[13] !== 1'bx ) && ( leituraRS_prev[13] !== leituraRS_expected_prev[13] )
		&& ((leituraRS_expected_prev[13] !== last_leituraRS_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[13] = leituraRS_expected_prev[13];
	end
	if (
		( leituraRS_expected_prev[14] !== 1'bx ) && ( leituraRS_prev[14] !== leituraRS_expected_prev[14] )
		&& ((leituraRS_expected_prev[14] !== last_leituraRS_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[14] = leituraRS_expected_prev[14];
	end
	if (
		( leituraRS_expected_prev[15] !== 1'bx ) && ( leituraRS_prev[15] !== leituraRS_expected_prev[15] )
		&& ((leituraRS_expected_prev[15] !== last_leituraRS_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[15] = leituraRS_expected_prev[15];
	end
	if (
		( leituraRS_expected_prev[16] !== 1'bx ) && ( leituraRS_prev[16] !== leituraRS_expected_prev[16] )
		&& ((leituraRS_expected_prev[16] !== last_leituraRS_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[16] = leituraRS_expected_prev[16];
	end
	if (
		( leituraRS_expected_prev[17] !== 1'bx ) && ( leituraRS_prev[17] !== leituraRS_expected_prev[17] )
		&& ((leituraRS_expected_prev[17] !== last_leituraRS_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[17] = leituraRS_expected_prev[17];
	end
	if (
		( leituraRS_expected_prev[18] !== 1'bx ) && ( leituraRS_prev[18] !== leituraRS_expected_prev[18] )
		&& ((leituraRS_expected_prev[18] !== last_leituraRS_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[18] = leituraRS_expected_prev[18];
	end
	if (
		( leituraRS_expected_prev[19] !== 1'bx ) && ( leituraRS_prev[19] !== leituraRS_expected_prev[19] )
		&& ((leituraRS_expected_prev[19] !== last_leituraRS_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[19] = leituraRS_expected_prev[19];
	end
	if (
		( leituraRS_expected_prev[20] !== 1'bx ) && ( leituraRS_prev[20] !== leituraRS_expected_prev[20] )
		&& ((leituraRS_expected_prev[20] !== last_leituraRS_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[20] = leituraRS_expected_prev[20];
	end
	if (
		( leituraRS_expected_prev[21] !== 1'bx ) && ( leituraRS_prev[21] !== leituraRS_expected_prev[21] )
		&& ((leituraRS_expected_prev[21] !== last_leituraRS_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[21] = leituraRS_expected_prev[21];
	end
	if (
		( leituraRS_expected_prev[22] !== 1'bx ) && ( leituraRS_prev[22] !== leituraRS_expected_prev[22] )
		&& ((leituraRS_expected_prev[22] !== last_leituraRS_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[22] = leituraRS_expected_prev[22];
	end
	if (
		( leituraRS_expected_prev[23] !== 1'bx ) && ( leituraRS_prev[23] !== leituraRS_expected_prev[23] )
		&& ((leituraRS_expected_prev[23] !== last_leituraRS_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[23] = leituraRS_expected_prev[23];
	end
	if (
		( leituraRS_expected_prev[24] !== 1'bx ) && ( leituraRS_prev[24] !== leituraRS_expected_prev[24] )
		&& ((leituraRS_expected_prev[24] !== last_leituraRS_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[24] = leituraRS_expected_prev[24];
	end
	if (
		( leituraRS_expected_prev[25] !== 1'bx ) && ( leituraRS_prev[25] !== leituraRS_expected_prev[25] )
		&& ((leituraRS_expected_prev[25] !== last_leituraRS_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[25] = leituraRS_expected_prev[25];
	end
	if (
		( leituraRS_expected_prev[26] !== 1'bx ) && ( leituraRS_prev[26] !== leituraRS_expected_prev[26] )
		&& ((leituraRS_expected_prev[26] !== last_leituraRS_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[26] = leituraRS_expected_prev[26];
	end
	if (
		( leituraRS_expected_prev[27] !== 1'bx ) && ( leituraRS_prev[27] !== leituraRS_expected_prev[27] )
		&& ((leituraRS_expected_prev[27] !== last_leituraRS_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[27] = leituraRS_expected_prev[27];
	end
	if (
		( leituraRS_expected_prev[28] !== 1'bx ) && ( leituraRS_prev[28] !== leituraRS_expected_prev[28] )
		&& ((leituraRS_expected_prev[28] !== last_leituraRS_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[28] = leituraRS_expected_prev[28];
	end
	if (
		( leituraRS_expected_prev[29] !== 1'bx ) && ( leituraRS_prev[29] !== leituraRS_expected_prev[29] )
		&& ((leituraRS_expected_prev[29] !== last_leituraRS_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[29] = leituraRS_expected_prev[29];
	end
	if (
		( leituraRS_expected_prev[30] !== 1'bx ) && ( leituraRS_prev[30] !== leituraRS_expected_prev[30] )
		&& ((leituraRS_expected_prev[30] !== last_leituraRS_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[30] = leituraRS_expected_prev[30];
	end
	if (
		( leituraRS_expected_prev[31] !== 1'bx ) && ( leituraRS_prev[31] !== leituraRS_expected_prev[31] )
		&& ((leituraRS_expected_prev[31] !== last_leituraRS_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRS_expected_prev);
		$display ("     Real value = %b", leituraRS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_leituraRS_exp[31] = leituraRS_expected_prev[31];
	end
	if (
		( leituraRT_expected_prev[0] !== 1'bx ) && ( leituraRT_prev[0] !== leituraRT_expected_prev[0] )
		&& ((leituraRT_expected_prev[0] !== last_leituraRT_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[0] = leituraRT_expected_prev[0];
	end
	if (
		( leituraRT_expected_prev[1] !== 1'bx ) && ( leituraRT_prev[1] !== leituraRT_expected_prev[1] )
		&& ((leituraRT_expected_prev[1] !== last_leituraRT_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[1] = leituraRT_expected_prev[1];
	end
	if (
		( leituraRT_expected_prev[2] !== 1'bx ) && ( leituraRT_prev[2] !== leituraRT_expected_prev[2] )
		&& ((leituraRT_expected_prev[2] !== last_leituraRT_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[2] = leituraRT_expected_prev[2];
	end
	if (
		( leituraRT_expected_prev[3] !== 1'bx ) && ( leituraRT_prev[3] !== leituraRT_expected_prev[3] )
		&& ((leituraRT_expected_prev[3] !== last_leituraRT_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[3] = leituraRT_expected_prev[3];
	end
	if (
		( leituraRT_expected_prev[4] !== 1'bx ) && ( leituraRT_prev[4] !== leituraRT_expected_prev[4] )
		&& ((leituraRT_expected_prev[4] !== last_leituraRT_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[4] = leituraRT_expected_prev[4];
	end
	if (
		( leituraRT_expected_prev[5] !== 1'bx ) && ( leituraRT_prev[5] !== leituraRT_expected_prev[5] )
		&& ((leituraRT_expected_prev[5] !== last_leituraRT_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[5] = leituraRT_expected_prev[5];
	end
	if (
		( leituraRT_expected_prev[6] !== 1'bx ) && ( leituraRT_prev[6] !== leituraRT_expected_prev[6] )
		&& ((leituraRT_expected_prev[6] !== last_leituraRT_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[6] = leituraRT_expected_prev[6];
	end
	if (
		( leituraRT_expected_prev[7] !== 1'bx ) && ( leituraRT_prev[7] !== leituraRT_expected_prev[7] )
		&& ((leituraRT_expected_prev[7] !== last_leituraRT_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[7] = leituraRT_expected_prev[7];
	end
	if (
		( leituraRT_expected_prev[8] !== 1'bx ) && ( leituraRT_prev[8] !== leituraRT_expected_prev[8] )
		&& ((leituraRT_expected_prev[8] !== last_leituraRT_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[8] = leituraRT_expected_prev[8];
	end
	if (
		( leituraRT_expected_prev[9] !== 1'bx ) && ( leituraRT_prev[9] !== leituraRT_expected_prev[9] )
		&& ((leituraRT_expected_prev[9] !== last_leituraRT_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[9] = leituraRT_expected_prev[9];
	end
	if (
		( leituraRT_expected_prev[10] !== 1'bx ) && ( leituraRT_prev[10] !== leituraRT_expected_prev[10] )
		&& ((leituraRT_expected_prev[10] !== last_leituraRT_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[10] = leituraRT_expected_prev[10];
	end
	if (
		( leituraRT_expected_prev[11] !== 1'bx ) && ( leituraRT_prev[11] !== leituraRT_expected_prev[11] )
		&& ((leituraRT_expected_prev[11] !== last_leituraRT_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[11] = leituraRT_expected_prev[11];
	end
	if (
		( leituraRT_expected_prev[12] !== 1'bx ) && ( leituraRT_prev[12] !== leituraRT_expected_prev[12] )
		&& ((leituraRT_expected_prev[12] !== last_leituraRT_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[12] = leituraRT_expected_prev[12];
	end
	if (
		( leituraRT_expected_prev[13] !== 1'bx ) && ( leituraRT_prev[13] !== leituraRT_expected_prev[13] )
		&& ((leituraRT_expected_prev[13] !== last_leituraRT_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[13] = leituraRT_expected_prev[13];
	end
	if (
		( leituraRT_expected_prev[14] !== 1'bx ) && ( leituraRT_prev[14] !== leituraRT_expected_prev[14] )
		&& ((leituraRT_expected_prev[14] !== last_leituraRT_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[14] = leituraRT_expected_prev[14];
	end
	if (
		( leituraRT_expected_prev[15] !== 1'bx ) && ( leituraRT_prev[15] !== leituraRT_expected_prev[15] )
		&& ((leituraRT_expected_prev[15] !== last_leituraRT_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[15] = leituraRT_expected_prev[15];
	end
	if (
		( leituraRT_expected_prev[16] !== 1'bx ) && ( leituraRT_prev[16] !== leituraRT_expected_prev[16] )
		&& ((leituraRT_expected_prev[16] !== last_leituraRT_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[16] = leituraRT_expected_prev[16];
	end
	if (
		( leituraRT_expected_prev[17] !== 1'bx ) && ( leituraRT_prev[17] !== leituraRT_expected_prev[17] )
		&& ((leituraRT_expected_prev[17] !== last_leituraRT_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[17] = leituraRT_expected_prev[17];
	end
	if (
		( leituraRT_expected_prev[18] !== 1'bx ) && ( leituraRT_prev[18] !== leituraRT_expected_prev[18] )
		&& ((leituraRT_expected_prev[18] !== last_leituraRT_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[18] = leituraRT_expected_prev[18];
	end
	if (
		( leituraRT_expected_prev[19] !== 1'bx ) && ( leituraRT_prev[19] !== leituraRT_expected_prev[19] )
		&& ((leituraRT_expected_prev[19] !== last_leituraRT_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[19] = leituraRT_expected_prev[19];
	end
	if (
		( leituraRT_expected_prev[20] !== 1'bx ) && ( leituraRT_prev[20] !== leituraRT_expected_prev[20] )
		&& ((leituraRT_expected_prev[20] !== last_leituraRT_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[20] = leituraRT_expected_prev[20];
	end
	if (
		( leituraRT_expected_prev[21] !== 1'bx ) && ( leituraRT_prev[21] !== leituraRT_expected_prev[21] )
		&& ((leituraRT_expected_prev[21] !== last_leituraRT_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[21] = leituraRT_expected_prev[21];
	end
	if (
		( leituraRT_expected_prev[22] !== 1'bx ) && ( leituraRT_prev[22] !== leituraRT_expected_prev[22] )
		&& ((leituraRT_expected_prev[22] !== last_leituraRT_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[22] = leituraRT_expected_prev[22];
	end
	if (
		( leituraRT_expected_prev[23] !== 1'bx ) && ( leituraRT_prev[23] !== leituraRT_expected_prev[23] )
		&& ((leituraRT_expected_prev[23] !== last_leituraRT_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[23] = leituraRT_expected_prev[23];
	end
	if (
		( leituraRT_expected_prev[24] !== 1'bx ) && ( leituraRT_prev[24] !== leituraRT_expected_prev[24] )
		&& ((leituraRT_expected_prev[24] !== last_leituraRT_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[24] = leituraRT_expected_prev[24];
	end
	if (
		( leituraRT_expected_prev[25] !== 1'bx ) && ( leituraRT_prev[25] !== leituraRT_expected_prev[25] )
		&& ((leituraRT_expected_prev[25] !== last_leituraRT_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[25] = leituraRT_expected_prev[25];
	end
	if (
		( leituraRT_expected_prev[26] !== 1'bx ) && ( leituraRT_prev[26] !== leituraRT_expected_prev[26] )
		&& ((leituraRT_expected_prev[26] !== last_leituraRT_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[26] = leituraRT_expected_prev[26];
	end
	if (
		( leituraRT_expected_prev[27] !== 1'bx ) && ( leituraRT_prev[27] !== leituraRT_expected_prev[27] )
		&& ((leituraRT_expected_prev[27] !== last_leituraRT_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[27] = leituraRT_expected_prev[27];
	end
	if (
		( leituraRT_expected_prev[28] !== 1'bx ) && ( leituraRT_prev[28] !== leituraRT_expected_prev[28] )
		&& ((leituraRT_expected_prev[28] !== last_leituraRT_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[28] = leituraRT_expected_prev[28];
	end
	if (
		( leituraRT_expected_prev[29] !== 1'bx ) && ( leituraRT_prev[29] !== leituraRT_expected_prev[29] )
		&& ((leituraRT_expected_prev[29] !== last_leituraRT_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[29] = leituraRT_expected_prev[29];
	end
	if (
		( leituraRT_expected_prev[30] !== 1'bx ) && ( leituraRT_prev[30] !== leituraRT_expected_prev[30] )
		&& ((leituraRT_expected_prev[30] !== last_leituraRT_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[30] = leituraRT_expected_prev[30];
	end
	if (
		( leituraRT_expected_prev[31] !== 1'bx ) && ( leituraRT_prev[31] !== leituraRT_expected_prev[31] )
		&& ((leituraRT_expected_prev[31] !== last_leituraRT_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leituraRT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leituraRT_expected_prev);
		$display ("     Real value = %b", leituraRT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_leituraRT_exp[31] = leituraRT_expected_prev[31];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module iZero_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg halt;
reg IN_BUTTON;
reg reset;
reg [7:0] SLIDE_SWITCHES;
// wires                                               
wire [6:0] D1_DEZENA;
wire D1_SINAL;
wire [6:0] D1_UNIDADE;
wire [6:0] D2_DEZENA;
wire D2_SINAL;
wire [6:0] D2_UNIDADE;
wire [6:0] D3_CENTENA;
wire [6:0] D3_DEZENA;
wire [6:0] D3_MILHAR;
wire D3_SINAL;
wire [6:0] D3_UNIDADE;
wire [31:0] DADOS_ESCRITOS;
wire [31:0] instrucao;
wire [31:0] leituraRS;
wire [31:0] leituraRT;
wire [25:0] PC;

wire sampler;                             

// assign statements (if any)                          
iZero i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.D1_DEZENA(D1_DEZENA),
	.D1_SINAL(D1_SINAL),
	.D1_UNIDADE(D1_UNIDADE),
	.D2_DEZENA(D2_DEZENA),
	.D2_SINAL(D2_SINAL),
	.D2_UNIDADE(D2_UNIDADE),
	.D3_CENTENA(D3_CENTENA),
	.D3_DEZENA(D3_DEZENA),
	.D3_MILHAR(D3_MILHAR),
	.D3_SINAL(D3_SINAL),
	.D3_UNIDADE(D3_UNIDADE),
	.DADOS_ESCRITOS(DADOS_ESCRITOS),
	.halt(halt),
	.IN_BUTTON(IN_BUTTON),
	.instrucao(instrucao),
	.leituraRS(leituraRS),
	.leituraRT(leituraRT),
	.PC(PC),
	.reset(reset),
	.SLIDE_SWITCHES(SLIDE_SWITCHES)
);

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

// IN_BUTTON
initial
begin
	IN_BUTTON = 1'b0;
end 
// SLIDE_SWITCHES[ 7 ]
initial
begin
	SLIDE_SWITCHES[7] = 1'b0;
end 
// SLIDE_SWITCHES[ 6 ]
initial
begin
	SLIDE_SWITCHES[6] = 1'b0;
end 
// SLIDE_SWITCHES[ 5 ]
initial
begin
	SLIDE_SWITCHES[5] = 1'b0;
end 
// SLIDE_SWITCHES[ 4 ]
initial
begin
	SLIDE_SWITCHES[4] = 1'b0;
end 
// SLIDE_SWITCHES[ 3 ]
initial
begin
	SLIDE_SWITCHES[3] = 1'b0;
end 
// SLIDE_SWITCHES[ 2 ]
initial
begin
	SLIDE_SWITCHES[2] = 1'b0;
end 
// SLIDE_SWITCHES[ 1 ]
initial
begin
	SLIDE_SWITCHES[1] = 1'b0;
end 
// SLIDE_SWITCHES[ 0 ]
initial
begin
	SLIDE_SWITCHES[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// halt
initial
begin
	halt = 1'b0;
end 

iZero_vlg_sample_tst tb_sample (
	.clock(clock),
	.halt(halt),
	.IN_BUTTON(IN_BUTTON),
	.reset(reset),
	.SLIDE_SWITCHES(SLIDE_SWITCHES),
	.sampler_tx(sampler)
);

iZero_vlg_check_tst tb_out(
	.D1_DEZENA(D1_DEZENA),
	.D1_SINAL(D1_SINAL),
	.D1_UNIDADE(D1_UNIDADE),
	.D2_DEZENA(D2_DEZENA),
	.D2_SINAL(D2_SINAL),
	.D2_UNIDADE(D2_UNIDADE),
	.D3_CENTENA(D3_CENTENA),
	.D3_DEZENA(D3_DEZENA),
	.D3_MILHAR(D3_MILHAR),
	.D3_SINAL(D3_SINAL),
	.D3_UNIDADE(D3_UNIDADE),
	.DADOS_ESCRITOS(DADOS_ESCRITOS),
	.instrucao(instrucao),
	.leituraRS(leituraRS),
	.leituraRT(leituraRT),
	.PC(PC),
	.sampler_rx(sampler)
);
endmodule

